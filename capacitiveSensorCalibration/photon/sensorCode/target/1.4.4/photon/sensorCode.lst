
/home/zethuria/bin/nightingale/photon/sensorCode/target/1.4.4/photon/sensorCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001bd4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1bf0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a4  20000000  080a1bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008b4  200000a4  200000a4  000300a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1c98  080a1c98  00021c98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1cc0  080a1cc0  00021cc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a43f9  00000000  00000000  00021cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f07b  00000000  00000000  000c60bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000020d8  00000000  00000000  000d5138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000254d3  00000000  00000000  000d7210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00022ca3  00000000  00000000  000fc6e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a5dd8  00000000  00000000  0011f386  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001314b  00000000  00000000  001c515e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003358  00000000  00000000  001d82a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b9ac  00000000  00000000  001db604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fbd9 	bl	80a17e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fbde 	bl	80a17fa <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1bf4 	.word	0x080a1bf4
 80a004c:	200000a4 	.word	0x200000a4
 80a0050:	200000a4 	.word	0x200000a4
 80a0054:	20000958 	.word	0x20000958
 80a0058:	20000958 	.word	0x20000958

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f84d 	bl	80a10fc <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1bbc 	.word	0x080a1bbc
 80a0084:	080a1bf0 	.word	0x080a1bf0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b822 	b.w	80a00d0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fac2 	bl	80a0616 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bff3 	b.w	80a1080 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bcb1 	b.w	80a0a00 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <__tcf_0>:
//OSM: stripMeasure      : RGB: RED
//SIM: senderIntMeasure  : RGB: YELLOW
//RIM: recIntMeasure     : RGB: CYAN
//ADD: addStrip          : RGB: BLUE
//SUB: removeStrip       :
String menuSelection[menuSelectionSize] = {"stripMeasure", "senderIntMeasure", "recIntMeasurem", "addStrip", "removeStrip"};
 80a00b0:	b538      	push	{r3, r4, r5, lr}
 80a00b2:	4d06      	ldr	r5, [pc, #24]	; (80a00cc <__tcf_0+0x1c>)
 80a00b4:	2400      	movs	r4, #0
 80a00b6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a00ba:	4428      	add	r0, r5
 80a00bc:	3c10      	subs	r4, #16
 80a00be:	f001 f8f3 	bl	80a12a8 <_ZN6StringD1Ev>
 80a00c2:	f114 0f50 	cmn.w	r4, #80	; 0x50
 80a00c6:	d1f6      	bne.n	80a00b6 <__tcf_0+0x6>
 80a00c8:	bd38      	pop	{r3, r4, r5, pc}
 80a00ca:	bf00      	nop
 80a00cc:	20000380 	.word	0x20000380

080a00d0 <setup>:
unsigned int automaticTime1 = 0;
unsigned int automaticTime2 = 0;


void setup()
{
 80a00d0:	b508      	push	{r3, lr}

    //Serial out encoding
    Serial.begin(9600);
 80a00d2:	f000 fed3 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a00d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00da:	f000 feb5 	bl	80a0e48 <_ZN9USBSerial5beginEl>

    //If set to true the op amp has power, if set to false the op amp power is set to ground



}
 80a00de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    //Creates a square wave on the sender plate to measure strips inside
    //stripsSignal(10000);

    //Enables controlling of RGB light
    RGB.control(true);
 80a00e2:	2001      	movs	r0, #1
 80a00e4:	f001 b83c 	b.w	80a1160 <_ZN8RGBClass7controlEb>

080a00e8 <_Z12stripsSignali>:

void stripsSignal(int inputFreq)
{

    //tone(senderSignalPin, inputFreq, 0);
    analogWrite(senderSignalPin, 127, inputFreq);
 80a00e8:	4b02      	ldr	r3, [pc, #8]	; (80a00f4 <_Z12stripsSignali+0xc>)
 80a00ea:	4602      	mov	r2, r0
 80a00ec:	217f      	movs	r1, #127	; 0x7f
 80a00ee:	8818      	ldrh	r0, [r3, #0]
 80a00f0:	f001 b9ff 	b.w	80a14f2 <_Z11analogWritetmm>
 80a00f4:	2000001c 	.word	0x2000001c

080a00f8 <_Z18setupMeasureStripsv>:
* SETUP FUNCTIONS *
*******************
*/

void setupMeasureStrips()
{
 80a00f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    //Disable all tones
    noTone(senderSignalPin);
 80a00fc:	4e2c      	ldr	r6, [pc, #176]	; (80a01b0 <_Z18setupMeasureStripsv+0xb8>)
    noTone(senderGroundPlate);
 80a00fe:	4d2d      	ldr	r5, [pc, #180]	; (80a01b4 <_Z18setupMeasureStripsv+0xbc>)

void setupMeasureStrips()
{

    //Disable all tones
    noTone(senderSignalPin);
 80a0100:	7830      	ldrb	r0, [r6, #0]
    noTone(senderGroundPlate);
    noTone(recGroundPlate);
 80a0102:	4c2d      	ldr	r4, [pc, #180]	; (80a01b8 <_Z18setupMeasureStripsv+0xc0>)

void setupMeasureStrips()
{

    //Disable all tones
    noTone(senderSignalPin);
 80a0104:	f000 fe36 	bl	80a0d74 <noTone>
    noTone(senderGroundPlate);
 80a0108:	7828      	ldrb	r0, [r5, #0]
 80a010a:	f000 fe33 	bl	80a0d74 <noTone>
    noTone(recGroundPlate);
 80a010e:	7820      	ldrb	r0, [r4, #0]
 80a0110:	f000 fe30 	bl	80a0d74 <noTone>

    //Set direction of pins

    //Sender plates
    pinMode(senderSignalPin, OUTPUT);
 80a0114:	8830      	ldrh	r0, [r6, #0]
 80a0116:	2101      	movs	r1, #1
 80a0118:	f001 f9aa 	bl	80a1470 <pinMode>
    pinMode(senderGroundPlate, OUTPUT);
 80a011c:	2101      	movs	r1, #1
 80a011e:	8828      	ldrh	r0, [r5, #0]
 80a0120:	f001 f9a6 	bl	80a1470 <pinMode>

    //Sender circuit pins
    pinMode(senderInputGround, INPUT);
 80a0124:	4b25      	ldr	r3, [pc, #148]	; (80a01bc <_Z18setupMeasureStripsv+0xc4>)
    pinMode(senderCapGround, OUTPUT);
 80a0126:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80a01d4 <_Z18setupMeasureStripsv+0xdc>
    //Sender plates
    pinMode(senderSignalPin, OUTPUT);
    pinMode(senderGroundPlate, OUTPUT);

    //Sender circuit pins
    pinMode(senderInputGround, INPUT);
 80a012a:	8818      	ldrh	r0, [r3, #0]
 80a012c:	2100      	movs	r1, #0
 80a012e:	f001 f99f 	bl	80a1470 <pinMode>
    pinMode(senderCapGround, OUTPUT);
 80a0132:	2101      	movs	r1, #1
 80a0134:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0138:	f001 f99a 	bl	80a1470 <pinMode>
    pinMode(senderVoltage, INPUT);
 80a013c:	4b20      	ldr	r3, [pc, #128]	; (80a01c0 <_Z18setupMeasureStripsv+0xc8>)
 80a013e:	2100      	movs	r1, #0
 80a0140:	8818      	ldrh	r0, [r3, #0]

    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
 80a0142:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80a01d8 <_Z18setupMeasureStripsv+0xe0>
    pinMode(senderGroundPlate, OUTPUT);

    //Sender circuit pins
    pinMode(senderInputGround, INPUT);
    pinMode(senderCapGround, OUTPUT);
    pinMode(senderVoltage, INPUT);
 80a0146:	f001 f993 	bl	80a1470 <pinMode>
    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
    pinMode(recCapGround, OUTPUT);
 80a014a:	4f1e      	ldr	r7, [pc, #120]	; (80a01c4 <_Z18setupMeasureStripsv+0xcc>)
    pinMode(senderInputGround, INPUT);
    pinMode(senderCapGround, OUTPUT);
    pinMode(senderVoltage, INPUT);

    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);
 80a014c:	2101      	movs	r1, #1
 80a014e:	8820      	ldrh	r0, [r4, #0]
 80a0150:	f001 f98e 	bl	80a1470 <pinMode>

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
    pinMode(recCapGround, OUTPUT);
    pinMode(recVoltage, INPUT);
 80a0154:	4e1c      	ldr	r6, [pc, #112]	; (80a01c8 <_Z18setupMeasureStripsv+0xd0>)

    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
 80a0156:	2101      	movs	r1, #1
 80a0158:	f8b8 0000 	ldrh.w	r0, [r8]
 80a015c:	f001 f988 	bl	80a1470 <pinMode>
    pinMode(recCapGround, OUTPUT);
 80a0160:	2101      	movs	r1, #1
 80a0162:	8838      	ldrh	r0, [r7, #0]
 80a0164:	f001 f984 	bl	80a1470 <pinMode>
    pinMode(recVoltage, INPUT);
 80a0168:	2100      	movs	r1, #0
 80a016a:	8830      	ldrh	r0, [r6, #0]
 80a016c:	f001 f980 	bl	80a1470 <pinMode>

    //Sender plates
    digitalWrite(senderGroundPlate, LOW);
 80a0170:	2100      	movs	r1, #0
 80a0172:	8828      	ldrh	r0, [r5, #0]
 80a0174:	f001 f98d 	bl	80a1492 <digitalWrite>

    //Sender circuit plates
    digitalWrite(senderCapGround, LOW);
 80a0178:	2100      	movs	r1, #0
 80a017a:	f8b9 0000 	ldrh.w	r0, [r9]
 80a017e:	f001 f988 	bl	80a1492 <digitalWrite>

    //Receiver plates
    digitalWrite(recGroundPlate, LOW);
 80a0182:	2100      	movs	r1, #0
 80a0184:	8820      	ldrh	r0, [r4, #0]
 80a0186:	f001 f984 	bl	80a1492 <digitalWrite>

    //Receiver circuit pins
    digitalWrite(recInputGround, LOW);
 80a018a:	2100      	movs	r1, #0
 80a018c:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0190:	f001 f97f 	bl	80a1492 <digitalWrite>
    digitalWrite(recCapGround, LOW);
 80a0194:	2100      	movs	r1, #0
 80a0196:	8838      	ldrh	r0, [r7, #0]
 80a0198:	f001 f97b 	bl	80a1492 <digitalWrite>

    //Creates a square wave with the frequency as an argument
    stripsSignal(opioidStripMeasurementFrequency);
 80a019c:	4b0b      	ldr	r3, [pc, #44]	; (80a01cc <_Z18setupMeasureStripsv+0xd4>)
 80a019e:	6818      	ldr	r0, [r3, #0]
 80a01a0:	f7ff ffa2 	bl	80a00e8 <_Z12stripsSignali>

    currentADCPin = recVoltage;
 80a01a4:	6832      	ldr	r2, [r6, #0]
 80a01a6:	4b0a      	ldr	r3, [pc, #40]	; (80a01d0 <_Z18setupMeasureStripsv+0xd8>)
 80a01a8:	601a      	str	r2, [r3, #0]
 80a01aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a01ae:	bf00      	nop
 80a01b0:	2000001c 	.word	0x2000001c
 80a01b4:	20000024 	.word	0x20000024
 80a01b8:	20000020 	.word	0x20000020
 80a01bc:	20000034 	.word	0x20000034
 80a01c0:	20000000 	.word	0x20000000
 80a01c4:	200000a8 	.word	0x200000a8
 80a01c8:	20000008 	.word	0x20000008
 80a01cc:	2000000c 	.word	0x2000000c
 80a01d0:	200000ac 	.word	0x200000ac
 80a01d4:	2000002c 	.word	0x2000002c
 80a01d8:	20000028 	.word	0x20000028

080a01dc <_Z24senderInterferenceSignali>:
void senderInterferenceSignal(int inputFreq)
{

    //tone(senderGroundPlate, inputFreq, 0);

    analogWrite(senderGroundPlate, 127, inputFreq);
 80a01dc:	4b02      	ldr	r3, [pc, #8]	; (80a01e8 <_Z24senderInterferenceSignali+0xc>)
 80a01de:	4602      	mov	r2, r0
 80a01e0:	217f      	movs	r1, #127	; 0x7f
 80a01e2:	8818      	ldrh	r0, [r3, #0]
 80a01e4:	f001 b985 	b.w	80a14f2 <_Z11analogWritetmm>
 80a01e8:	20000024 	.word	0x20000024

080a01ec <_Z30setupMeasureSenderInterferencev>:

    currentADCPin = recVoltage;
}

void setupMeasureSenderInterference()
{
 80a01ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    //Disable all tones
    noTone(senderSignalPin);
 80a01ee:	4d25      	ldr	r5, [pc, #148]	; (80a0284 <_Z30setupMeasureSenderInterferencev+0x98>)
    noTone(senderGroundPlate);
 80a01f0:	4c25      	ldr	r4, [pc, #148]	; (80a0288 <_Z30setupMeasureSenderInterferencev+0x9c>)

void setupMeasureSenderInterference()
{

    //Disable all tones
    noTone(senderSignalPin);
 80a01f2:	7828      	ldrb	r0, [r5, #0]
    noTone(senderGroundPlate);
    noTone(recGroundPlate);
 80a01f4:	4f25      	ldr	r7, [pc, #148]	; (80a028c <_Z30setupMeasureSenderInterferencev+0xa0>)

void setupMeasureSenderInterference()
{

    //Disable all tones
    noTone(senderSignalPin);
 80a01f6:	f000 fdbd 	bl	80a0d74 <noTone>
    noTone(senderGroundPlate);
 80a01fa:	7820      	ldrb	r0, [r4, #0]
 80a01fc:	f000 fdba 	bl	80a0d74 <noTone>
    noTone(recGroundPlate);
 80a0200:	7838      	ldrb	r0, [r7, #0]
 80a0202:	f000 fdb7 	bl	80a0d74 <noTone>
    //Sender plates
    pinMode(senderSignalPin, INPUT);
    pinMode(senderGroundPlate, OUTPUT);

    //Sender circuit pins
    pinMode(senderInputGround, OUTPUT);
 80a0206:	4e22      	ldr	r6, [pc, #136]	; (80a0290 <_Z30setupMeasureSenderInterferencev+0xa4>)
    noTone(recGroundPlate);

    //Set direction of pins

    //Sender plates
    pinMode(senderSignalPin, INPUT);
 80a0208:	8828      	ldrh	r0, [r5, #0]
 80a020a:	2100      	movs	r1, #0
 80a020c:	f001 f930 	bl	80a1470 <pinMode>
    pinMode(senderGroundPlate, OUTPUT);

    //Sender circuit pins
    pinMode(senderInputGround, OUTPUT);
    pinMode(senderCapGround, OUTPUT);
 80a0210:	4d20      	ldr	r5, [pc, #128]	; (80a0294 <_Z30setupMeasureSenderInterferencev+0xa8>)

    //Set direction of pins

    //Sender plates
    pinMode(senderSignalPin, INPUT);
    pinMode(senderGroundPlate, OUTPUT);
 80a0212:	8820      	ldrh	r0, [r4, #0]
 80a0214:	2101      	movs	r1, #1
 80a0216:	f001 f92b 	bl	80a1470 <pinMode>

    //Sender circuit pins
    pinMode(senderInputGround, OUTPUT);
    pinMode(senderCapGround, OUTPUT);
    pinMode(senderVoltage, INPUT);
 80a021a:	4c1f      	ldr	r4, [pc, #124]	; (80a0298 <_Z30setupMeasureSenderInterferencev+0xac>)
    //Sender plates
    pinMode(senderSignalPin, INPUT);
    pinMode(senderGroundPlate, OUTPUT);

    //Sender circuit pins
    pinMode(senderInputGround, OUTPUT);
 80a021c:	2101      	movs	r1, #1
 80a021e:	8830      	ldrh	r0, [r6, #0]
 80a0220:	f001 f926 	bl	80a1470 <pinMode>
    pinMode(senderCapGround, OUTPUT);
 80a0224:	2101      	movs	r1, #1
 80a0226:	8828      	ldrh	r0, [r5, #0]
 80a0228:	f001 f922 	bl	80a1470 <pinMode>
    pinMode(senderVoltage, INPUT);
 80a022c:	2100      	movs	r1, #0
 80a022e:	8820      	ldrh	r0, [r4, #0]
 80a0230:	f001 f91e 	bl	80a1470 <pinMode>

    //Receiver plates
    pinMode(recGroundPlate, INPUT);
 80a0234:	8838      	ldrh	r0, [r7, #0]
 80a0236:	2100      	movs	r1, #0
 80a0238:	f001 f91a 	bl	80a1470 <pinMode>

    //Receiver circuit pins
    pinMode(recInputGround, INPUT);
 80a023c:	4b17      	ldr	r3, [pc, #92]	; (80a029c <_Z30setupMeasureSenderInterferencev+0xb0>)
    pinMode(recCapGround, OUTPUT);
 80a023e:	4f18      	ldr	r7, [pc, #96]	; (80a02a0 <_Z30setupMeasureSenderInterferencev+0xb4>)

    //Receiver plates
    pinMode(recGroundPlate, INPUT);

    //Receiver circuit pins
    pinMode(recInputGround, INPUT);
 80a0240:	8818      	ldrh	r0, [r3, #0]
 80a0242:	2100      	movs	r1, #0
 80a0244:	f001 f914 	bl	80a1470 <pinMode>
    pinMode(recCapGround, OUTPUT);
 80a0248:	2101      	movs	r1, #1
 80a024a:	8838      	ldrh	r0, [r7, #0]
 80a024c:	f001 f910 	bl	80a1470 <pinMode>
    pinMode(recVoltage, INPUT);
 80a0250:	4b14      	ldr	r3, [pc, #80]	; (80a02a4 <_Z30setupMeasureSenderInterferencev+0xb8>)
 80a0252:	2100      	movs	r1, #0
 80a0254:	8818      	ldrh	r0, [r3, #0]
 80a0256:	f001 f90b 	bl	80a1470 <pinMode>

    //Sender circuit pins
    digitalWrite(recCapGround, LOW);
 80a025a:	2100      	movs	r1, #0
 80a025c:	8838      	ldrh	r0, [r7, #0]
 80a025e:	f001 f918 	bl	80a1492 <digitalWrite>
    digitalWrite(senderInputGround, LOW);
 80a0262:	2100      	movs	r1, #0
 80a0264:	8830      	ldrh	r0, [r6, #0]
 80a0266:	f001 f914 	bl	80a1492 <digitalWrite>
    digitalWrite(senderCapGround, LOW);
 80a026a:	2100      	movs	r1, #0
 80a026c:	8828      	ldrh	r0, [r5, #0]
 80a026e:	f001 f910 	bl	80a1492 <digitalWrite>

    //Creates a square wave with the frequency as an argument
    senderInterferenceSignal(senderGroundPlateFrequency);
 80a0272:	4b0d      	ldr	r3, [pc, #52]	; (80a02a8 <_Z30setupMeasureSenderInterferencev+0xbc>)
 80a0274:	6818      	ldr	r0, [r3, #0]
 80a0276:	f7ff ffb1 	bl	80a01dc <_Z24senderInterferenceSignali>

    currentADCPin = senderVoltage;
 80a027a:	6822      	ldr	r2, [r4, #0]
 80a027c:	4b0b      	ldr	r3, [pc, #44]	; (80a02ac <_Z30setupMeasureSenderInterferencev+0xc0>)
 80a027e:	601a      	str	r2, [r3, #0]
 80a0280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0282:	bf00      	nop
 80a0284:	2000001c 	.word	0x2000001c
 80a0288:	20000024 	.word	0x20000024
 80a028c:	20000020 	.word	0x20000020
 80a0290:	20000034 	.word	0x20000034
 80a0294:	2000002c 	.word	0x2000002c
 80a0298:	20000000 	.word	0x20000000
 80a029c:	20000028 	.word	0x20000028
 80a02a0:	200000a8 	.word	0x200000a8
 80a02a4:	20000008 	.word	0x20000008
 80a02a8:	20000014 	.word	0x20000014
 80a02ac:	200000ac 	.word	0x200000ac

080a02b0 <_Z25receiveInterferenceSignali>:
void receiveInterferenceSignal(int inputFreq)
{

    //tone(recGroundPlate, inputFreq, 0);

    analogWrite(recGroundPlate, 127, inputFreq);
 80a02b0:	4b02      	ldr	r3, [pc, #8]	; (80a02bc <_Z25receiveInterferenceSignali+0xc>)
 80a02b2:	4602      	mov	r2, r0
 80a02b4:	217f      	movs	r1, #127	; 0x7f
 80a02b6:	8818      	ldrh	r0, [r3, #0]
 80a02b8:	f001 b91b 	b.w	80a14f2 <_Z11analogWritetmm>
 80a02bc:	20000020 	.word	0x20000020

080a02c0 <_Z31setupMeasureReceiveInterferencev>:

    currentADCPin = senderVoltage;
}

void setupMeasureReceiveInterference()
{
 80a02c0:	b570      	push	{r4, r5, r6, lr}

    //Disables all tones
    noTone(senderSignalPin);
 80a02c2:	4e23      	ldr	r6, [pc, #140]	; (80a0350 <_Z31setupMeasureReceiveInterferencev+0x90>)
    noTone(senderGroundPlate);
 80a02c4:	4d23      	ldr	r5, [pc, #140]	; (80a0354 <_Z31setupMeasureReceiveInterferencev+0x94>)

void setupMeasureReceiveInterference()
{

    //Disables all tones
    noTone(senderSignalPin);
 80a02c6:	7830      	ldrb	r0, [r6, #0]
    noTone(senderGroundPlate);
    noTone(recGroundPlate);
 80a02c8:	4c23      	ldr	r4, [pc, #140]	; (80a0358 <_Z31setupMeasureReceiveInterferencev+0x98>)

void setupMeasureReceiveInterference()
{

    //Disables all tones
    noTone(senderSignalPin);
 80a02ca:	f000 fd53 	bl	80a0d74 <noTone>
    noTone(senderGroundPlate);
 80a02ce:	7828      	ldrb	r0, [r5, #0]
 80a02d0:	f000 fd50 	bl	80a0d74 <noTone>
    noTone(recGroundPlate);
 80a02d4:	7820      	ldrb	r0, [r4, #0]
 80a02d6:	f000 fd4d 	bl	80a0d74 <noTone>

    //Set direction of pins

    //Sender pins
    pinMode(senderSignalPin, INPUT);
 80a02da:	8830      	ldrh	r0, [r6, #0]
 80a02dc:	2100      	movs	r1, #0
 80a02de:	f001 f8c7 	bl	80a1470 <pinMode>
    pinMode(senderGroundPlate, INPUT);
 80a02e2:	8828      	ldrh	r0, [r5, #0]
 80a02e4:	2100      	movs	r1, #0
 80a02e6:	f001 f8c3 	bl	80a1470 <pinMode>

    //Sender circuit pins
    pinMode(senderInputGround, INPUT);
 80a02ea:	4b1c      	ldr	r3, [pc, #112]	; (80a035c <_Z31setupMeasureReceiveInterferencev+0x9c>)
 80a02ec:	2100      	movs	r1, #0
 80a02ee:	8818      	ldrh	r0, [r3, #0]
 80a02f0:	f001 f8be 	bl	80a1470 <pinMode>
    pinMode(senderCapGround, INPUT);
 80a02f4:	4b1a      	ldr	r3, [pc, #104]	; (80a0360 <_Z31setupMeasureReceiveInterferencev+0xa0>)
 80a02f6:	2100      	movs	r1, #0
 80a02f8:	8818      	ldrh	r0, [r3, #0]
 80a02fa:	f001 f8b9 	bl	80a1470 <pinMode>
    pinMode(senderVoltage, INPUT);
 80a02fe:	4b19      	ldr	r3, [pc, #100]	; (80a0364 <_Z31setupMeasureReceiveInterferencev+0xa4>)
 80a0300:	2100      	movs	r1, #0
 80a0302:	8818      	ldrh	r0, [r3, #0]

    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
 80a0304:	4e18      	ldr	r6, [pc, #96]	; (80a0368 <_Z31setupMeasureReceiveInterferencev+0xa8>)
    pinMode(senderGroundPlate, INPUT);

    //Sender circuit pins
    pinMode(senderInputGround, INPUT);
    pinMode(senderCapGround, INPUT);
    pinMode(senderVoltage, INPUT);
 80a0306:	f001 f8b3 	bl	80a1470 <pinMode>
    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
    pinMode(recCapGround, OUTPUT);
 80a030a:	4d18      	ldr	r5, [pc, #96]	; (80a036c <_Z31setupMeasureReceiveInterferencev+0xac>)
    pinMode(senderInputGround, INPUT);
    pinMode(senderCapGround, INPUT);
    pinMode(senderVoltage, INPUT);

    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);
 80a030c:	8820      	ldrh	r0, [r4, #0]
 80a030e:	2101      	movs	r1, #1
 80a0310:	f001 f8ae 	bl	80a1470 <pinMode>

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
    pinMode(recCapGround, OUTPUT);
    pinMode(recVoltage, INPUT);
 80a0314:	4c16      	ldr	r4, [pc, #88]	; (80a0370 <_Z31setupMeasureReceiveInterferencev+0xb0>)

    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
 80a0316:	2101      	movs	r1, #1
 80a0318:	8830      	ldrh	r0, [r6, #0]
 80a031a:	f001 f8a9 	bl	80a1470 <pinMode>
    pinMode(recCapGround, OUTPUT);
 80a031e:	2101      	movs	r1, #1
 80a0320:	8828      	ldrh	r0, [r5, #0]
 80a0322:	f001 f8a5 	bl	80a1470 <pinMode>
    pinMode(recVoltage, INPUT);
 80a0326:	2100      	movs	r1, #0
 80a0328:	8820      	ldrh	r0, [r4, #0]
 80a032a:	f001 f8a1 	bl	80a1470 <pinMode>

    //Receiver circuit pins
    digitalWrite(recInputGround, LOW);
 80a032e:	2100      	movs	r1, #0
 80a0330:	8830      	ldrh	r0, [r6, #0]
 80a0332:	f001 f8ae 	bl	80a1492 <digitalWrite>
    digitalWrite(recCapGround, LOW);
 80a0336:	2100      	movs	r1, #0
 80a0338:	8828      	ldrh	r0, [r5, #0]
 80a033a:	f001 f8aa 	bl	80a1492 <digitalWrite>

    //Creates a square wave with the frequency as an argument
    receiveInterferenceSignal(recGroundPlateFrequency);
 80a033e:	4b0d      	ldr	r3, [pc, #52]	; (80a0374 <_Z31setupMeasureReceiveInterferencev+0xb4>)
 80a0340:	6818      	ldr	r0, [r3, #0]
 80a0342:	f7ff ffb5 	bl	80a02b0 <_Z25receiveInterferenceSignali>

    currentADCPin = recVoltage;
 80a0346:	6822      	ldr	r2, [r4, #0]
 80a0348:	4b0b      	ldr	r3, [pc, #44]	; (80a0378 <_Z31setupMeasureReceiveInterferencev+0xb8>)
 80a034a:	601a      	str	r2, [r3, #0]
 80a034c:	bd70      	pop	{r4, r5, r6, pc}
 80a034e:	bf00      	nop
 80a0350:	2000001c 	.word	0x2000001c
 80a0354:	20000024 	.word	0x20000024
 80a0358:	20000020 	.word	0x20000020
 80a035c:	20000034 	.word	0x20000034
 80a0360:	2000002c 	.word	0x2000002c
 80a0364:	20000000 	.word	0x20000000
 80a0368:	20000028 	.word	0x20000028
 80a036c:	200000a8 	.word	0x200000a8
 80a0370:	20000008 	.word	0x20000008
 80a0374:	20000038 	.word	0x20000038
 80a0378:	200000ac 	.word	0x200000ac

080a037c <_Z13movingAveragePjj>:
* ALGORITHM FUNCTIONS *
***********************
*/

unsigned int movingAverage(unsigned int arrayInput[], unsigned int arraySize)
{
 80a037c:	b510      	push	{r4, lr}

    unsigned int sum = 0;
 80a037e:	2300      	movs	r3, #0
 80a0380:	eb00 0481 	add.w	r4, r0, r1, lsl #2

    for (unsigned int index = 0; index < arraySize; index++)
 80a0384:	42a0      	cmp	r0, r4
 80a0386:	d003      	beq.n	80a0390 <_Z13movingAveragePjj+0x14>
    {

        sum += arrayInput[index];
 80a0388:	f850 2b04 	ldr.w	r2, [r0], #4
 80a038c:	4413      	add	r3, r2
unsigned int movingAverage(unsigned int arrayInput[], unsigned int arraySize)
{

    unsigned int sum = 0;

    for (unsigned int index = 0; index < arraySize; index++)
 80a038e:	e7f9      	b.n	80a0384 <_Z13movingAveragePjj+0x8>

        sum += arrayInput[index];
    }

    return (sum / arraySize);
}
 80a0390:	fbb3 f0f1 	udiv	r0, r3, r1
 80a0394:	bd10      	pop	{r4, pc}

080a0396 <_Z23movingStandardDeviationPjjj>:

unsigned int movingStandardDeviation(unsigned int arrayInput[], unsigned int average, unsigned int arraySize)
{
 80a0396:	b530      	push	{r4, r5, lr}
 80a0398:	eb00 0582 	add.w	r5, r0, r2, lsl #2

    unsigned int sum = 0;
 80a039c:	2400      	movs	r4, #0
    unsigned int temp = 0;

    for (unsigned int index = 0; index < arraySize; index++)
 80a039e:	42a8      	cmp	r0, r5
 80a03a0:	d005      	beq.n	80a03ae <_Z23movingStandardDeviationPjjj+0x18>
    {

        temp = (arrayInput[index] - average);
 80a03a2:	f850 3b04 	ldr.w	r3, [r0], #4
 80a03a6:	1a5b      	subs	r3, r3, r1
        temp = temp * temp;
        sum += temp;
 80a03a8:	fb03 4403 	mla	r4, r3, r3, r4
{

    unsigned int sum = 0;
    unsigned int temp = 0;

    for (unsigned int index = 0; index < arraySize; index++)
 80a03ac:	e7f7      	b.n	80a039e <_Z23movingStandardDeviationPjjj+0x8>
        temp = temp * temp;
        sum += temp;
    }

    return (sum / arraySize);
}
 80a03ae:	fbb4 f0f2 	udiv	r0, r4, r2
 80a03b2:	bd30      	pop	{r4, r5, pc}

080a03b4 <_Z26multiplexPlateMeasurementsb>:
*****************************
*/

//Takes 
void multiplexPlateMeasurements(bool writeToSerialMultiplex)
{
 80a03b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a03b8:	4604      	mov	r4, r0

    setupMeasureStrips();

    delay(multiplexSwitchDelay);
 80a03ba:	4d87      	ldr	r5, [pc, #540]	; (80a05d8 <_Z26multiplexPlateMeasurementsb+0x224>)

//Takes 
void multiplexPlateMeasurements(bool writeToSerialMultiplex)
{

    setupMeasureStrips();
 80a03bc:	f7ff fe9c 	bl	80a00f8 <_Z18setupMeasureStripsv>

    delay(multiplexSwitchDelay);
 80a03c0:	6828      	ldr	r0, [r5, #0]
 80a03c2:	f000 fefd 	bl	80a11c0 <delay>


    if (writeToSerialMultiplex)
 80a03c6:	b124      	cbz	r4, 80a03d2 <_Z26multiplexPlateMeasurementsb+0x1e>
    {
        Serial.println("OSM");
 80a03c8:	f000 fd58 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a03cc:	4983      	ldr	r1, [pc, #524]	; (80a05dc <_Z26multiplexPlateMeasurementsb+0x228>)
 80a03ce:	f000 ff33 	bl	80a1238 <_ZN5Print7printlnEPKc>
    for (unsigned int index = 0; index < stripCaptureArraySize; index++)
    {

        delay(stripDelay);

        unsigned int raw = analogRead(recVoltage);
 80a03d2:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80a0600 <_Z26multiplexPlateMeasurementsb+0x24c>
*****************************
*/

//Takes 
void multiplexPlateMeasurements(bool writeToSerialMultiplex)
{
 80a03d6:	2600      	movs	r6, #0
    }

    for (unsigned int index = 0; index < stripCaptureArraySize; index++)
    {

        delay(stripDelay);
 80a03d8:	4b81      	ldr	r3, [pc, #516]	; (80a05e0 <_Z26multiplexPlateMeasurementsb+0x22c>)

        unsigned int raw = analogRead(recVoltage);
        stripCaptureArray[index] = raw;
 80a03da:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80a0608 <_Z26multiplexPlateMeasurementsb+0x254>
    }

    for (unsigned int index = 0; index < stripCaptureArraySize; index++)
    {

        delay(stripDelay);
 80a03de:	6818      	ldr	r0, [r3, #0]
 80a03e0:	f000 feee 	bl	80a11c0 <delay>

        unsigned int raw = analogRead(recVoltage);
 80a03e4:	f8ba 0000 	ldrh.w	r0, [sl]
 80a03e8:	f001 f86c 	bl	80a14c4 <analogRead>
        stripCaptureArray[index] = raw;
        unsigned int average = movingAverage(stripCaptureArray, stripCaptureArraySize);
 80a03ec:	213c      	movs	r1, #60	; 0x3c
    {

        delay(stripDelay);

        unsigned int raw = analogRead(recVoltage);
        stripCaptureArray[index] = raw;
 80a03ee:	f84b 0026 	str.w	r0, [fp, r6, lsl #2]
    for (unsigned int index = 0; index < stripCaptureArraySize; index++)
    {

        delay(stripDelay);

        unsigned int raw = analogRead(recVoltage);
 80a03f2:	4680      	mov	r8, r0
        stripCaptureArray[index] = raw;
        unsigned int average = movingAverage(stripCaptureArray, stripCaptureArraySize);
 80a03f4:	4658      	mov	r0, fp
 80a03f6:	f7ff ffc1 	bl	80a037c <_Z13movingAveragePjj>
        unsigned int deviation = movingStandardDeviation(stripCaptureArray, average, stripCaptureArraySize);
 80a03fa:	223c      	movs	r2, #60	; 0x3c
 80a03fc:	4601      	mov	r1, r0

        delay(stripDelay);

        unsigned int raw = analogRead(recVoltage);
        stripCaptureArray[index] = raw;
        unsigned int average = movingAverage(stripCaptureArray, stripCaptureArraySize);
 80a03fe:	4607      	mov	r7, r0
        unsigned int deviation = movingStandardDeviation(stripCaptureArray, average, stripCaptureArraySize);
 80a0400:	4658      	mov	r0, fp
 80a0402:	f7ff ffc8 	bl	80a0396 <_Z23movingStandardDeviationPjjj>
 80a0406:	4683      	mov	fp, r0

        if (writeToSerialMultiplex)
 80a0408:	b37c      	cbz	r4, 80a046a <_Z26multiplexPlateMeasurementsb+0xb6>
        {

            Serial.print(millis());
 80a040a:	f000 fd37 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a040e:	4681      	mov	r9, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0410:	f000 fa0a 	bl	80a0828 <HAL_Timer_Get_Milli_Seconds>
 80a0414:	220a      	movs	r2, #10
 80a0416:	4601      	mov	r1, r0
 80a0418:	4648      	mov	r0, r9
 80a041a:	f000 ff36 	bl	80a128a <_ZN5Print5printEmi>
            Serial.print(",");
 80a041e:	f000 fd2d 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0422:	4970      	ldr	r1, [pc, #448]	; (80a05e4 <_Z26multiplexPlateMeasurementsb+0x230>)
 80a0424:	f000 fef5 	bl	80a1212 <_ZN5Print5printEPKc>
            Serial.print(raw);
 80a0428:	f000 fd28 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a042c:	220a      	movs	r2, #10
 80a042e:	4641      	mov	r1, r8
 80a0430:	f000 ff38 	bl	80a12a4 <_ZN5Print5printEji>
            Serial.print(",");
 80a0434:	f000 fd22 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0438:	496a      	ldr	r1, [pc, #424]	; (80a05e4 <_Z26multiplexPlateMeasurementsb+0x230>)
 80a043a:	f000 feea 	bl	80a1212 <_ZN5Print5printEPKc>
            Serial.print(average);
 80a043e:	f000 fd1d 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0442:	220a      	movs	r2, #10
 80a0444:	4639      	mov	r1, r7
 80a0446:	f000 ff2d 	bl	80a12a4 <_ZN5Print5printEji>
            Serial.print(",");
 80a044a:	f000 fd17 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a044e:	4965      	ldr	r1, [pc, #404]	; (80a05e4 <_Z26multiplexPlateMeasurementsb+0x230>)
 80a0450:	f000 fedf 	bl	80a1212 <_ZN5Print5printEPKc>
            Serial.print(deviation);
 80a0454:	f000 fd12 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0458:	4659      	mov	r1, fp
 80a045a:	220a      	movs	r2, #10
 80a045c:	f000 ff22 	bl	80a12a4 <_ZN5Print5printEji>
            Serial.print("\n");
 80a0460:	f000 fd0c 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0464:	4960      	ldr	r1, [pc, #384]	; (80a05e8 <_Z26multiplexPlateMeasurementsb+0x234>)
 80a0466:	f000 fed4 	bl	80a1212 <_ZN5Print5printEPKc>
    if (writeToSerialMultiplex)
    {
        Serial.println("OSM");
    }

    for (unsigned int index = 0; index < stripCaptureArraySize; index++)
 80a046a:	3601      	adds	r6, #1
 80a046c:	2e3c      	cmp	r6, #60	; 0x3c
 80a046e:	d1b3      	bne.n	80a03d8 <_Z26multiplexPlateMeasurementsb+0x24>
            Serial.print(deviation);
            Serial.print("\n");
        }
    }

    setupMeasureSenderInterference();
 80a0470:	f7ff febc 	bl	80a01ec <_Z30setupMeasureSenderInterferencev>

    if (writeToSerialMultiplex)
 80a0474:	b124      	cbz	r4, 80a0480 <_Z26multiplexPlateMeasurementsb+0xcc>
    {
        Serial.println("SIM");
 80a0476:	f000 fd01 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a047a:	495c      	ldr	r1, [pc, #368]	; (80a05ec <_Z26multiplexPlateMeasurementsb+0x238>)
 80a047c:	f000 fedc 	bl	80a1238 <_ZN5Print7printlnEPKc>
    }

    delay(multiplexSwitchDelay);
 80a0480:	6828      	ldr	r0, [r5, #0]
 80a0482:	f000 fe9d 	bl	80a11c0 <delay>
    {

        delay(senderIntDelay);

        unsigned int raw = analogRead(senderVoltage);
        senderIntCaptureArray[index] = raw;
 80a0486:	f8df b170 	ldr.w	fp, [pc, #368]	; 80a05f8 <_Z26multiplexPlateMeasurementsb+0x244>
    }

    delay(multiplexSwitchDelay);


    for (unsigned int index = 0; index < senderIntCaptureArraySize; index++)
 80a048a:	2600      	movs	r6, #0
    {

        delay(senderIntDelay);
 80a048c:	4b58      	ldr	r3, [pc, #352]	; (80a05f0 <_Z26multiplexPlateMeasurementsb+0x23c>)
 80a048e:	6818      	ldr	r0, [r3, #0]
 80a0490:	f000 fe96 	bl	80a11c0 <delay>

        unsigned int raw = analogRead(senderVoltage);
 80a0494:	4b57      	ldr	r3, [pc, #348]	; (80a05f4 <_Z26multiplexPlateMeasurementsb+0x240>)
 80a0496:	8818      	ldrh	r0, [r3, #0]
 80a0498:	f001 f814 	bl	80a14c4 <analogRead>
        senderIntCaptureArray[index] = raw;
        unsigned int average = movingAverage(senderIntCaptureArray, senderIntCaptureArraySize);
 80a049c:	213c      	movs	r1, #60	; 0x3c
    {

        delay(senderIntDelay);

        unsigned int raw = analogRead(senderVoltage);
        senderIntCaptureArray[index] = raw;
 80a049e:	f84b 0026 	str.w	r0, [fp, r6, lsl #2]
    for (unsigned int index = 0; index < senderIntCaptureArraySize; index++)
    {

        delay(senderIntDelay);

        unsigned int raw = analogRead(senderVoltage);
 80a04a2:	4680      	mov	r8, r0
        senderIntCaptureArray[index] = raw;
        unsigned int average = movingAverage(senderIntCaptureArray, senderIntCaptureArraySize);
 80a04a4:	4854      	ldr	r0, [pc, #336]	; (80a05f8 <_Z26multiplexPlateMeasurementsb+0x244>)
 80a04a6:	f7ff ff69 	bl	80a037c <_Z13movingAveragePjj>
        unsigned int deviation = movingStandardDeviation(senderIntCaptureArray, average, senderIntCaptureArraySize);
 80a04aa:	223c      	movs	r2, #60	; 0x3c
 80a04ac:	4601      	mov	r1, r0

        delay(senderIntDelay);

        unsigned int raw = analogRead(senderVoltage);
        senderIntCaptureArray[index] = raw;
        unsigned int average = movingAverage(senderIntCaptureArray, senderIntCaptureArraySize);
 80a04ae:	4607      	mov	r7, r0
        unsigned int deviation = movingStandardDeviation(senderIntCaptureArray, average, senderIntCaptureArraySize);
 80a04b0:	4851      	ldr	r0, [pc, #324]	; (80a05f8 <_Z26multiplexPlateMeasurementsb+0x244>)
 80a04b2:	f7ff ff70 	bl	80a0396 <_Z23movingStandardDeviationPjjj>
 80a04b6:	4681      	mov	r9, r0

        if (writeToSerialMultiplex)
 80a04b8:	b37c      	cbz	r4, 80a051a <_Z26multiplexPlateMeasurementsb+0x166>
        {

            Serial.print(millis());
 80a04ba:	f000 fcdf 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a04be:	4682      	mov	sl, r0
 80a04c0:	f000 f9b2 	bl	80a0828 <HAL_Timer_Get_Milli_Seconds>
 80a04c4:	220a      	movs	r2, #10
 80a04c6:	4601      	mov	r1, r0
 80a04c8:	4650      	mov	r0, sl
 80a04ca:	f000 fede 	bl	80a128a <_ZN5Print5printEmi>
            Serial.print(",");
 80a04ce:	f000 fcd5 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a04d2:	4944      	ldr	r1, [pc, #272]	; (80a05e4 <_Z26multiplexPlateMeasurementsb+0x230>)
 80a04d4:	f000 fe9d 	bl	80a1212 <_ZN5Print5printEPKc>
            Serial.print(raw);
 80a04d8:	f000 fcd0 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a04dc:	220a      	movs	r2, #10
 80a04de:	4641      	mov	r1, r8
 80a04e0:	f000 fee0 	bl	80a12a4 <_ZN5Print5printEji>
            Serial.print(",");
 80a04e4:	f000 fcca 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a04e8:	493e      	ldr	r1, [pc, #248]	; (80a05e4 <_Z26multiplexPlateMeasurementsb+0x230>)
 80a04ea:	f000 fe92 	bl	80a1212 <_ZN5Print5printEPKc>
            Serial.print(average);
 80a04ee:	f000 fcc5 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a04f2:	220a      	movs	r2, #10
 80a04f4:	4639      	mov	r1, r7
 80a04f6:	f000 fed5 	bl	80a12a4 <_ZN5Print5printEji>
            Serial.print(",");
 80a04fa:	f000 fcbf 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a04fe:	4939      	ldr	r1, [pc, #228]	; (80a05e4 <_Z26multiplexPlateMeasurementsb+0x230>)
 80a0500:	f000 fe87 	bl	80a1212 <_ZN5Print5printEPKc>
            Serial.print(deviation);
 80a0504:	f000 fcba 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0508:	4649      	mov	r1, r9
 80a050a:	220a      	movs	r2, #10
 80a050c:	f000 feca 	bl	80a12a4 <_ZN5Print5printEji>
            Serial.print("\n");
 80a0510:	f000 fcb4 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0514:	4934      	ldr	r1, [pc, #208]	; (80a05e8 <_Z26multiplexPlateMeasurementsb+0x234>)
 80a0516:	f000 fe7c 	bl	80a1212 <_ZN5Print5printEPKc>
    }

    delay(multiplexSwitchDelay);


    for (unsigned int index = 0; index < senderIntCaptureArraySize; index++)
 80a051a:	3601      	adds	r6, #1
 80a051c:	2e3c      	cmp	r6, #60	; 0x3c
 80a051e:	d1b5      	bne.n	80a048c <_Z26multiplexPlateMeasurementsb+0xd8>
            Serial.print(deviation);
            Serial.print("\n");
        }
    }

    setupMeasureReceiveInterference();
 80a0520:	f7ff fece 	bl	80a02c0 <_Z31setupMeasureReceiveInterferencev>

    if (writeToSerialMultiplex)
 80a0524:	b124      	cbz	r4, 80a0530 <_Z26multiplexPlateMeasurementsb+0x17c>
    {
        Serial.println("RIM");
 80a0526:	f000 fca9 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a052a:	4934      	ldr	r1, [pc, #208]	; (80a05fc <_Z26multiplexPlateMeasurementsb+0x248>)
 80a052c:	f000 fe84 	bl	80a1238 <_ZN5Print7printlnEPKc>
    }

    delay(multiplexSwitchDelay);
 80a0530:	6828      	ldr	r0, [r5, #0]
 80a0532:	f000 fe45 	bl	80a11c0 <delay>

    for (unsigned int index = 0; index < recIntCaptureArraySize; index++)
    {

        delay(recIntDelay);
 80a0536:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80a060c <_Z26multiplexPlateMeasurementsb+0x258>

        unsigned int raw = analogRead(recVoltage);
        recIntCaptureArray[index] = raw;
 80a053a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80a0604 <_Z26multiplexPlateMeasurementsb+0x250>
        Serial.println("RIM");
    }

    delay(multiplexSwitchDelay);

    for (unsigned int index = 0; index < recIntCaptureArraySize; index++)
 80a053e:	2500      	movs	r5, #0
    {

        delay(recIntDelay);
 80a0540:	f8d8 0000 	ldr.w	r0, [r8]
 80a0544:	f000 fe3c 	bl	80a11c0 <delay>

        unsigned int raw = analogRead(recVoltage);
 80a0548:	4b2d      	ldr	r3, [pc, #180]	; (80a0600 <_Z26multiplexPlateMeasurementsb+0x24c>)
 80a054a:	8818      	ldrh	r0, [r3, #0]
 80a054c:	f000 ffba 	bl	80a14c4 <analogRead>
        recIntCaptureArray[index] = raw;
        unsigned int average = movingAverage(recIntCaptureArray, recIntCaptureArraySize);
 80a0550:	213c      	movs	r1, #60	; 0x3c
    {

        delay(recIntDelay);

        unsigned int raw = analogRead(recVoltage);
        recIntCaptureArray[index] = raw;
 80a0552:	f849 0025 	str.w	r0, [r9, r5, lsl #2]
    for (unsigned int index = 0; index < recIntCaptureArraySize; index++)
    {

        delay(recIntDelay);

        unsigned int raw = analogRead(recVoltage);
 80a0556:	4607      	mov	r7, r0
        recIntCaptureArray[index] = raw;
        unsigned int average = movingAverage(recIntCaptureArray, recIntCaptureArraySize);
 80a0558:	482a      	ldr	r0, [pc, #168]	; (80a0604 <_Z26multiplexPlateMeasurementsb+0x250>)
 80a055a:	f7ff ff0f 	bl	80a037c <_Z13movingAveragePjj>
        unsigned int deviation = movingStandardDeviation(recIntCaptureArray, average, recIntCaptureArraySize);
 80a055e:	223c      	movs	r2, #60	; 0x3c
 80a0560:	4601      	mov	r1, r0

        delay(recIntDelay);

        unsigned int raw = analogRead(recVoltage);
        recIntCaptureArray[index] = raw;
        unsigned int average = movingAverage(recIntCaptureArray, recIntCaptureArraySize);
 80a0562:	4606      	mov	r6, r0
        unsigned int deviation = movingStandardDeviation(recIntCaptureArray, average, recIntCaptureArraySize);
 80a0564:	4827      	ldr	r0, [pc, #156]	; (80a0604 <_Z26multiplexPlateMeasurementsb+0x250>)
 80a0566:	f7ff ff16 	bl	80a0396 <_Z23movingStandardDeviationPjjj>
 80a056a:	4682      	mov	sl, r0



        if (writeToSerialMultiplex)
 80a056c:	b37c      	cbz	r4, 80a05ce <_Z26multiplexPlateMeasurementsb+0x21a>
        {

            Serial.print(millis());
 80a056e:	f000 fc85 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0572:	4683      	mov	fp, r0
 80a0574:	f000 f958 	bl	80a0828 <HAL_Timer_Get_Milli_Seconds>
 80a0578:	220a      	movs	r2, #10
 80a057a:	4601      	mov	r1, r0
 80a057c:	4658      	mov	r0, fp
 80a057e:	f000 fe84 	bl	80a128a <_ZN5Print5printEmi>
            Serial.print(",");
 80a0582:	f000 fc7b 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0586:	4917      	ldr	r1, [pc, #92]	; (80a05e4 <_Z26multiplexPlateMeasurementsb+0x230>)
 80a0588:	f000 fe43 	bl	80a1212 <_ZN5Print5printEPKc>
            Serial.print(raw);
 80a058c:	f000 fc76 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a0590:	220a      	movs	r2, #10
 80a0592:	4639      	mov	r1, r7
 80a0594:	f000 fe86 	bl	80a12a4 <_ZN5Print5printEji>
            Serial.print(",");
 80a0598:	f000 fc70 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a059c:	4911      	ldr	r1, [pc, #68]	; (80a05e4 <_Z26multiplexPlateMeasurementsb+0x230>)
 80a059e:	f000 fe38 	bl	80a1212 <_ZN5Print5printEPKc>
            Serial.print(average);
 80a05a2:	f000 fc6b 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a05a6:	220a      	movs	r2, #10
 80a05a8:	4631      	mov	r1, r6
 80a05aa:	f000 fe7b 	bl	80a12a4 <_ZN5Print5printEji>
            Serial.print(",");
 80a05ae:	f000 fc65 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a05b2:	490c      	ldr	r1, [pc, #48]	; (80a05e4 <_Z26multiplexPlateMeasurementsb+0x230>)
 80a05b4:	f000 fe2d 	bl	80a1212 <_ZN5Print5printEPKc>
            Serial.print(deviation);
 80a05b8:	f000 fc60 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a05bc:	4651      	mov	r1, sl
 80a05be:	220a      	movs	r2, #10
 80a05c0:	f000 fe70 	bl	80a12a4 <_ZN5Print5printEji>
            Serial.print("\n");
 80a05c4:	f000 fc5a 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a05c8:	4907      	ldr	r1, [pc, #28]	; (80a05e8 <_Z26multiplexPlateMeasurementsb+0x234>)
 80a05ca:	f000 fe22 	bl	80a1212 <_ZN5Print5printEPKc>
        Serial.println("RIM");
    }

    delay(multiplexSwitchDelay);

    for (unsigned int index = 0; index < recIntCaptureArraySize; index++)
 80a05ce:	3501      	adds	r5, #1
 80a05d0:	2d3c      	cmp	r5, #60	; 0x3c
 80a05d2:	d1b5      	bne.n	80a0540 <_Z26multiplexPlateMeasurementsb+0x18c>
            Serial.print(",");
            Serial.print(deviation);
            Serial.print("\n");
        }
    }
}
 80a05d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a05d8:	20000004 	.word	0x20000004
 80a05dc:	080a18cd 	.word	0x080a18cd
 80a05e0:	20000030 	.word	0x20000030
 80a05e4:	080a18cb 	.word	0x080a18cb
 80a05e8:	080a1b1a 	.word	0x080a1b1a
 80a05ec:	080a18d1 	.word	0x080a18d1
 80a05f0:	20000010 	.word	0x20000010
 80a05f4:	20000000 	.word	0x20000000
 80a05f8:	200001a0 	.word	0x200001a0
 80a05fc:	080a18d5 	.word	0x080a18d5
 80a0600:	20000008 	.word	0x20000008
 80a0604:	20000290 	.word	0x20000290
 80a0608:	200000b0 	.word	0x200000b0
 80a060c:	20000018 	.word	0x20000018

080a0610 <_Z20manuelExperimentModev>:

    //printCalculations(unsigned int pin, char mode, bool rawBool, bool averageBool, bool standardDeviationBool)
    //printCalculations(currentADCPin, true, true, true);
    //delay(100);

    multiplexPlateMeasurements(true);
 80a0610:	2001      	movs	r0, #1
 80a0612:	f7ff becf 	b.w	80a03b4 <_Z26multiplexPlateMeasurementsb>

080a0616 <loop>:
 80a0616:	f7ff bffb 	b.w	80a0610 <_Z20manuelExperimentModev>
	...

080a061c <_GLOBAL__sub_I_senderSignalPin>:
    else
    {

        return false;
    }
 80a061c:	b510      	push	{r4, lr}
//OSM: stripMeasure      : RGB: RED
//SIM: senderIntMeasure  : RGB: YELLOW
//RIM: recIntMeasure     : RGB: CYAN
//ADD: addStrip          : RGB: BLUE
//SUB: removeStrip       :
String menuSelection[menuSelectionSize] = {"stripMeasure", "senderIntMeasure", "recIntMeasurem", "addStrip", "removeStrip"};
 80a061e:	4c11      	ldr	r4, [pc, #68]	; (80a0664 <_GLOBAL__sub_I_senderSignalPin+0x48>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0620:	f000 f91a 	bl	80a0858 <HAL_Pin_Map>
 80a0624:	4910      	ldr	r1, [pc, #64]	; (80a0668 <_GLOBAL__sub_I_senderSignalPin+0x4c>)
 80a0626:	4620      	mov	r0, r4
 80a0628:	f000 fe85 	bl	80a1336 <_ZN6StringC1EPK19__FlashStringHelper>
 80a062c:	490f      	ldr	r1, [pc, #60]	; (80a066c <_GLOBAL__sub_I_senderSignalPin+0x50>)
 80a062e:	f104 0010 	add.w	r0, r4, #16
 80a0632:	f000 fe80 	bl	80a1336 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0636:	490e      	ldr	r1, [pc, #56]	; (80a0670 <_GLOBAL__sub_I_senderSignalPin+0x54>)
 80a0638:	f104 0020 	add.w	r0, r4, #32
 80a063c:	f000 fe7b 	bl	80a1336 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0640:	490c      	ldr	r1, [pc, #48]	; (80a0674 <_GLOBAL__sub_I_senderSignalPin+0x58>)
 80a0642:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80a0646:	f000 fe76 	bl	80a1336 <_ZN6StringC1EPK19__FlashStringHelper>
 80a064a:	490b      	ldr	r1, [pc, #44]	; (80a0678 <_GLOBAL__sub_I_senderSignalPin+0x5c>)
 80a064c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a0650:	f000 fe71 	bl	80a1336 <_ZN6StringC1EPK19__FlashStringHelper>
    else
    {

        return false;
    }
 80a0654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//OSM: stripMeasure      : RGB: RED
//SIM: senderIntMeasure  : RGB: YELLOW
//RIM: recIntMeasure     : RGB: CYAN
//ADD: addStrip          : RGB: BLUE
//SUB: removeStrip       :
String menuSelection[menuSelectionSize] = {"stripMeasure", "senderIntMeasure", "recIntMeasurem", "addStrip", "removeStrip"};
 80a0658:	4a08      	ldr	r2, [pc, #32]	; (80a067c <_GLOBAL__sub_I_senderSignalPin+0x60>)
 80a065a:	4909      	ldr	r1, [pc, #36]	; (80a0680 <_GLOBAL__sub_I_senderSignalPin+0x64>)
 80a065c:	2000      	movs	r0, #0
 80a065e:	f000 bf64 	b.w	80a152a <__aeabi_atexit>
 80a0662:	bf00      	nop
 80a0664:	20000380 	.word	0x20000380
 80a0668:	080a18d9 	.word	0x080a18d9
 80a066c:	080a18e6 	.word	0x080a18e6
 80a0670:	080a1922 	.word	0x080a1922
 80a0674:	080a1905 	.word	0x080a1905
 80a0678:	080a1912 	.word	0x080a1912
 80a067c:	200000a4 	.word	0x200000a4
 80a0680:	080a00b1 	.word	0x080a00b1

080a0684 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <inet_gethostbyname+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601c0 	.word	0x080601c0

080a0694 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <HAL_USB_USART_Init+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	681b      	ldr	r3, [r3, #0]
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	080601d8 	.word	0x080601d8

080a06a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <HAL_USB_USART_Begin+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	685b      	ldr	r3, [r3, #4]
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601d8 	.word	0x080601d8

080a06b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <HAL_USB_USART_Available_Data+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	691b      	ldr	r3, [r3, #16]
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601d8 	.word	0x080601d8

080a06c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	695b      	ldr	r3, [r3, #20]
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	080601d8 	.word	0x080601d8

080a06d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <HAL_USB_USART_Receive_Data+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	699b      	ldr	r3, [r3, #24]
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	080601d8 	.word	0x080601d8

080a06e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <HAL_USB_USART_Send_Data+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	69db      	ldr	r3, [r3, #28]
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	080601d8 	.word	0x080601d8

080a06f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <HAL_USB_USART_Flush_Data+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	6a1b      	ldr	r3, [r3, #32]
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	080601d8 	.word	0x080601d8

080a0704 <HAL_Tone_Stop>:
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <HAL_Tone_Stop+0xc>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	685b      	ldr	r3, [r3, #4]
 80a070c:	9301      	str	r3, [sp, #4]
 80a070e:	bd08      	pop	{r3, pc}
 80a0710:	080601a8 	.word	0x080601a8

080a0714 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0714:	b508      	push	{r3, lr}
 80a0716:	4b02      	ldr	r3, [pc, #8]	; (80a0720 <HAL_I2C_Write_Data+0xc>)
 80a0718:	681b      	ldr	r3, [r3, #0]
 80a071a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a071c:	9301      	str	r3, [sp, #4]
 80a071e:	bd08      	pop	{r3, pc}
 80a0720:	080601ac 	.word	0x080601ac

080a0724 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0724:	b508      	push	{r3, lr}
 80a0726:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <HAL_I2C_Available_Data+0xc>)
 80a0728:	681b      	ldr	r3, [r3, #0]
 80a072a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a072c:	9301      	str	r3, [sp, #4]
 80a072e:	bd08      	pop	{r3, pc}
 80a0730:	080601ac 	.word	0x080601ac

080a0734 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <HAL_I2C_Read_Data+0xc>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a073c:	9301      	str	r3, [sp, #4]
 80a073e:	bd08      	pop	{r3, pc}
 80a0740:	080601ac 	.word	0x080601ac

080a0744 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0744:	b508      	push	{r3, lr}
 80a0746:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <HAL_I2C_Peek_Data+0xc>)
 80a0748:	681b      	ldr	r3, [r3, #0]
 80a074a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a074c:	9301      	str	r3, [sp, #4]
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	080601ac 	.word	0x080601ac

080a0754 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0754:	b508      	push	{r3, lr}
 80a0756:	4b02      	ldr	r3, [pc, #8]	; (80a0760 <HAL_I2C_Flush_Data+0xc>)
 80a0758:	681b      	ldr	r3, [r3, #0]
 80a075a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a075c:	9301      	str	r3, [sp, #4]
 80a075e:	bd08      	pop	{r3, pc}
 80a0760:	080601ac 	.word	0x080601ac

080a0764 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0764:	b508      	push	{r3, lr}
 80a0766:	4b02      	ldr	r3, [pc, #8]	; (80a0770 <HAL_I2C_Is_Enabled+0xc>)
 80a0768:	681b      	ldr	r3, [r3, #0]
 80a076a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a076c:	9301      	str	r3, [sp, #4]
 80a076e:	bd08      	pop	{r3, pc}
 80a0770:	080601ac 	.word	0x080601ac

080a0774 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0774:	b508      	push	{r3, lr}
 80a0776:	4b03      	ldr	r3, [pc, #12]	; (80a0784 <HAL_I2C_Init+0x10>)
 80a0778:	681b      	ldr	r3, [r3, #0]
 80a077a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a077e:	9301      	str	r3, [sp, #4]
 80a0780:	bd08      	pop	{r3, pc}
 80a0782:	0000      	.short	0x0000
 80a0784:	080601ac 	.word	0x080601ac

080a0788 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0788:	b508      	push	{r3, lr}
 80a078a:	4b02      	ldr	r3, [pc, #8]	; (80a0794 <HAL_USART_Init+0xc>)
 80a078c:	681b      	ldr	r3, [r3, #0]
 80a078e:	699b      	ldr	r3, [r3, #24]
 80a0790:	9301      	str	r3, [sp, #4]
 80a0792:	bd08      	pop	{r3, pc}
 80a0794:	080601c4 	.word	0x080601c4

080a0798 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0798:	b508      	push	{r3, lr}
 80a079a:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <HAL_USART_Write_Data+0xc>)
 80a079c:	681b      	ldr	r3, [r3, #0]
 80a079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07a0:	9301      	str	r3, [sp, #4]
 80a07a2:	bd08      	pop	{r3, pc}
 80a07a4:	080601c4 	.word	0x080601c4

080a07a8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <HAL_USART_Available_Data+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601c4 	.word	0x080601c4

080a07b8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <HAL_USART_Read_Data+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601c4 	.word	0x080601c4

080a07c8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <HAL_USART_Peek_Data+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601c4 	.word	0x080601c4

080a07d8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <HAL_USART_Flush_Data+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	080601c4 	.word	0x080601c4

080a07e8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <HAL_USART_Is_Enabled+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	080601c4 	.word	0x080601c4

080a07f8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <HAL_USART_Available_Data_For_Write+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601c4 	.word	0x080601c4

080a0808 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <os_mutex_create+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601d0 	.word	0x080601d0

080a0818 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <HAL_RNG_GetRandomNumber+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	685b      	ldr	r3, [r3, #4]
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	0806019c 	.word	0x0806019c

080a0828 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	695b      	ldr	r3, [r3, #20]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	0806019c 	.word	0x0806019c

080a0838 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <HAL_SPI_Init+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	69db      	ldr	r3, [r3, #28]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601b4 	.word	0x080601b4

080a0848 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <HAL_SPI_Is_Enabled+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	6a1b      	ldr	r3, [r3, #32]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601b4 	.word	0x080601b4

080a0858 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <HAL_Pin_Map+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	681b      	ldr	r3, [r3, #0]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601b0 	.word	0x080601b0

080a0868 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <HAL_Validate_Pin_Function+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	685b      	ldr	r3, [r3, #4]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601b0 	.word	0x080601b0

080a0878 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <HAL_Pin_Mode+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	689b      	ldr	r3, [r3, #8]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601b0 	.word	0x080601b0

080a0888 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <HAL_Get_Pin_Mode+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	68db      	ldr	r3, [r3, #12]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601b0 	.word	0x080601b0

080a0898 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <HAL_GPIO_Write+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	691b      	ldr	r3, [r3, #16]
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601b0 	.word	0x080601b0

080a08a8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <HAL_ADC_Read+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601b0 	.word	0x080601b0

080a08b8 <HAL_PWM_Write_With_Frequency_Ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, HAL_PWM_Write_With_Frequency_Ext, void(uint16_t, uint32_t, uint32_t))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <HAL_PWM_Write_With_Frequency_Ext+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601b0 	.word	0x080601b0

080a08c8 <LED_Signaling_Start>:

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <LED_Signaling_Start+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	689b      	ldr	r3, [r3, #8]
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080201a8 	.word	0x080201a8

080a08d8 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <LED_Signaling_Stop+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	68db      	ldr	r3, [r3, #12]
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080201a8 	.word	0x080201a8

080a08e8 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <LED_RGB_IsOverRidden+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	699b      	ldr	r3, [r3, #24]
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080201a8 	.word	0x080201a8

080a08f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601cc 	.word	0x080601cc

080a0908 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <network_connect+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	685b      	ldr	r3, [r3, #4]
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601c8 	.word	0x080601c8

080a0918 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <network_connecting+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	689b      	ldr	r3, [r3, #8]
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601c8 	.word	0x080601c8

080a0928 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <network_disconnect+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	68db      	ldr	r3, [r3, #12]
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601c8 	.word	0x080601c8

080a0938 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <network_ready+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	691b      	ldr	r3, [r3, #16]
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080601c8 	.word	0x080601c8

080a0948 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b02      	ldr	r3, [pc, #8]	; (80a0954 <network_on+0xc>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	695b      	ldr	r3, [r3, #20]
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	bd08      	pop	{r3, pc}
 80a0954:	080601c8 	.word	0x080601c8

080a0958 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <network_off+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	699b      	ldr	r3, [r3, #24]
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601c8 	.word	0x080601c8

080a0968 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <network_listen+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	69db      	ldr	r3, [r3, #28]
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601c8 	.word	0x080601c8

080a0978 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <network_listening+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	6a1b      	ldr	r3, [r3, #32]
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601c8 	.word	0x080601c8

080a0988 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b02      	ldr	r3, [pc, #8]	; (80a0994 <network_set_listen_timeout+0xc>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0990:	9301      	str	r3, [sp, #4]
 80a0992:	bd08      	pop	{r3, pc}
 80a0994:	080601c8 	.word	0x080601c8

080a0998 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0998:	b508      	push	{r3, lr}
 80a099a:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <network_get_listen_timeout+0xc>)
 80a099c:	681b      	ldr	r3, [r3, #0]
 80a099e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09a0:	9301      	str	r3, [sp, #4]
 80a09a2:	bd08      	pop	{r3, pc}
 80a09a4:	080601c8 	.word	0x080601c8

080a09a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <set_system_mode+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	685b      	ldr	r3, [r3, #4]
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	080601a4 	.word	0x080601a4

080a09b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <system_delay_ms+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	695b      	ldr	r3, [r3, #20]
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	080601a4 	.word	0x080601a4

080a09c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b03      	ldr	r3, [pc, #12]	; (80a09d8 <system_ctrl_set_app_request_handler+0x10>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a09d2:	9301      	str	r3, [sp, #4]
 80a09d4:	bd08      	pop	{r3, pc}
 80a09d6:	0000      	.short	0x0000
 80a09d8:	080601a4 	.word	0x080601a4

080a09dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a09dc:	b508      	push	{r3, lr}
 80a09de:	4b03      	ldr	r3, [pc, #12]	; (80a09ec <system_ctrl_set_result+0x10>)
 80a09e0:	681b      	ldr	r3, [r3, #0]
 80a09e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a09e6:	9301      	str	r3, [sp, #4]
 80a09e8:	bd08      	pop	{r3, pc}
 80a09ea:	0000      	.short	0x0000
 80a09ec:	080601a4 	.word	0x080601a4

080a09f0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <malloc+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	681b      	ldr	r3, [r3, #0]
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601a0 	.word	0x080601a0

080a0a00 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <free+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	685b      	ldr	r3, [r3, #4]
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601a0 	.word	0x080601a0

080a0a10 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <realloc+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	689b      	ldr	r3, [r3, #8]
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601a0 	.word	0x080601a0

080a0a20 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0a20:	2300      	movs	r3, #0
 80a0a22:	461a      	mov	r2, r3
 80a0a24:	6840      	ldr	r0, [r0, #4]
 80a0a26:	f7ff bf6f 	b.w	80a0908 <network_connect>

080a0a2a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0a2a:	2200      	movs	r2, #0
 80a0a2c:	2102      	movs	r1, #2
 80a0a2e:	6840      	ldr	r0, [r0, #4]
 80a0a30:	f7ff bf7a 	b.w	80a0928 <network_disconnect>

080a0a34 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0a34:	2200      	movs	r2, #0
 80a0a36:	4611      	mov	r1, r2
 80a0a38:	6840      	ldr	r0, [r0, #4]
 80a0a3a:	f7ff bf6d 	b.w	80a0918 <network_connecting>

080a0a3e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0a3e:	2200      	movs	r2, #0
 80a0a40:	4611      	mov	r1, r2
 80a0a42:	6840      	ldr	r0, [r0, #4]
 80a0a44:	f7ff bf78 	b.w	80a0938 <network_ready>

080a0a48 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0a48:	2300      	movs	r3, #0
 80a0a4a:	461a      	mov	r2, r3
 80a0a4c:	4619      	mov	r1, r3
 80a0a4e:	6840      	ldr	r0, [r0, #4]
 80a0a50:	f7ff bf7a 	b.w	80a0948 <network_on>

080a0a54 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0a54:	2300      	movs	r3, #0
 80a0a56:	461a      	mov	r2, r3
 80a0a58:	4619      	mov	r1, r3
 80a0a5a:	6840      	ldr	r0, [r0, #4]
 80a0a5c:	f7ff bf7c 	b.w	80a0958 <network_off>

080a0a60 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0a60:	2200      	movs	r2, #0
 80a0a62:	f081 0101 	eor.w	r1, r1, #1
 80a0a66:	6840      	ldr	r0, [r0, #4]
 80a0a68:	f7ff bf7e 	b.w	80a0968 <network_listen>

080a0a6c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0a6c:	2200      	movs	r2, #0
 80a0a6e:	6840      	ldr	r0, [r0, #4]
 80a0a70:	f7ff bf8a 	b.w	80a0988 <network_set_listen_timeout>

080a0a74 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0a74:	2200      	movs	r2, #0
 80a0a76:	4611      	mov	r1, r2
 80a0a78:	6840      	ldr	r0, [r0, #4]
 80a0a7a:	f7ff bf8d 	b.w	80a0998 <network_get_listen_timeout>

080a0a7e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0a7e:	2200      	movs	r2, #0
 80a0a80:	4611      	mov	r1, r2
 80a0a82:	6840      	ldr	r0, [r0, #4]
 80a0a84:	f7ff bf78 	b.w	80a0978 <network_listening>

080a0a88 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0a88:	b570      	push	{r4, r5, r6, lr}
 80a0a8a:	4616      	mov	r6, r2
 80a0a8c:	b08e      	sub	sp, #56	; 0x38
 80a0a8e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0a90:	a808      	add	r0, sp, #32
 80a0a92:	f000 fa77 	bl	80a0f84 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0a96:	2211      	movs	r2, #17
 80a0a98:	2100      	movs	r1, #0
 80a0a9a:	a803      	add	r0, sp, #12
 80a0a9c:	f000 fead 	bl	80a17fa <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0aa0:	4630      	mov	r0, r6
 80a0aa2:	f000 fedb 	bl	80a185c <strlen>
 80a0aa6:	2500      	movs	r5, #0
 80a0aa8:	4b0a      	ldr	r3, [pc, #40]	; (80a0ad4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0aaa:	9500      	str	r5, [sp, #0]
 80a0aac:	b281      	uxth	r1, r0
 80a0aae:	685b      	ldr	r3, [r3, #4]
 80a0ab0:	aa03      	add	r2, sp, #12
 80a0ab2:	4630      	mov	r0, r6
 80a0ab4:	f7ff fde6 	bl	80a0684 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ab8:	b120      	cbz	r0, 80a0ac4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0aba:	4629      	mov	r1, r5
 80a0abc:	4620      	mov	r0, r4
 80a0abe:	f000 fa81 	bl	80a0fc4 <_ZN9IPAddressC1Em>
 80a0ac2:	e003      	b.n	80a0acc <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0ac4:	a903      	add	r1, sp, #12
 80a0ac6:	4620      	mov	r0, r4
 80a0ac8:	f000 fa6a 	bl	80a0fa0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0acc:	4620      	mov	r0, r4
 80a0ace:	b00e      	add	sp, #56	; 0x38
 80a0ad0:	bd70      	pop	{r4, r5, r6, pc}
 80a0ad2:	bf00      	nop
 80a0ad4:	200003d8 	.word	0x200003d8

080a0ad8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0ad8:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0ada:	4a03      	ldr	r2, [pc, #12]	; (80a0ae8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0adc:	601a      	str	r2, [r3, #0]
 80a0ade:	2200      	movs	r2, #0
 80a0ae0:	605a      	str	r2, [r3, #4]
 80a0ae2:	4770      	bx	lr
 80a0ae4:	200003d0 	.word	0x200003d0
 80a0ae8:	080a193c 	.word	0x080a193c

080a0aec <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0aec:	4770      	bx	lr

080a0aee <_ZN8SPIClassD0Ev>:
 80a0aee:	b510      	push	{r4, lr}
 80a0af0:	4604      	mov	r4, r0
 80a0af2:	2110      	movs	r1, #16
 80a0af4:	f000 fd1e 	bl	80a1534 <_ZdlPvj>
 80a0af8:	4620      	mov	r0, r4
 80a0afa:	bd10      	pop	{r4, pc}

080a0afc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0afc:	b570      	push	{r4, r5, r6, lr}
 80a0afe:	4604      	mov	r4, r0
 80a0b00:	460e      	mov	r6, r1
 80a0b02:	4b07      	ldr	r3, [pc, #28]	; (80a0b20 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0b04:	2500      	movs	r5, #0
 80a0b06:	6003      	str	r3, [r0, #0]
 80a0b08:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0b0c:	f7ff fe7c 	bl	80a0808 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0b10:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0b12:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0b14:	f7ff fe90 	bl	80a0838 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0b18:	60a5      	str	r5, [r4, #8]
}
 80a0b1a:	4620      	mov	r0, r4
 80a0b1c:	bd70      	pop	{r4, r5, r6, pc}
 80a0b1e:	bf00      	nop
 80a0b20:	080a1970 	.word	0x080a1970

080a0b24 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0b24:	7900      	ldrb	r0, [r0, #4]
 80a0b26:	f7ff be8f 	b.w	80a0848 <HAL_SPI_Is_Enabled>

080a0b2a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0b2a:	2200      	movs	r2, #0
 80a0b2c:	4611      	mov	r1, r2
 80a0b2e:	6840      	ldr	r0, [r0, #4]
 80a0b30:	f7ff bf02 	b.w	80a0938 <network_ready>

080a0b34 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0b36:	4616      	mov	r6, r2
 80a0b38:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0b3a:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0b3c:	460f      	mov	r7, r1
 80a0b3e:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0b40:	2100      	movs	r1, #0
 80a0b42:	a803      	add	r0, sp, #12
 80a0b44:	f000 fe59 	bl	80a17fa <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0b48:	4630      	mov	r0, r6
 80a0b4a:	f000 fe87 	bl	80a185c <strlen>
 80a0b4e:	2500      	movs	r5, #0
 80a0b50:	9500      	str	r5, [sp, #0]
 80a0b52:	b281      	uxth	r1, r0
 80a0b54:	687b      	ldr	r3, [r7, #4]
 80a0b56:	aa03      	add	r2, sp, #12
 80a0b58:	4630      	mov	r0, r6
 80a0b5a:	f7ff fd93 	bl	80a0684 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0b5e:	b120      	cbz	r0, 80a0b6a <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0b60:	4629      	mov	r1, r5
 80a0b62:	4620      	mov	r0, r4
 80a0b64:	f000 fa2e 	bl	80a0fc4 <_ZN9IPAddressC1Em>
 80a0b68:	e003      	b.n	80a0b72 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0b6a:	a903      	add	r1, sp, #12
 80a0b6c:	4620      	mov	r0, r4
 80a0b6e:	f000 fa17 	bl	80a0fa0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0b72:	4620      	mov	r0, r4
 80a0b74:	b009      	add	sp, #36	; 0x24
 80a0b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0b78 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0b78:	2200      	movs	r2, #0
 80a0b7a:	4611      	mov	r1, r2
 80a0b7c:	6840      	ldr	r0, [r0, #4]
 80a0b7e:	f7ff befb 	b.w	80a0978 <network_listening>

080a0b82 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0b82:	2200      	movs	r2, #0
 80a0b84:	4611      	mov	r1, r2
 80a0b86:	6840      	ldr	r0, [r0, #4]
 80a0b88:	f7ff bf06 	b.w	80a0998 <network_get_listen_timeout>

080a0b8c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0b8c:	2200      	movs	r2, #0
 80a0b8e:	6840      	ldr	r0, [r0, #4]
 80a0b90:	f7ff befa 	b.w	80a0988 <network_set_listen_timeout>

080a0b94 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0b94:	2200      	movs	r2, #0
 80a0b96:	f081 0101 	eor.w	r1, r1, #1
 80a0b9a:	6840      	ldr	r0, [r0, #4]
 80a0b9c:	f7ff bee4 	b.w	80a0968 <network_listen>

080a0ba0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0ba0:	2300      	movs	r3, #0
 80a0ba2:	461a      	mov	r2, r3
 80a0ba4:	4619      	mov	r1, r3
 80a0ba6:	6840      	ldr	r0, [r0, #4]
 80a0ba8:	f7ff bed6 	b.w	80a0958 <network_off>

080a0bac <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0bac:	2300      	movs	r3, #0
 80a0bae:	461a      	mov	r2, r3
 80a0bb0:	4619      	mov	r1, r3
 80a0bb2:	6840      	ldr	r0, [r0, #4]
 80a0bb4:	f7ff bec8 	b.w	80a0948 <network_on>

080a0bb8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0bb8:	2200      	movs	r2, #0
 80a0bba:	4611      	mov	r1, r2
 80a0bbc:	6840      	ldr	r0, [r0, #4]
 80a0bbe:	f7ff beab 	b.w	80a0918 <network_connecting>

080a0bc2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0bc2:	2200      	movs	r2, #0
 80a0bc4:	2102      	movs	r1, #2
 80a0bc6:	6840      	ldr	r0, [r0, #4]
 80a0bc8:	f7ff beae 	b.w	80a0928 <network_disconnect>

080a0bcc <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0bcc:	2300      	movs	r3, #0
 80a0bce:	461a      	mov	r2, r3
 80a0bd0:	6840      	ldr	r0, [r0, #4]
 80a0bd2:	f7ff be99 	b.w	80a0908 <network_connect>
	...

080a0bd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0bd8:	4b02      	ldr	r3, [pc, #8]	; (80a0be4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0bda:	2204      	movs	r2, #4
 80a0bdc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0bde:	4a02      	ldr	r2, [pc, #8]	; (80a0be8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0be0:	601a      	str	r2, [r3, #0]
 80a0be2:	4770      	bx	lr
 80a0be4:	200003d8 	.word	0x200003d8
 80a0be8:	080a1980 	.word	0x080a1980

080a0bec <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0bec:	4770      	bx	lr

080a0bee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0bf0:	4606      	mov	r6, r0
 80a0bf2:	4615      	mov	r5, r2
 80a0bf4:	460c      	mov	r4, r1
 80a0bf6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0bf8:	42bc      	cmp	r4, r7
 80a0bfa:	d006      	beq.n	80a0c0a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0bfc:	6833      	ldr	r3, [r6, #0]
 80a0bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0c02:	689b      	ldr	r3, [r3, #8]
 80a0c04:	4630      	mov	r0, r6
 80a0c06:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0c08:	e7f6      	b.n	80a0bf8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0c0a:	4628      	mov	r0, r5
 80a0c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c0e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0c0e:	2200      	movs	r2, #0
 80a0c10:	7c00      	ldrb	r0, [r0, #16]
 80a0c12:	f7ff bd7f 	b.w	80a0714 <HAL_I2C_Write_Data>

080a0c16 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0c16:	2100      	movs	r1, #0
 80a0c18:	7c00      	ldrb	r0, [r0, #16]
 80a0c1a:	f7ff bd83 	b.w	80a0724 <HAL_I2C_Available_Data>

080a0c1e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0c1e:	2100      	movs	r1, #0
 80a0c20:	7c00      	ldrb	r0, [r0, #16]
 80a0c22:	f7ff bd87 	b.w	80a0734 <HAL_I2C_Read_Data>

080a0c26 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0c26:	2100      	movs	r1, #0
 80a0c28:	7c00      	ldrb	r0, [r0, #16]
 80a0c2a:	f7ff bd8b 	b.w	80a0744 <HAL_I2C_Peek_Data>

080a0c2e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0c2e:	2100      	movs	r1, #0
 80a0c30:	7c00      	ldrb	r0, [r0, #16]
 80a0c32:	f7ff bd8f 	b.w	80a0754 <HAL_I2C_Flush_Data>

080a0c36 <_ZN7TwoWireD0Ev>:
 80a0c36:	b510      	push	{r4, lr}
 80a0c38:	4604      	mov	r4, r0
 80a0c3a:	2114      	movs	r1, #20
 80a0c3c:	f000 fc7a 	bl	80a1534 <_ZdlPvj>
 80a0c40:	4620      	mov	r0, r4
 80a0c42:	bd10      	pop	{r4, pc}

080a0c44 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0c44:	b510      	push	{r4, lr}
 80a0c46:	4604      	mov	r4, r0
 80a0c48:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c4e:	60a3      	str	r3, [r4, #8]
 80a0c50:	4b04      	ldr	r3, [pc, #16]	; (80a0c64 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0c52:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0c54:	7420      	strb	r0, [r4, #16]
 80a0c56:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0c58:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0c5a:	f7ff fd8b 	bl	80a0774 <HAL_I2C_Init>

}
 80a0c5e:	4620      	mov	r0, r4
 80a0c60:	bd10      	pop	{r4, pc}
 80a0c62:	bf00      	nop
 80a0c64:	080a19b4 	.word	0x080a19b4

080a0c68 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0c68:	2100      	movs	r1, #0
 80a0c6a:	7c00      	ldrb	r0, [r0, #16]
 80a0c6c:	f7ff bd7a 	b.w	80a0764 <HAL_I2C_Is_Enabled>

080a0c70 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0c70:	4770      	bx	lr

080a0c72 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0c72:	7441      	strb	r1, [r0, #17]
 80a0c74:	4770      	bx	lr

080a0c76 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0c76:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0c78:	7c00      	ldrb	r0, [r0, #16]
 80a0c7a:	f7ff fdbd 	bl	80a07f8 <HAL_USART_Available_Data_For_Write>
}
 80a0c7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c82:	bd08      	pop	{r3, pc}

080a0c84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0c84:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0c86:	7c00      	ldrb	r0, [r0, #16]
 80a0c88:	f7ff fd8e 	bl	80a07a8 <HAL_USART_Available_Data>
}
 80a0c8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c90:	bd08      	pop	{r3, pc}

080a0c92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0c92:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0c94:	7c00      	ldrb	r0, [r0, #16]
 80a0c96:	f7ff fd97 	bl	80a07c8 <HAL_USART_Peek_Data>
}
 80a0c9a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0c9e:	bf28      	it	cs
 80a0ca0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0ca4:	bd08      	pop	{r3, pc}

080a0ca6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0ca6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0ca8:	7c00      	ldrb	r0, [r0, #16]
 80a0caa:	f7ff fd85 	bl	80a07b8 <HAL_USART_Read_Data>
}
 80a0cae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0cb2:	bf28      	it	cs
 80a0cb4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0cb8:	bd08      	pop	{r3, pc}

080a0cba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0cba:	7c00      	ldrb	r0, [r0, #16]
 80a0cbc:	f7ff bd8c 	b.w	80a07d8 <HAL_USART_Flush_Data>

080a0cc0 <_ZN11USARTSerialD0Ev>:
 80a0cc0:	b510      	push	{r4, lr}
 80a0cc2:	4604      	mov	r4, r0
 80a0cc4:	2114      	movs	r1, #20
 80a0cc6:	f000 fc35 	bl	80a1534 <_ZdlPvj>
 80a0cca:	4620      	mov	r0, r4
 80a0ccc:	bd10      	pop	{r4, pc}

080a0cce <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0cce:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0cd0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0cd2:	4604      	mov	r4, r0
 80a0cd4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0cd6:	b925      	cbnz	r5, 80a0ce2 <_ZN11USARTSerial5writeEh+0x14>
 80a0cd8:	7c00      	ldrb	r0, [r0, #16]
 80a0cda:	f7ff fd8d 	bl	80a07f8 <HAL_USART_Available_Data_For_Write>
 80a0cde:	2800      	cmp	r0, #0
 80a0ce0:	dd05      	ble.n	80a0cee <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0ce2:	4631      	mov	r1, r6
 80a0ce4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0cea:	f7ff bd55 	b.w	80a0798 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0cee:	4628      	mov	r0, r5
 80a0cf0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0cf4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0cf4:	b510      	push	{r4, lr}
 80a0cf6:	4604      	mov	r4, r0
 80a0cf8:	4608      	mov	r0, r1
 80a0cfa:	4611      	mov	r1, r2
 80a0cfc:	2200      	movs	r2, #0
 80a0cfe:	6062      	str	r2, [r4, #4]
 80a0d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0d04:	60a2      	str	r2, [r4, #8]
 80a0d06:	4a05      	ldr	r2, [pc, #20]	; (80a0d1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0d08:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0d0a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0d0c:	2201      	movs	r2, #1
 80a0d0e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0d10:	461a      	mov	r2, r3
 80a0d12:	f7ff fd39 	bl	80a0788 <HAL_USART_Init>
}
 80a0d16:	4620      	mov	r0, r4
 80a0d18:	bd10      	pop	{r4, pc}
 80a0d1a:	bf00      	nop
 80a0d1c:	080a19dc 	.word	0x080a19dc

080a0d20 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0d20:	7c00      	ldrb	r0, [r0, #16]
 80a0d22:	f7ff bd61 	b.w	80a07e8 <HAL_USART_Is_Enabled>
	...

080a0d28 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0d28:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0d2a:	4d0c      	ldr	r5, [pc, #48]	; (80a0d5c <_Z22__fetch_global_Serial1v+0x34>)
 80a0d2c:	6829      	ldr	r1, [r5, #0]
 80a0d2e:	f011 0401 	ands.w	r4, r1, #1
 80a0d32:	d111      	bne.n	80a0d58 <_Z22__fetch_global_Serial1v+0x30>
 80a0d34:	4628      	mov	r0, r5
 80a0d36:	f7ff f9b2 	bl	80a009e <__cxa_guard_acquire>
 80a0d3a:	b168      	cbz	r0, 80a0d58 <_Z22__fetch_global_Serial1v+0x30>
 80a0d3c:	4a08      	ldr	r2, [pc, #32]	; (80a0d60 <_Z22__fetch_global_Serial1v+0x38>)
 80a0d3e:	4621      	mov	r1, r4
 80a0d40:	4b08      	ldr	r3, [pc, #32]	; (80a0d64 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0d42:	4809      	ldr	r0, [pc, #36]	; (80a0d68 <_Z22__fetch_global_Serial1v+0x40>)
 80a0d44:	f7ff ffd6 	bl	80a0cf4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0d48:	4628      	mov	r0, r5
 80a0d4a:	f7ff f9ad 	bl	80a00a8 <__cxa_guard_release>
 80a0d4e:	4a07      	ldr	r2, [pc, #28]	; (80a0d6c <_Z22__fetch_global_Serial1v+0x44>)
 80a0d50:	4907      	ldr	r1, [pc, #28]	; (80a0d70 <_Z22__fetch_global_Serial1v+0x48>)
 80a0d52:	4805      	ldr	r0, [pc, #20]	; (80a0d68 <_Z22__fetch_global_Serial1v+0x40>)
 80a0d54:	f000 fbe9 	bl	80a152a <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0d58:	4803      	ldr	r0, [pc, #12]	; (80a0d68 <_Z22__fetch_global_Serial1v+0x40>)
 80a0d5a:	bd38      	pop	{r3, r4, r5, pc}
 80a0d5c:	20000478 	.word	0x20000478
 80a0d60:	2000047c 	.word	0x2000047c
 80a0d64:	200003f4 	.word	0x200003f4
 80a0d68:	200003e0 	.word	0x200003e0
 80a0d6c:	200000a4 	.word	0x200000a4
 80a0d70:	080a0c71 	.word	0x080a0c71

080a0d74 <noTone>:
        HAL_Tone_Start(pin, frequency, duration);
    }
}

void noTone(uint8_t pin)
{
 80a0d74:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a0d76:	b285      	uxth	r5, r0
        HAL_Tone_Start(pin, frequency, duration);
    }
}

void noTone(uint8_t pin)
{
 80a0d78:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a0d7a:	4628      	mov	r0, r5
 80a0d7c:	f000 fb54 	bl	80a1428 <pinAvailable>
 80a0d80:	b150      	cbz	r0, 80a0d98 <noTone+0x24>
 80a0d82:	2102      	movs	r1, #2
 80a0d84:	4628      	mov	r0, r5
 80a0d86:	f7ff fd6f 	bl	80a0868 <HAL_Validate_Pin_Function>
 80a0d8a:	2802      	cmp	r0, #2
 80a0d8c:	d104      	bne.n	80a0d98 <noTone+0x24>
        HAL_Tone_Stop(pin);
 80a0d8e:	4620      	mov	r0, r4
    }
}
 80a0d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void noTone(uint8_t pin)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Stop(pin);
 80a0d94:	f7ff bcb6 	b.w	80a0704 <HAL_Tone_Stop>
 80a0d98:	bd38      	pop	{r3, r4, r5, pc}

080a0d9a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0d9a:	7441      	strb	r1, [r0, #17]
 80a0d9c:	4770      	bx	lr

080a0d9e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0d9e:	4770      	bx	lr

080a0da0 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0da0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0da2:	2100      	movs	r1, #0
 80a0da4:	7c00      	ldrb	r0, [r0, #16]
 80a0da6:	f7ff fc95 	bl	80a06d4 <HAL_USB_USART_Receive_Data>
}
 80a0daa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0dae:	bf28      	it	cs
 80a0db0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0db4:	bd08      	pop	{r3, pc}

080a0db6 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0db6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0db8:	2101      	movs	r1, #1
 80a0dba:	7c00      	ldrb	r0, [r0, #16]
 80a0dbc:	f7ff fc8a 	bl	80a06d4 <HAL_USB_USART_Receive_Data>
}
 80a0dc0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0dc4:	bf28      	it	cs
 80a0dc6:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0dca:	bd08      	pop	{r3, pc}

080a0dcc <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0dcc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0dce:	7c00      	ldrb	r0, [r0, #16]
 80a0dd0:	f7ff fc78 	bl	80a06c4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0dd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0dd8:	bd08      	pop	{r3, pc}

080a0dda <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0dda:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0ddc:	7c00      	ldrb	r0, [r0, #16]
 80a0dde:	f7ff fc69 	bl	80a06b4 <HAL_USB_USART_Available_Data>
}
 80a0de2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0de6:	bd08      	pop	{r3, pc}

080a0de8 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0de8:	7c00      	ldrb	r0, [r0, #16]
 80a0dea:	f7ff bc83 	b.w	80a06f4 <HAL_USB_USART_Flush_Data>

080a0dee <_ZN9USBSerialD0Ev>:
 80a0dee:	b510      	push	{r4, lr}
 80a0df0:	4604      	mov	r4, r0
 80a0df2:	2114      	movs	r1, #20
 80a0df4:	f000 fb9e 	bl	80a1534 <_ZdlPvj>
 80a0df8:	4620      	mov	r0, r4
 80a0dfa:	bd10      	pop	{r4, pc}

080a0dfc <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0dfc:	b538      	push	{r3, r4, r5, lr}
 80a0dfe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e00:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0e02:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e04:	f7ff fc5e 	bl	80a06c4 <HAL_USB_USART_Available_Data_For_Write>
 80a0e08:	2800      	cmp	r0, #0
 80a0e0a:	dc01      	bgt.n	80a0e10 <_ZN9USBSerial5writeEh+0x14>
 80a0e0c:	7c60      	ldrb	r0, [r4, #17]
 80a0e0e:	b128      	cbz	r0, 80a0e1c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0e10:	4629      	mov	r1, r5
 80a0e12:	7c20      	ldrb	r0, [r4, #16]
 80a0e14:	f7ff fc66 	bl	80a06e4 <HAL_USB_USART_Send_Data>
 80a0e18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0e1c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0e20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0e20:	b510      	push	{r4, lr}
 80a0e22:	4604      	mov	r4, r0
 80a0e24:	2300      	movs	r3, #0
 80a0e26:	6063      	str	r3, [r4, #4]
 80a0e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e2c:	60a3      	str	r3, [r4, #8]
 80a0e2e:	4b05      	ldr	r3, [pc, #20]	; (80a0e44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0e30:	4608      	mov	r0, r1
 80a0e32:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0e34:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0e36:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0e38:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0e3a:	4611      	mov	r1, r2
 80a0e3c:	f7ff fc2a 	bl	80a0694 <HAL_USB_USART_Init>
}
 80a0e40:	4620      	mov	r0, r4
 80a0e42:	bd10      	pop	{r4, pc}
 80a0e44:	080a1a0c 	.word	0x080a1a0c

080a0e48 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0e48:	2200      	movs	r2, #0
 80a0e4a:	7c00      	ldrb	r0, [r0, #16]
 80a0e4c:	f7ff bc2a 	b.w	80a06a4 <HAL_USB_USART_Begin>

080a0e50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0e50:	b510      	push	{r4, lr}
 80a0e52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0e54:	2214      	movs	r2, #20
 80a0e56:	2100      	movs	r1, #0
 80a0e58:	f000 fccf 	bl	80a17fa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0e5c:	4b05      	ldr	r3, [pc, #20]	; (80a0e74 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0e5e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0e60:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0e62:	4b05      	ldr	r3, [pc, #20]	; (80a0e78 <_Z19acquireSerialBufferv+0x28>)
 80a0e64:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0e66:	f240 1301 	movw	r3, #257	; 0x101
 80a0e6a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0e6c:	2381      	movs	r3, #129	; 0x81
 80a0e6e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0e70:	bd10      	pop	{r4, pc}
 80a0e72:	bf00      	nop
 80a0e74:	20000585 	.word	0x20000585
 80a0e78:	20000504 	.word	0x20000504

080a0e7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0e7c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0e7e:	4d0e      	ldr	r5, [pc, #56]	; (80a0eb8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0e80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0e82:	a801      	add	r0, sp, #4
 80a0e84:	f7ff ffe4 	bl	80a0e50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0e88:	6829      	ldr	r1, [r5, #0]
 80a0e8a:	f011 0401 	ands.w	r4, r1, #1
 80a0e8e:	d110      	bne.n	80a0eb2 <_Z16_fetch_usbserialv+0x36>
 80a0e90:	4628      	mov	r0, r5
 80a0e92:	f7ff f904 	bl	80a009e <__cxa_guard_acquire>
 80a0e96:	b160      	cbz	r0, 80a0eb2 <_Z16_fetch_usbserialv+0x36>
 80a0e98:	aa01      	add	r2, sp, #4
 80a0e9a:	4621      	mov	r1, r4
 80a0e9c:	4807      	ldr	r0, [pc, #28]	; (80a0ebc <_Z16_fetch_usbserialv+0x40>)
 80a0e9e:	f7ff ffbf 	bl	80a0e20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0ea2:	4628      	mov	r0, r5
 80a0ea4:	f7ff f900 	bl	80a00a8 <__cxa_guard_release>
 80a0ea8:	4a05      	ldr	r2, [pc, #20]	; (80a0ec0 <_Z16_fetch_usbserialv+0x44>)
 80a0eaa:	4906      	ldr	r1, [pc, #24]	; (80a0ec4 <_Z16_fetch_usbserialv+0x48>)
 80a0eac:	4803      	ldr	r0, [pc, #12]	; (80a0ebc <_Z16_fetch_usbserialv+0x40>)
 80a0eae:	f000 fb3c 	bl	80a152a <__aeabi_atexit>
	return _usbserial;
}
 80a0eb2:	4802      	ldr	r0, [pc, #8]	; (80a0ebc <_Z16_fetch_usbserialv+0x40>)
 80a0eb4:	b007      	add	sp, #28
 80a0eb6:	bd30      	pop	{r4, r5, pc}
 80a0eb8:	20000500 	.word	0x20000500
 80a0ebc:	20000688 	.word	0x20000688
 80a0ec0:	200000a4 	.word	0x200000a4
 80a0ec4:	080a0d9f 	.word	0x080a0d9f

080a0ec8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0ec8:	b510      	push	{r4, lr}
 80a0eca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ecc:	2214      	movs	r2, #20
 80a0ece:	2100      	movs	r1, #0
 80a0ed0:	f000 fc93 	bl	80a17fa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0ed4:	4b05      	ldr	r3, [pc, #20]	; (80a0eec <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0ed6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0ed8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0eda:	4b05      	ldr	r3, [pc, #20]	; (80a0ef0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0edc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0ede:	f240 1301 	movw	r3, #257	; 0x101
 80a0ee2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0ee4:	2381      	movs	r3, #129	; 0x81
 80a0ee6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0ee8:	bd10      	pop	{r4, pc}
 80a0eea:	bf00      	nop
 80a0eec:	20000738 	.word	0x20000738
 80a0ef0:	200006a0 	.word	0x200006a0

080a0ef4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0ef4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0ef6:	4c0e      	ldr	r4, [pc, #56]	; (80a0f30 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0ef8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0efa:	a801      	add	r0, sp, #4
 80a0efc:	f7ff ffe4 	bl	80a0ec8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f00:	6823      	ldr	r3, [r4, #0]
 80a0f02:	07db      	lsls	r3, r3, #31
 80a0f04:	d410      	bmi.n	80a0f28 <_Z17_fetch_usbserial1v+0x34>
 80a0f06:	4620      	mov	r0, r4
 80a0f08:	f7ff f8c9 	bl	80a009e <__cxa_guard_acquire>
 80a0f0c:	b160      	cbz	r0, 80a0f28 <_Z17_fetch_usbserial1v+0x34>
 80a0f0e:	aa01      	add	r2, sp, #4
 80a0f10:	2101      	movs	r1, #1
 80a0f12:	4808      	ldr	r0, [pc, #32]	; (80a0f34 <_Z17_fetch_usbserial1v+0x40>)
 80a0f14:	f7ff ff84 	bl	80a0e20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0f18:	4620      	mov	r0, r4
 80a0f1a:	f7ff f8c5 	bl	80a00a8 <__cxa_guard_release>
 80a0f1e:	4a06      	ldr	r2, [pc, #24]	; (80a0f38 <_Z17_fetch_usbserial1v+0x44>)
 80a0f20:	4906      	ldr	r1, [pc, #24]	; (80a0f3c <_Z17_fetch_usbserial1v+0x48>)
 80a0f22:	4804      	ldr	r0, [pc, #16]	; (80a0f34 <_Z17_fetch_usbserial1v+0x40>)
 80a0f24:	f000 fb01 	bl	80a152a <__aeabi_atexit>
  return _usbserial1;
}
 80a0f28:	4802      	ldr	r0, [pc, #8]	; (80a0f34 <_Z17_fetch_usbserial1v+0x40>)
 80a0f2a:	b006      	add	sp, #24
 80a0f2c:	bd10      	pop	{r4, pc}
 80a0f2e:	bf00      	nop
 80a0f30:	2000069c 	.word	0x2000069c
 80a0f34:	20000724 	.word	0x20000724
 80a0f38:	200000a4 	.word	0x200000a4
 80a0f3c:	080a0d9f 	.word	0x080a0d9f

080a0f40 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0f40:	4770      	bx	lr

080a0f42 <_ZN9IPAddressD0Ev>:
 80a0f42:	b510      	push	{r4, lr}
 80a0f44:	4604      	mov	r4, r0
 80a0f46:	2118      	movs	r1, #24
 80a0f48:	f000 faf4 	bl	80a1534 <_ZdlPvj>
 80a0f4c:	4620      	mov	r0, r4
 80a0f4e:	bd10      	pop	{r4, pc}

080a0f50 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f52:	460f      	mov	r7, r1
 80a0f54:	f100 0608 	add.w	r6, r0, #8
 80a0f58:	1d05      	adds	r5, r0, #4
 80a0f5a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0f5c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0f60:	220a      	movs	r2, #10
 80a0f62:	4638      	mov	r0, r7
 80a0f64:	f000 f99c 	bl	80a12a0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0f68:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0f6a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0f6c:	d007      	beq.n	80a0f7e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0f6e:	2c00      	cmp	r4, #0
 80a0f70:	d0f4      	beq.n	80a0f5c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0f72:	212e      	movs	r1, #46	; 0x2e
 80a0f74:	4638      	mov	r0, r7
 80a0f76:	f000 f950 	bl	80a121a <_ZN5Print5printEc>
 80a0f7a:	4404      	add	r4, r0
 80a0f7c:	e7ee      	b.n	80a0f5c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0f7e:	4620      	mov	r0, r4
 80a0f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0f84 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0f84:	b510      	push	{r4, lr}
 80a0f86:	4604      	mov	r4, r0
 80a0f88:	4b04      	ldr	r3, [pc, #16]	; (80a0f9c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0f8a:	2211      	movs	r2, #17
 80a0f8c:	f840 3b04 	str.w	r3, [r0], #4
 80a0f90:	2100      	movs	r1, #0
 80a0f92:	f000 fc32 	bl	80a17fa <memset>
{
    clear();
}
 80a0f96:	4620      	mov	r0, r4
 80a0f98:	bd10      	pop	{r4, pc}
 80a0f9a:	bf00      	nop
 80a0f9c:	080a1a3c 	.word	0x080a1a3c

080a0fa0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0fa0:	4603      	mov	r3, r0
 80a0fa2:	4a07      	ldr	r2, [pc, #28]	; (80a0fc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0fa4:	b510      	push	{r4, lr}
 80a0fa6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0faa:	f101 0210 	add.w	r2, r1, #16
 80a0fae:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0fb2:	4291      	cmp	r1, r2
 80a0fb4:	f843 4b04 	str.w	r4, [r3], #4
 80a0fb8:	d1f9      	bne.n	80a0fae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0fba:	780a      	ldrb	r2, [r1, #0]
 80a0fbc:	701a      	strb	r2, [r3, #0]
}
 80a0fbe:	bd10      	pop	{r4, pc}
 80a0fc0:	080a1a3c 	.word	0x080a1a3c

080a0fc4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0fc4:	4a02      	ldr	r2, [pc, #8]	; (80a0fd0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0fc6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0fc8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0fca:	2204      	movs	r2, #4
 80a0fcc:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0fce:	4770      	bx	lr
 80a0fd0:	080a1a3c 	.word	0x080a1a3c

080a0fd4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0fd4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0fd6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0fda:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0fde:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0fe2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0fe6:	2304      	movs	r3, #4
 80a0fe8:	6041      	str	r1, [r0, #4]
 80a0fea:	7503      	strb	r3, [r0, #20]
 80a0fec:	bd10      	pop	{r4, pc}
	...

080a0ff0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0ff2:	4d04      	ldr	r5, [pc, #16]	; (80a1004 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0ff4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0ff6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0ffa:	9500      	str	r5, [sp, #0]
 80a0ffc:	f7ff ffea 	bl	80a0fd4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1000:	b003      	add	sp, #12
 80a1002:	bd30      	pop	{r4, r5, pc}
 80a1004:	080a1a3c 	.word	0x080a1a3c

080a1008 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1008:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a100a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a100c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a100e:	b113      	cbz	r3, 80a1016 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1010:	2203      	movs	r2, #3
 80a1012:	4601      	mov	r1, r0
 80a1014:	4798      	blx	r3
    }
 80a1016:	4620      	mov	r0, r4
 80a1018:	bd10      	pop	{r4, pc}
	...

080a101c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a101c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a101e:	4b14      	ldr	r3, [pc, #80]	; (80a1070 <serialEventRun+0x54>)
 80a1020:	b133      	cbz	r3, 80a1030 <serialEventRun+0x14>
 80a1022:	f7ff ff2b 	bl	80a0e7c <_Z16_fetch_usbserialv>
 80a1026:	6803      	ldr	r3, [r0, #0]
 80a1028:	691b      	ldr	r3, [r3, #16]
 80a102a:	4798      	blx	r3
 80a102c:	2800      	cmp	r0, #0
 80a102e:	dc16      	bgt.n	80a105e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1030:	4b10      	ldr	r3, [pc, #64]	; (80a1074 <serialEventRun+0x58>)
 80a1032:	b133      	cbz	r3, 80a1042 <serialEventRun+0x26>
 80a1034:	f7ff fe78 	bl	80a0d28 <_Z22__fetch_global_Serial1v>
 80a1038:	6803      	ldr	r3, [r0, #0]
 80a103a:	691b      	ldr	r3, [r3, #16]
 80a103c:	4798      	blx	r3
 80a103e:	2800      	cmp	r0, #0
 80a1040:	dc10      	bgt.n	80a1064 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1042:	4b0d      	ldr	r3, [pc, #52]	; (80a1078 <serialEventRun+0x5c>)
 80a1044:	b10b      	cbz	r3, 80a104a <serialEventRun+0x2e>
 80a1046:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a104a:	4b0c      	ldr	r3, [pc, #48]	; (80a107c <serialEventRun+0x60>)
 80a104c:	b17b      	cbz	r3, 80a106e <serialEventRun+0x52>
 80a104e:	f7ff ff51 	bl	80a0ef4 <_Z17_fetch_usbserial1v>
 80a1052:	6803      	ldr	r3, [r0, #0]
 80a1054:	691b      	ldr	r3, [r3, #16]
 80a1056:	4798      	blx	r3
 80a1058:	2800      	cmp	r0, #0
 80a105a:	dc06      	bgt.n	80a106a <serialEventRun+0x4e>
 80a105c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a105e:	f3af 8000 	nop.w
 80a1062:	e7e5      	b.n	80a1030 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1064:	f3af 8000 	nop.w
 80a1068:	e7eb      	b.n	80a1042 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a106a:	f3af 8000 	nop.w
 80a106e:	bd08      	pop	{r3, pc}
	...

080a1080 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1080:	b508      	push	{r3, lr}
	serialEventRun();
 80a1082:	f7ff ffcb 	bl	80a101c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1086:	f7ff fbcf 	bl	80a0828 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a108a:	4b01      	ldr	r3, [pc, #4]	; (80a1090 <_post_loop+0x10>)
 80a108c:	6018      	str	r0, [r3, #0]
 80a108e:	bd08      	pop	{r3, pc}
 80a1090:	20000894 	.word	0x20000894

080a1094 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1094:	4802      	ldr	r0, [pc, #8]	; (80a10a0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1096:	4a03      	ldr	r2, [pc, #12]	; (80a10a4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1098:	4903      	ldr	r1, [pc, #12]	; (80a10a8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a109a:	1a12      	subs	r2, r2, r0
 80a109c:	f000 bba2 	b.w	80a17e4 <memcpy>
 80a10a0:	40024000 	.word	0x40024000
 80a10a4:	40024004 	.word	0x40024004
 80a10a8:	080a1bf0 	.word	0x080a1bf0

080a10ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a10ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a10ae:	2300      	movs	r3, #0
 80a10b0:	9300      	str	r3, [sp, #0]
 80a10b2:	461a      	mov	r2, r3
 80a10b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a10b8:	f7ff fc90 	bl	80a09dc <system_ctrl_set_result>
}
 80a10bc:	b003      	add	sp, #12
 80a10be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a10c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a10c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a10c6:	8843      	ldrh	r3, [r0, #2]
 80a10c8:	2b0a      	cmp	r3, #10
 80a10ca:	d008      	beq.n	80a10de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a10cc:	2b50      	cmp	r3, #80	; 0x50
 80a10ce:	d109      	bne.n	80a10e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a10d0:	4b09      	ldr	r3, [pc, #36]	; (80a10f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a10d2:	681b      	ldr	r3, [r3, #0]
 80a10d4:	b13b      	cbz	r3, 80a10e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a10d6:	b003      	add	sp, #12
 80a10d8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a10dc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a10de:	f7ff ffe5 	bl	80a10ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a10e2:	e006      	b.n	80a10f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a10e4:	2300      	movs	r3, #0
 80a10e6:	9300      	str	r3, [sp, #0]
 80a10e8:	461a      	mov	r2, r3
 80a10ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a10ee:	f7ff fc75 	bl	80a09dc <system_ctrl_set_result>
        break;
    }
}
 80a10f2:	b003      	add	sp, #12
 80a10f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a10f8:	2000083c 	.word	0x2000083c

080a10fc <module_user_init_hook>:

void module_user_init_hook()
{
 80a10fc:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a10fe:	4c10      	ldr	r4, [pc, #64]	; (80a1140 <module_user_init_hook+0x44>)
 80a1100:	4d10      	ldr	r5, [pc, #64]	; (80a1144 <module_user_init_hook+0x48>)
 80a1102:	6823      	ldr	r3, [r4, #0]
 80a1104:	42ab      	cmp	r3, r5
 80a1106:	4b10      	ldr	r3, [pc, #64]	; (80a1148 <module_user_init_hook+0x4c>)
 80a1108:	bf0c      	ite	eq
 80a110a:	2201      	moveq	r2, #1
 80a110c:	2200      	movne	r2, #0
 80a110e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1110:	d002      	beq.n	80a1118 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1112:	f7ff ffbf 	bl	80a1094 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1116:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1118:	f7ff fb7e 	bl	80a0818 <HAL_RNG_GetRandomNumber>
 80a111c:	4604      	mov	r4, r0
    srand(seed);
 80a111e:	f000 fb75 	bl	80a180c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1122:	4b0a      	ldr	r3, [pc, #40]	; (80a114c <module_user_init_hook+0x50>)
 80a1124:	b113      	cbz	r3, 80a112c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1126:	4620      	mov	r0, r4
 80a1128:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a112c:	2100      	movs	r1, #0
 80a112e:	4807      	ldr	r0, [pc, #28]	; (80a114c <module_user_init_hook+0x50>)
 80a1130:	f7ff fbe2 	bl	80a08f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1138:	2100      	movs	r1, #0
 80a113a:	4805      	ldr	r0, [pc, #20]	; (80a1150 <module_user_init_hook+0x54>)
 80a113c:	f7ff bc44 	b.w	80a09c8 <system_ctrl_set_app_request_handler>
 80a1140:	40024000 	.word	0x40024000
 80a1144:	9a271c1e 	.word	0x9a271c1e
 80a1148:	20000840 	.word	0x20000840
 80a114c:	00000000 	.word	0x00000000
 80a1150:	080a10c5 	.word	0x080a10c5

080a1154 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1154:	b510      	push	{r4, lr}
 80a1156:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1158:	f7ff ff56 	bl	80a1008 <_ZNSt14_Function_baseD1Ev>
 80a115c:	4620      	mov	r0, r4
 80a115e:	bd10      	pop	{r4, pc}

080a1160 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a1160:	b510      	push	{r4, lr}
 80a1162:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a1164:	f7ff fbc0 	bl	80a08e8 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 80a1168:	4284      	cmp	r4, r0
 80a116a:	d008      	beq.n	80a117e <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a116c:	b11c      	cbz	r4, 80a1176 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a116e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 80a1172:	f7ff bba9 	b.w	80a08c8 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 80a1176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 80a117a:	f7ff bbad 	b.w	80a08d8 <LED_Signaling_Stop>
 80a117e:	bd10      	pop	{r4, pc}

080a1180 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1180:	4803      	ldr	r0, [pc, #12]	; (80a1190 <_GLOBAL__sub_I_RGB+0x10>)
 80a1182:	2300      	movs	r3, #0
 80a1184:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1186:	4a03      	ldr	r2, [pc, #12]	; (80a1194 <_GLOBAL__sub_I_RGB+0x14>)
 80a1188:	4903      	ldr	r1, [pc, #12]	; (80a1198 <_GLOBAL__sub_I_RGB+0x18>)
 80a118a:	f000 b9ce 	b.w	80a152a <__aeabi_atexit>
 80a118e:	bf00      	nop
 80a1190:	20000844 	.word	0x20000844
 80a1194:	200000a4 	.word	0x200000a4
 80a1198:	080a1155 	.word	0x080a1155

080a119c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a119c:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a119e:	681a      	ldr	r2, [r3, #0]
 80a11a0:	4b02      	ldr	r3, [pc, #8]	; (80a11ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a11a2:	601a      	str	r2, [r3, #0]
 80a11a4:	4770      	bx	lr
 80a11a6:	bf00      	nop
 80a11a8:	2000003c 	.word	0x2000003c
 80a11ac:	20000854 	.word	0x20000854

080a11b0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a11b0:	4a01      	ldr	r2, [pc, #4]	; (80a11b8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a11b2:	4b02      	ldr	r3, [pc, #8]	; (80a11bc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a11b4:	601a      	str	r2, [r3, #0]
 80a11b6:	4770      	bx	lr
 80a11b8:	080a1ae7 	.word	0x080a1ae7
 80a11bc:	20000858 	.word	0x20000858

080a11c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a11c0:	2100      	movs	r1, #0
 80a11c2:	f7ff bbf9 	b.w	80a09b8 <system_delay_ms>

080a11c6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a11c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11c8:	4606      	mov	r6, r0
 80a11ca:	460d      	mov	r5, r1
 80a11cc:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a11ce:	2400      	movs	r4, #0
  while (size--) {
 80a11d0:	42bd      	cmp	r5, r7
 80a11d2:	d00c      	beq.n	80a11ee <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a11d4:	6833      	ldr	r3, [r6, #0]
 80a11d6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a11da:	689b      	ldr	r3, [r3, #8]
 80a11dc:	4630      	mov	r0, r6
 80a11de:	4798      	blx	r3
     if (chunk>=0)
 80a11e0:	2800      	cmp	r0, #0
 80a11e2:	db01      	blt.n	80a11e8 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a11e4:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a11e6:	e7f3      	b.n	80a11d0 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a11e8:	2c00      	cmp	r4, #0
 80a11ea:	bf08      	it	eq
 80a11ec:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a11ee:	4620      	mov	r0, r4
 80a11f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a11f2 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a11f2:	b570      	push	{r4, r5, r6, lr}
 80a11f4:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a11f6:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a11f8:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a11fa:	b149      	cbz	r1, 80a1210 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a11fc:	f000 fb2e 	bl	80a185c <strlen>
 80a1200:	682b      	ldr	r3, [r5, #0]
 80a1202:	4602      	mov	r2, r0
 80a1204:	4621      	mov	r1, r4
 80a1206:	4628      	mov	r0, r5
    }
 80a1208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a120c:	68db      	ldr	r3, [r3, #12]
 80a120e:	4718      	bx	r3
    }
 80a1210:	bd70      	pop	{r4, r5, r6, pc}

080a1212 <_ZN5Print5printEPKc>:
 80a1212:	b508      	push	{r3, lr}
 80a1214:	f7ff ffed 	bl	80a11f2 <_ZN5Print5writeEPKc>
 80a1218:	bd08      	pop	{r3, pc}

080a121a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a121a:	6803      	ldr	r3, [r0, #0]
 80a121c:	689b      	ldr	r3, [r3, #8]
 80a121e:	4718      	bx	r3

080a1220 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1220:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1222:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1224:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1226:	f7ff fff8 	bl	80a121a <_ZN5Print5printEc>
  n += print('\n');
 80a122a:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a122c:	4604      	mov	r4, r0
  n += print('\n');
 80a122e:	4628      	mov	r0, r5
 80a1230:	f7ff fff3 	bl	80a121a <_ZN5Print5printEc>
  return n;
}
 80a1234:	4420      	add	r0, r4
 80a1236:	bd38      	pop	{r3, r4, r5, pc}

080a1238 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1238:	b538      	push	{r3, r4, r5, lr}
 80a123a:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a123c:	f7ff ffd9 	bl	80a11f2 <_ZN5Print5writeEPKc>
 80a1240:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1242:	4628      	mov	r0, r5
 80a1244:	f7ff ffec 	bl	80a1220 <_ZN5Print7printlnEv>
  return n;
}
 80a1248:	4420      	add	r0, r4
 80a124a:	bd38      	pop	{r3, r4, r5, pc}

080a124c <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a124c:	2a01      	cmp	r2, #1
 80a124e:	bf98      	it	ls
 80a1250:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1252:	b530      	push	{r4, r5, lr}
 80a1254:	460b      	mov	r3, r1
 80a1256:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1258:	2100      	movs	r1, #0
 80a125a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a125e:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1262:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1266:	fb05 3312 	mls	r3, r5, r2, r3
 80a126a:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a126c:	2b09      	cmp	r3, #9
 80a126e:	bf94      	ite	ls
 80a1270:	3330      	addls	r3, #48	; 0x30
 80a1272:	3337      	addhi	r3, #55	; 0x37
 80a1274:	b2db      	uxtb	r3, r3
 80a1276:	4621      	mov	r1, r4
 80a1278:	f804 3901 	strb.w	r3, [r4], #-1
 80a127c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a127e:	2d00      	cmp	r5, #0
 80a1280:	d1ef      	bne.n	80a1262 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1282:	f7ff ffb6 	bl	80a11f2 <_ZN5Print5writeEPKc>
}
 80a1286:	b00b      	add	sp, #44	; 0x2c
 80a1288:	bd30      	pop	{r4, r5, pc}

080a128a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a128a:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a128c:	b922      	cbnz	r2, 80a1298 <_ZN5Print5printEmi+0xe>
 80a128e:	6803      	ldr	r3, [r0, #0]
 80a1290:	b2c9      	uxtb	r1, r1
 80a1292:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1294:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1296:	4718      	bx	r3
  else return printNumber(n, base);
 80a1298:	b2d2      	uxtb	r2, r2
}
 80a129a:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a129c:	f7ff bfd6 	b.w	80a124c <_ZN5Print11printNumberEmh>

080a12a0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a12a0:	f7ff bff3 	b.w	80a128a <_ZN5Print5printEmi>

080a12a4 <_ZN5Print5printEji>:
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
 80a12a4:	f7ff bff1 	b.w	80a128a <_ZN5Print5printEmi>

080a12a8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a12a8:	b510      	push	{r4, lr}
 80a12aa:	4604      	mov	r4, r0
{
	free(buffer);
 80a12ac:	6800      	ldr	r0, [r0, #0]
 80a12ae:	f7ff fba7 	bl	80a0a00 <free>
}
 80a12b2:	4620      	mov	r0, r4
 80a12b4:	bd10      	pop	{r4, pc}

080a12b6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a12b6:	b510      	push	{r4, lr}
 80a12b8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a12ba:	6800      	ldr	r0, [r0, #0]
 80a12bc:	b108      	cbz	r0, 80a12c2 <_ZN6String10invalidateEv+0xc>
 80a12be:	f7ff fb9f 	bl	80a0a00 <free>
	buffer = NULL;
 80a12c2:	2300      	movs	r3, #0
 80a12c4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a12c6:	60a3      	str	r3, [r4, #8]
 80a12c8:	6063      	str	r3, [r4, #4]
 80a12ca:	bd10      	pop	{r4, pc}

080a12cc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a12cc:	b538      	push	{r3, r4, r5, lr}
 80a12ce:	4604      	mov	r4, r0
 80a12d0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a12d2:	6800      	ldr	r0, [r0, #0]
 80a12d4:	3101      	adds	r1, #1
 80a12d6:	f7ff fb9b 	bl	80a0a10 <realloc>
	if (newbuffer) {
 80a12da:	b110      	cbz	r0, 80a12e2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a12dc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a12e0:	2001      	movs	r0, #1
	}
	return 0;
}
 80a12e2:	bd38      	pop	{r3, r4, r5, pc}

080a12e4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a12e4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a12e6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a12e8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a12ea:	b113      	cbz	r3, 80a12f2 <_ZN6String7reserveEj+0xe>
 80a12ec:	6843      	ldr	r3, [r0, #4]
 80a12ee:	428b      	cmp	r3, r1
 80a12f0:	d207      	bcs.n	80a1302 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a12f2:	4620      	mov	r0, r4
 80a12f4:	f7ff ffea 	bl	80a12cc <_ZN6String12changeBufferEj>
 80a12f8:	b120      	cbz	r0, 80a1304 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a12fa:	68a3      	ldr	r3, [r4, #8]
 80a12fc:	b90b      	cbnz	r3, 80a1302 <_ZN6String7reserveEj+0x1e>
 80a12fe:	6822      	ldr	r2, [r4, #0]
 80a1300:	7013      	strb	r3, [r2, #0]
 80a1302:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1304:	bd10      	pop	{r4, pc}

080a1306 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1306:	b570      	push	{r4, r5, r6, lr}
 80a1308:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a130a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a130c:	4604      	mov	r4, r0
 80a130e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1310:	f7ff ffe8 	bl	80a12e4 <_ZN6String7reserveEj>
 80a1314:	b918      	cbnz	r0, 80a131e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1316:	4620      	mov	r0, r4
 80a1318:	f7ff ffcd 	bl	80a12b6 <_ZN6String10invalidateEv>
		return *this;
 80a131c:	e009      	b.n	80a1332 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a131e:	462a      	mov	r2, r5
 80a1320:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1322:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1324:	6820      	ldr	r0, [r4, #0]
 80a1326:	f000 fa5d 	bl	80a17e4 <memcpy>
	buffer[len] = 0;
 80a132a:	6822      	ldr	r2, [r4, #0]
 80a132c:	68a3      	ldr	r3, [r4, #8]
 80a132e:	2100      	movs	r1, #0
 80a1330:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1332:	4620      	mov	r0, r4
 80a1334:	bd70      	pop	{r4, r5, r6, pc}

080a1336 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1336:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1338:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a133a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a133c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a133e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1340:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1342:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1344:	460d      	mov	r5, r1
 80a1346:	b139      	cbz	r1, 80a1358 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1348:	4608      	mov	r0, r1
 80a134a:	f000 fa87 	bl	80a185c <strlen>
 80a134e:	4629      	mov	r1, r5
 80a1350:	4602      	mov	r2, r0
 80a1352:	4620      	mov	r0, r4
 80a1354:	f7ff ffd7 	bl	80a1306 <_ZN6String4copyEPKcj>
}
 80a1358:	4620      	mov	r0, r4
 80a135a:	bd38      	pop	{r3, r4, r5, pc}

080a135c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a135c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1360:	4b03      	ldr	r3, [pc, #12]	; (80a1370 <_GLOBAL__sub_I_System+0x14>)
 80a1362:	2000      	movs	r0, #0
 80a1364:	7018      	strb	r0, [r3, #0]
 80a1366:	8058      	strh	r0, [r3, #2]
 80a1368:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a136a:	f7ff bb1d 	b.w	80a09a8 <set_system_mode>
 80a136e:	bf00      	nop
 80a1370:	2000085c 	.word	0x2000085c

080a1374 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1374:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1376:	4d0b      	ldr	r5, [pc, #44]	; (80a13a4 <_Z19__fetch_global_Wirev+0x30>)
 80a1378:	6829      	ldr	r1, [r5, #0]
 80a137a:	f011 0401 	ands.w	r4, r1, #1
 80a137e:	d10f      	bne.n	80a13a0 <_Z19__fetch_global_Wirev+0x2c>
 80a1380:	4628      	mov	r0, r5
 80a1382:	f7fe fe8c 	bl	80a009e <__cxa_guard_acquire>
 80a1386:	b158      	cbz	r0, 80a13a0 <_Z19__fetch_global_Wirev+0x2c>
 80a1388:	4621      	mov	r1, r4
 80a138a:	4807      	ldr	r0, [pc, #28]	; (80a13a8 <_Z19__fetch_global_Wirev+0x34>)
 80a138c:	f7ff fc5a 	bl	80a0c44 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1390:	4628      	mov	r0, r5
 80a1392:	f7fe fe89 	bl	80a00a8 <__cxa_guard_release>
 80a1396:	4a05      	ldr	r2, [pc, #20]	; (80a13ac <_Z19__fetch_global_Wirev+0x38>)
 80a1398:	4905      	ldr	r1, [pc, #20]	; (80a13b0 <_Z19__fetch_global_Wirev+0x3c>)
 80a139a:	4803      	ldr	r0, [pc, #12]	; (80a13a8 <_Z19__fetch_global_Wirev+0x34>)
 80a139c:	f000 f8c5 	bl	80a152a <__aeabi_atexit>
	return wire;
}
 80a13a0:	4801      	ldr	r0, [pc, #4]	; (80a13a8 <_Z19__fetch_global_Wirev+0x34>)
 80a13a2:	bd38      	pop	{r3, r4, r5, pc}
 80a13a4:	20000864 	.word	0x20000864
 80a13a8:	20000868 	.word	0x20000868
 80a13ac:	200000a4 	.word	0x200000a4
 80a13b0:	080a0bed 	.word	0x080a0bed

080a13b4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a13b4:	b513      	push	{r0, r1, r4, lr}
 80a13b6:	4c08      	ldr	r4, [pc, #32]	; (80a13d8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a13b8:	2300      	movs	r3, #0
 80a13ba:	461a      	mov	r2, r3
 80a13bc:	4619      	mov	r1, r3
 80a13be:	9300      	str	r3, [sp, #0]
 80a13c0:	4620      	mov	r0, r4
 80a13c2:	f7ff fe15 	bl	80a0ff0 <_ZN9IPAddressC1Ehhhh>
 80a13c6:	4620      	mov	r0, r4
 80a13c8:	4a04      	ldr	r2, [pc, #16]	; (80a13dc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a13ca:	4905      	ldr	r1, [pc, #20]	; (80a13e0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a13cc:	b002      	add	sp, #8
 80a13ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a13d2:	f000 b8aa 	b.w	80a152a <__aeabi_atexit>
 80a13d6:	bf00      	nop
 80a13d8:	2000087c 	.word	0x2000087c
 80a13dc:	200000a4 	.word	0x200000a4
 80a13e0:	080a0f41 	.word	0x080a0f41

080a13e4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a13e4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a13e6:	4c0c      	ldr	r4, [pc, #48]	; (80a1418 <_GLOBAL__sub_I_SPI+0x34>)
 80a13e8:	4e0c      	ldr	r6, [pc, #48]	; (80a141c <_GLOBAL__sub_I_SPI+0x38>)
 80a13ea:	4d0d      	ldr	r5, [pc, #52]	; (80a1420 <_GLOBAL__sub_I_SPI+0x3c>)
 80a13ec:	2100      	movs	r1, #0
 80a13ee:	4620      	mov	r0, r4
 80a13f0:	f7ff fb84 	bl	80a0afc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a13f4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a13f6:	4c0b      	ldr	r4, [pc, #44]	; (80a1424 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a13f8:	4632      	mov	r2, r6
 80a13fa:	4629      	mov	r1, r5
 80a13fc:	f000 f895 	bl	80a152a <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1400:	2101      	movs	r1, #1
 80a1402:	4620      	mov	r0, r4
 80a1404:	f7ff fb7a 	bl	80a0afc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1408:	4632      	mov	r2, r6
 80a140a:	4629      	mov	r1, r5
 80a140c:	4620      	mov	r0, r4
 80a140e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1412:	f000 b88a 	b.w	80a152a <__aeabi_atexit>
 80a1416:	bf00      	nop
 80a1418:	20000898 	.word	0x20000898
 80a141c:	200000a4 	.word	0x200000a4
 80a1420:	080a0aed 	.word	0x080a0aed
 80a1424:	200008a8 	.word	0x200008a8

080a1428 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1428:	b510      	push	{r4, lr}
 80a142a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a142c:	480f      	ldr	r0, [pc, #60]	; (80a146c <pinAvailable+0x44>)
 80a142e:	f7ff fb79 	bl	80a0b24 <_ZN8SPIClass9isEnabledEv>
 80a1432:	b128      	cbz	r0, 80a1440 <pinAvailable+0x18>
 80a1434:	f1a4 030d 	sub.w	r3, r4, #13
 80a1438:	2b02      	cmp	r3, #2
 80a143a:	d801      	bhi.n	80a1440 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a143c:	2000      	movs	r0, #0
 80a143e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1440:	f7ff ff98 	bl	80a1374 <_Z19__fetch_global_Wirev>
 80a1444:	f7ff fc10 	bl	80a0c68 <_ZN7TwoWire9isEnabledEv>
 80a1448:	b108      	cbz	r0, 80a144e <pinAvailable+0x26>
 80a144a:	2c01      	cmp	r4, #1
 80a144c:	d9f6      	bls.n	80a143c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a144e:	f7ff fc6b 	bl	80a0d28 <_Z22__fetch_global_Serial1v>
 80a1452:	f7ff fc65 	bl	80a0d20 <_ZN11USARTSerial9isEnabledEv>
 80a1456:	b118      	cbz	r0, 80a1460 <pinAvailable+0x38>
 80a1458:	f1a4 0312 	sub.w	r3, r4, #18
 80a145c:	2b01      	cmp	r3, #1
 80a145e:	d9ed      	bls.n	80a143c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1460:	2c17      	cmp	r4, #23
 80a1462:	bf8c      	ite	hi
 80a1464:	2000      	movhi	r0, #0
 80a1466:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1468:	bd10      	pop	{r4, pc}
 80a146a:	bf00      	nop
 80a146c:	20000898 	.word	0x20000898

080a1470 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1470:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1472:	b538      	push	{r3, r4, r5, lr}
 80a1474:	4604      	mov	r4, r0
 80a1476:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1478:	d80a      	bhi.n	80a1490 <pinMode+0x20>
 80a147a:	29ff      	cmp	r1, #255	; 0xff
 80a147c:	d008      	beq.n	80a1490 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a147e:	f7ff ffd3 	bl	80a1428 <pinAvailable>
 80a1482:	b128      	cbz	r0, 80a1490 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1484:	4629      	mov	r1, r5
 80a1486:	4620      	mov	r0, r4
}
 80a1488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a148c:	f7ff b9f4 	b.w	80a0878 <HAL_Pin_Mode>
 80a1490:	bd38      	pop	{r3, r4, r5, pc}

080a1492 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1492:	b538      	push	{r3, r4, r5, lr}
 80a1494:	4604      	mov	r4, r0
 80a1496:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1498:	f7ff f9f6 	bl	80a0888 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a149c:	28ff      	cmp	r0, #255	; 0xff
 80a149e:	d010      	beq.n	80a14c2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a14a0:	2806      	cmp	r0, #6
 80a14a2:	d804      	bhi.n	80a14ae <digitalWrite+0x1c>
 80a14a4:	234d      	movs	r3, #77	; 0x4d
 80a14a6:	fa23 f000 	lsr.w	r0, r3, r0
 80a14aa:	07c3      	lsls	r3, r0, #31
 80a14ac:	d409      	bmi.n	80a14c2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a14ae:	4620      	mov	r0, r4
 80a14b0:	f7ff ffba 	bl	80a1428 <pinAvailable>
 80a14b4:	b128      	cbz	r0, 80a14c2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a14b6:	4629      	mov	r1, r5
 80a14b8:	4620      	mov	r0, r4
}
 80a14ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a14be:	f7ff b9eb 	b.w	80a0898 <HAL_GPIO_Write>
 80a14c2:	bd38      	pop	{r3, r4, r5, pc}

080a14c4 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a14c4:	b510      	push	{r4, lr}
 80a14c6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a14c8:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a14ca:	bf9c      	itt	ls
 80a14cc:	340a      	addls	r4, #10
 80a14ce:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a14d0:	4620      	mov	r0, r4
 80a14d2:	f7ff ffa9 	bl	80a1428 <pinAvailable>
 80a14d6:	b150      	cbz	r0, 80a14ee <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a14d8:	2103      	movs	r1, #3
 80a14da:	4620      	mov	r0, r4
 80a14dc:	f7ff f9c4 	bl	80a0868 <HAL_Validate_Pin_Function>
 80a14e0:	2803      	cmp	r0, #3
 80a14e2:	d104      	bne.n	80a14ee <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a14e4:	4620      	mov	r0, r4
}
 80a14e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a14ea:	f7ff b9dd 	b.w	80a08a8 <HAL_ADC_Read>
}
 80a14ee:	2000      	movs	r0, #0
 80a14f0:	bd10      	pop	{r4, pc}

080a14f2 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
 80a14f2:	b570      	push	{r4, r5, r6, lr}
 80a14f4:	4604      	mov	r4, r0
 80a14f6:	460d      	mov	r5, r1
 80a14f8:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
 80a14fa:	f7ff ff95 	bl	80a1428 <pinAvailable>
 80a14fe:	b198      	cbz	r0, 80a1528 <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a1500:	2102      	movs	r1, #2
 80a1502:	4620      	mov	r0, r4
 80a1504:	f7ff f9b0 	bl	80a0868 <HAL_Validate_Pin_Function>
 80a1508:	2802      	cmp	r0, #2
 80a150a:	d10d      	bne.n	80a1528 <_Z11analogWritetmm+0x36>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a150c:	4620      	mov	r0, r4
 80a150e:	f7ff f9bb 	bl	80a0888 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a1512:	2801      	cmp	r0, #1
 80a1514:	d001      	beq.n	80a151a <_Z11analogWritetmm+0x28>
 80a1516:	2804      	cmp	r0, #4
 80a1518:	d106      	bne.n	80a1528 <_Z11analogWritetmm+0x36>
        {
            return;
        }

        HAL_PWM_Write_With_Frequency_Ext(pin, value, pwm_frequency);
 80a151a:	4632      	mov	r2, r6
 80a151c:	4629      	mov	r1, r5
 80a151e:	4620      	mov	r0, r4
    }
}
 80a1520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_With_Frequency_Ext(pin, value, pwm_frequency);
 80a1524:	f7ff b9c8 	b.w	80a08b8 <HAL_PWM_Write_With_Frequency_Ext>
 80a1528:	bd70      	pop	{r4, r5, r6, pc}

080a152a <__aeabi_atexit>:
 80a152a:	460b      	mov	r3, r1
 80a152c:	4601      	mov	r1, r0
 80a152e:	4618      	mov	r0, r3
 80a1530:	f000 b94a 	b.w	80a17c8 <__cxa_atexit>

080a1534 <_ZdlPvj>:
 80a1534:	f7fe bdb1 	b.w	80a009a <_ZdlPv>

080a1538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1538:	4b18      	ldr	r3, [pc, #96]	; (80a159c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a153a:	681a      	ldr	r2, [r3, #0]
 80a153c:	07d1      	lsls	r1, r2, #31
 80a153e:	bf5c      	itt	pl
 80a1540:	2201      	movpl	r2, #1
 80a1542:	601a      	strpl	r2, [r3, #0]
 80a1544:	4b16      	ldr	r3, [pc, #88]	; (80a15a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1546:	681a      	ldr	r2, [r3, #0]
 80a1548:	07d2      	lsls	r2, r2, #31
 80a154a:	bf5c      	itt	pl
 80a154c:	2201      	movpl	r2, #1
 80a154e:	601a      	strpl	r2, [r3, #0]
 80a1550:	4b14      	ldr	r3, [pc, #80]	; (80a15a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1552:	681a      	ldr	r2, [r3, #0]
 80a1554:	07d0      	lsls	r0, r2, #31
 80a1556:	bf5c      	itt	pl
 80a1558:	2201      	movpl	r2, #1
 80a155a:	601a      	strpl	r2, [r3, #0]
 80a155c:	4b12      	ldr	r3, [pc, #72]	; (80a15a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a155e:	681a      	ldr	r2, [r3, #0]
 80a1560:	07d1      	lsls	r1, r2, #31
 80a1562:	bf5c      	itt	pl
 80a1564:	2201      	movpl	r2, #1
 80a1566:	601a      	strpl	r2, [r3, #0]
 80a1568:	4b10      	ldr	r3, [pc, #64]	; (80a15ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a156a:	681a      	ldr	r2, [r3, #0]
 80a156c:	07d2      	lsls	r2, r2, #31
 80a156e:	bf5c      	itt	pl
 80a1570:	2201      	movpl	r2, #1
 80a1572:	601a      	strpl	r2, [r3, #0]
 80a1574:	4b0e      	ldr	r3, [pc, #56]	; (80a15b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1576:	681a      	ldr	r2, [r3, #0]
 80a1578:	07d0      	lsls	r0, r2, #31
 80a157a:	bf5c      	itt	pl
 80a157c:	2201      	movpl	r2, #1
 80a157e:	601a      	strpl	r2, [r3, #0]
 80a1580:	4b0c      	ldr	r3, [pc, #48]	; (80a15b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1582:	681a      	ldr	r2, [r3, #0]
 80a1584:	07d1      	lsls	r1, r2, #31
 80a1586:	bf5c      	itt	pl
 80a1588:	2201      	movpl	r2, #1
 80a158a:	601a      	strpl	r2, [r3, #0]
 80a158c:	4b0a      	ldr	r3, [pc, #40]	; (80a15b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a158e:	681a      	ldr	r2, [r3, #0]
 80a1590:	07d2      	lsls	r2, r2, #31
 80a1592:	bf5c      	itt	pl
 80a1594:	2201      	movpl	r2, #1
 80a1596:	601a      	strpl	r2, [r3, #0]
 80a1598:	4770      	bx	lr
 80a159a:	bf00      	nop
 80a159c:	200008d4 	.word	0x200008d4
 80a15a0:	200008d0 	.word	0x200008d0
 80a15a4:	200008cc 	.word	0x200008cc
 80a15a8:	200008c8 	.word	0x200008c8
 80a15ac:	200008c4 	.word	0x200008c4
 80a15b0:	200008c0 	.word	0x200008c0
 80a15b4:	200008bc 	.word	0x200008bc
 80a15b8:	200008b8 	.word	0x200008b8

080a15bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a15bc:	4b24      	ldr	r3, [pc, #144]	; (80a1650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a15be:	681a      	ldr	r2, [r3, #0]
 80a15c0:	07d0      	lsls	r0, r2, #31
 80a15c2:	bf5c      	itt	pl
 80a15c4:	2201      	movpl	r2, #1
 80a15c6:	601a      	strpl	r2, [r3, #0]
 80a15c8:	4b22      	ldr	r3, [pc, #136]	; (80a1654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a15ca:	681a      	ldr	r2, [r3, #0]
 80a15cc:	07d1      	lsls	r1, r2, #31
 80a15ce:	bf5c      	itt	pl
 80a15d0:	2201      	movpl	r2, #1
 80a15d2:	601a      	strpl	r2, [r3, #0]
 80a15d4:	4b20      	ldr	r3, [pc, #128]	; (80a1658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a15d6:	681a      	ldr	r2, [r3, #0]
 80a15d8:	07d2      	lsls	r2, r2, #31
 80a15da:	bf5c      	itt	pl
 80a15dc:	2201      	movpl	r2, #1
 80a15de:	601a      	strpl	r2, [r3, #0]
 80a15e0:	4b1e      	ldr	r3, [pc, #120]	; (80a165c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a15e2:	681a      	ldr	r2, [r3, #0]
 80a15e4:	07d0      	lsls	r0, r2, #31
 80a15e6:	bf5c      	itt	pl
 80a15e8:	2201      	movpl	r2, #1
 80a15ea:	601a      	strpl	r2, [r3, #0]
 80a15ec:	4b1c      	ldr	r3, [pc, #112]	; (80a1660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a15ee:	681a      	ldr	r2, [r3, #0]
 80a15f0:	07d1      	lsls	r1, r2, #31
 80a15f2:	bf5c      	itt	pl
 80a15f4:	2201      	movpl	r2, #1
 80a15f6:	601a      	strpl	r2, [r3, #0]
 80a15f8:	4b1a      	ldr	r3, [pc, #104]	; (80a1664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a15fa:	681a      	ldr	r2, [r3, #0]
 80a15fc:	07d2      	lsls	r2, r2, #31
 80a15fe:	bf5c      	itt	pl
 80a1600:	2201      	movpl	r2, #1
 80a1602:	601a      	strpl	r2, [r3, #0]
 80a1604:	4b18      	ldr	r3, [pc, #96]	; (80a1668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1606:	681a      	ldr	r2, [r3, #0]
 80a1608:	07d0      	lsls	r0, r2, #31
 80a160a:	bf5c      	itt	pl
 80a160c:	2201      	movpl	r2, #1
 80a160e:	601a      	strpl	r2, [r3, #0]
 80a1610:	4b16      	ldr	r3, [pc, #88]	; (80a166c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1612:	681a      	ldr	r2, [r3, #0]
 80a1614:	07d1      	lsls	r1, r2, #31
 80a1616:	bf5c      	itt	pl
 80a1618:	2201      	movpl	r2, #1
 80a161a:	601a      	strpl	r2, [r3, #0]
 80a161c:	4b14      	ldr	r3, [pc, #80]	; (80a1670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a161e:	681a      	ldr	r2, [r3, #0]
 80a1620:	07d2      	lsls	r2, r2, #31
 80a1622:	bf5c      	itt	pl
 80a1624:	2201      	movpl	r2, #1
 80a1626:	601a      	strpl	r2, [r3, #0]
 80a1628:	4b12      	ldr	r3, [pc, #72]	; (80a1674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a162a:	681a      	ldr	r2, [r3, #0]
 80a162c:	07d0      	lsls	r0, r2, #31
 80a162e:	bf5c      	itt	pl
 80a1630:	2201      	movpl	r2, #1
 80a1632:	601a      	strpl	r2, [r3, #0]
 80a1634:	4b10      	ldr	r3, [pc, #64]	; (80a1678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1636:	681a      	ldr	r2, [r3, #0]
 80a1638:	07d1      	lsls	r1, r2, #31
 80a163a:	bf5c      	itt	pl
 80a163c:	2201      	movpl	r2, #1
 80a163e:	601a      	strpl	r2, [r3, #0]
 80a1640:	4b0e      	ldr	r3, [pc, #56]	; (80a167c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1642:	681a      	ldr	r2, [r3, #0]
 80a1644:	07d2      	lsls	r2, r2, #31
 80a1646:	bf5c      	itt	pl
 80a1648:	2201      	movpl	r2, #1
 80a164a:	601a      	strpl	r2, [r3, #0]
 80a164c:	4770      	bx	lr
 80a164e:	bf00      	nop
 80a1650:	20000904 	.word	0x20000904
 80a1654:	20000900 	.word	0x20000900
 80a1658:	200008fc 	.word	0x200008fc
 80a165c:	200008f8 	.word	0x200008f8
 80a1660:	200008f4 	.word	0x200008f4
 80a1664:	200008f0 	.word	0x200008f0
 80a1668:	200008ec 	.word	0x200008ec
 80a166c:	200008e8 	.word	0x200008e8
 80a1670:	200008e4 	.word	0x200008e4
 80a1674:	200008e0 	.word	0x200008e0
 80a1678:	200008dc 	.word	0x200008dc
 80a167c:	200008d8 	.word	0x200008d8

080a1680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1680:	4b24      	ldr	r3, [pc, #144]	; (80a1714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1682:	681a      	ldr	r2, [r3, #0]
 80a1684:	07d0      	lsls	r0, r2, #31
 80a1686:	bf5c      	itt	pl
 80a1688:	2201      	movpl	r2, #1
 80a168a:	601a      	strpl	r2, [r3, #0]
 80a168c:	4b22      	ldr	r3, [pc, #136]	; (80a1718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a168e:	681a      	ldr	r2, [r3, #0]
 80a1690:	07d1      	lsls	r1, r2, #31
 80a1692:	bf5c      	itt	pl
 80a1694:	2201      	movpl	r2, #1
 80a1696:	601a      	strpl	r2, [r3, #0]
 80a1698:	4b20      	ldr	r3, [pc, #128]	; (80a171c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a169a:	681a      	ldr	r2, [r3, #0]
 80a169c:	07d2      	lsls	r2, r2, #31
 80a169e:	bf5c      	itt	pl
 80a16a0:	2201      	movpl	r2, #1
 80a16a2:	601a      	strpl	r2, [r3, #0]
 80a16a4:	4b1e      	ldr	r3, [pc, #120]	; (80a1720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a16a6:	681a      	ldr	r2, [r3, #0]
 80a16a8:	07d0      	lsls	r0, r2, #31
 80a16aa:	bf5c      	itt	pl
 80a16ac:	2201      	movpl	r2, #1
 80a16ae:	601a      	strpl	r2, [r3, #0]
 80a16b0:	4b1c      	ldr	r3, [pc, #112]	; (80a1724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a16b2:	681a      	ldr	r2, [r3, #0]
 80a16b4:	07d1      	lsls	r1, r2, #31
 80a16b6:	bf5c      	itt	pl
 80a16b8:	2201      	movpl	r2, #1
 80a16ba:	601a      	strpl	r2, [r3, #0]
 80a16bc:	4b1a      	ldr	r3, [pc, #104]	; (80a1728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a16be:	681a      	ldr	r2, [r3, #0]
 80a16c0:	07d2      	lsls	r2, r2, #31
 80a16c2:	bf5c      	itt	pl
 80a16c4:	2201      	movpl	r2, #1
 80a16c6:	601a      	strpl	r2, [r3, #0]
 80a16c8:	4b18      	ldr	r3, [pc, #96]	; (80a172c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a16ca:	681a      	ldr	r2, [r3, #0]
 80a16cc:	07d0      	lsls	r0, r2, #31
 80a16ce:	bf5c      	itt	pl
 80a16d0:	2201      	movpl	r2, #1
 80a16d2:	601a      	strpl	r2, [r3, #0]
 80a16d4:	4b16      	ldr	r3, [pc, #88]	; (80a1730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a16d6:	681a      	ldr	r2, [r3, #0]
 80a16d8:	07d1      	lsls	r1, r2, #31
 80a16da:	bf5c      	itt	pl
 80a16dc:	2201      	movpl	r2, #1
 80a16de:	601a      	strpl	r2, [r3, #0]
 80a16e0:	4b14      	ldr	r3, [pc, #80]	; (80a1734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a16e2:	681a      	ldr	r2, [r3, #0]
 80a16e4:	07d2      	lsls	r2, r2, #31
 80a16e6:	bf5c      	itt	pl
 80a16e8:	2201      	movpl	r2, #1
 80a16ea:	601a      	strpl	r2, [r3, #0]
 80a16ec:	4b12      	ldr	r3, [pc, #72]	; (80a1738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a16ee:	681a      	ldr	r2, [r3, #0]
 80a16f0:	07d0      	lsls	r0, r2, #31
 80a16f2:	bf5c      	itt	pl
 80a16f4:	2201      	movpl	r2, #1
 80a16f6:	601a      	strpl	r2, [r3, #0]
 80a16f8:	4b10      	ldr	r3, [pc, #64]	; (80a173c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a16fa:	681a      	ldr	r2, [r3, #0]
 80a16fc:	07d1      	lsls	r1, r2, #31
 80a16fe:	bf5c      	itt	pl
 80a1700:	2201      	movpl	r2, #1
 80a1702:	601a      	strpl	r2, [r3, #0]
 80a1704:	4b0e      	ldr	r3, [pc, #56]	; (80a1740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1706:	681a      	ldr	r2, [r3, #0]
 80a1708:	07d2      	lsls	r2, r2, #31
 80a170a:	bf5c      	itt	pl
 80a170c:	2201      	movpl	r2, #1
 80a170e:	601a      	strpl	r2, [r3, #0]
 80a1710:	4770      	bx	lr
 80a1712:	bf00      	nop
 80a1714:	20000934 	.word	0x20000934
 80a1718:	20000930 	.word	0x20000930
 80a171c:	2000092c 	.word	0x2000092c
 80a1720:	20000928 	.word	0x20000928
 80a1724:	20000924 	.word	0x20000924
 80a1728:	20000920 	.word	0x20000920
 80a172c:	2000091c 	.word	0x2000091c
 80a1730:	20000918 	.word	0x20000918
 80a1734:	20000914 	.word	0x20000914
 80a1738:	20000910 	.word	0x20000910
 80a173c:	2000090c 	.word	0x2000090c
 80a1740:	20000908 	.word	0x20000908

080a1744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1744:	4b18      	ldr	r3, [pc, #96]	; (80a17a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1746:	681a      	ldr	r2, [r3, #0]
 80a1748:	07d1      	lsls	r1, r2, #31
 80a174a:	bf5c      	itt	pl
 80a174c:	2201      	movpl	r2, #1
 80a174e:	601a      	strpl	r2, [r3, #0]
 80a1750:	4b16      	ldr	r3, [pc, #88]	; (80a17ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1752:	681a      	ldr	r2, [r3, #0]
 80a1754:	07d2      	lsls	r2, r2, #31
 80a1756:	bf5c      	itt	pl
 80a1758:	2201      	movpl	r2, #1
 80a175a:	601a      	strpl	r2, [r3, #0]
 80a175c:	4b14      	ldr	r3, [pc, #80]	; (80a17b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a175e:	681a      	ldr	r2, [r3, #0]
 80a1760:	07d0      	lsls	r0, r2, #31
 80a1762:	bf5c      	itt	pl
 80a1764:	2201      	movpl	r2, #1
 80a1766:	601a      	strpl	r2, [r3, #0]
 80a1768:	4b12      	ldr	r3, [pc, #72]	; (80a17b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a176a:	681a      	ldr	r2, [r3, #0]
 80a176c:	07d1      	lsls	r1, r2, #31
 80a176e:	bf5c      	itt	pl
 80a1770:	2201      	movpl	r2, #1
 80a1772:	601a      	strpl	r2, [r3, #0]
 80a1774:	4b10      	ldr	r3, [pc, #64]	; (80a17b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1776:	681a      	ldr	r2, [r3, #0]
 80a1778:	07d2      	lsls	r2, r2, #31
 80a177a:	bf5c      	itt	pl
 80a177c:	2201      	movpl	r2, #1
 80a177e:	601a      	strpl	r2, [r3, #0]
 80a1780:	4b0e      	ldr	r3, [pc, #56]	; (80a17bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1782:	681a      	ldr	r2, [r3, #0]
 80a1784:	07d0      	lsls	r0, r2, #31
 80a1786:	bf5c      	itt	pl
 80a1788:	2201      	movpl	r2, #1
 80a178a:	601a      	strpl	r2, [r3, #0]
 80a178c:	4b0c      	ldr	r3, [pc, #48]	; (80a17c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a178e:	681a      	ldr	r2, [r3, #0]
 80a1790:	07d1      	lsls	r1, r2, #31
 80a1792:	bf5c      	itt	pl
 80a1794:	2201      	movpl	r2, #1
 80a1796:	601a      	strpl	r2, [r3, #0]
 80a1798:	4b0a      	ldr	r3, [pc, #40]	; (80a17c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a179a:	681a      	ldr	r2, [r3, #0]
 80a179c:	07d2      	lsls	r2, r2, #31
 80a179e:	bf5c      	itt	pl
 80a17a0:	2201      	movpl	r2, #1
 80a17a2:	601a      	strpl	r2, [r3, #0]
 80a17a4:	4770      	bx	lr
 80a17a6:	bf00      	nop
 80a17a8:	20000954 	.word	0x20000954
 80a17ac:	20000950 	.word	0x20000950
 80a17b0:	2000094c 	.word	0x2000094c
 80a17b4:	20000948 	.word	0x20000948
 80a17b8:	20000944 	.word	0x20000944
 80a17bc:	20000940 	.word	0x20000940
 80a17c0:	2000093c 	.word	0x2000093c
 80a17c4:	20000938 	.word	0x20000938

080a17c8 <__cxa_atexit>:
 80a17c8:	b510      	push	{r4, lr}
 80a17ca:	4c05      	ldr	r4, [pc, #20]	; (80a17e0 <__cxa_atexit+0x18>)
 80a17cc:	4613      	mov	r3, r2
 80a17ce:	b12c      	cbz	r4, 80a17dc <__cxa_atexit+0x14>
 80a17d0:	460a      	mov	r2, r1
 80a17d2:	4601      	mov	r1, r0
 80a17d4:	2002      	movs	r0, #2
 80a17d6:	f3af 8000 	nop.w
 80a17da:	bd10      	pop	{r4, pc}
 80a17dc:	4620      	mov	r0, r4
 80a17de:	bd10      	pop	{r4, pc}
 80a17e0:	00000000 	.word	0x00000000

080a17e4 <memcpy>:
 80a17e4:	b510      	push	{r4, lr}
 80a17e6:	1e43      	subs	r3, r0, #1
 80a17e8:	440a      	add	r2, r1
 80a17ea:	4291      	cmp	r1, r2
 80a17ec:	d004      	beq.n	80a17f8 <memcpy+0x14>
 80a17ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a17f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a17f6:	e7f8      	b.n	80a17ea <memcpy+0x6>
 80a17f8:	bd10      	pop	{r4, pc}

080a17fa <memset>:
 80a17fa:	4603      	mov	r3, r0
 80a17fc:	4402      	add	r2, r0
 80a17fe:	4293      	cmp	r3, r2
 80a1800:	d002      	beq.n	80a1808 <memset+0xe>
 80a1802:	f803 1b01 	strb.w	r1, [r3], #1
 80a1806:	e7fa      	b.n	80a17fe <memset+0x4>
 80a1808:	4770      	bx	lr
	...

080a180c <srand>:
 80a180c:	b538      	push	{r3, r4, r5, lr}
 80a180e:	4b12      	ldr	r3, [pc, #72]	; (80a1858 <srand+0x4c>)
 80a1810:	4605      	mov	r5, r0
 80a1812:	681c      	ldr	r4, [r3, #0]
 80a1814:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1816:	b9d3      	cbnz	r3, 80a184e <srand+0x42>
 80a1818:	2018      	movs	r0, #24
 80a181a:	f7ff f8e9 	bl	80a09f0 <malloc>
 80a181e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1822:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1824:	8003      	strh	r3, [r0, #0]
 80a1826:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a182a:	8043      	strh	r3, [r0, #2]
 80a182c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1830:	8083      	strh	r3, [r0, #4]
 80a1832:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1836:	80c3      	strh	r3, [r0, #6]
 80a1838:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a183c:	8103      	strh	r3, [r0, #8]
 80a183e:	2305      	movs	r3, #5
 80a1840:	8143      	strh	r3, [r0, #10]
 80a1842:	230b      	movs	r3, #11
 80a1844:	8183      	strh	r3, [r0, #12]
 80a1846:	2201      	movs	r2, #1
 80a1848:	2300      	movs	r3, #0
 80a184a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a184e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1850:	2200      	movs	r2, #0
 80a1852:	611d      	str	r5, [r3, #16]
 80a1854:	615a      	str	r2, [r3, #20]
 80a1856:	bd38      	pop	{r3, r4, r5, pc}
 80a1858:	200000a0 	.word	0x200000a0

080a185c <strlen>:
 80a185c:	4603      	mov	r3, r0
 80a185e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1862:	2a00      	cmp	r2, #0
 80a1864:	d1fb      	bne.n	80a185e <strlen+0x2>
 80a1866:	1a18      	subs	r0, r3, r0
 80a1868:	3801      	subs	r0, #1
 80a186a:	4770      	bx	lr

080a186c <dynalib_user>:
 80a186c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a187c:	0000 0000 7453 6972 7370 5620 6c6f 6174     ....Strips Volta
 80a188c:	6567 003a 6553 646e 7265 4920 746e 7265     ge:.Sender Inter
 80a189c:	6566 6572 636e 2065 6f56 746c 6761 3a65     ference Voltage:
 80a18ac:	5200 6365 6965 6576 4920 746e 7265 6566     .Receive Interfe
 80a18bc:	6572 636e 2065 6f56 746c 6761 3a65 2c00     rence Voltage:.,
 80a18cc:	4f00 4d53 5300 4d49 5200 4d49 7300 7274     .OSM.SIM.RIM.str
 80a18dc:	7069 654d 7361 7275 0065 6573 646e 7265     ipMeasure.sender
 80a18ec:	6e49 4d74 6165 7573 6572 7200 6365 6e49     IntMeasure.recIn
 80a18fc:	4d74 6165 7573 6572 6100 6464 7453 6972     tMeasure.addStri
 80a190c:	0070 4441 0044 6572 6f6d 6576 7453 6972     p.ADD.removeStri
 80a191c:	0070 5553 0042 6572 4963 746e 654d 7361     p.SUB.recIntMeas
 80a192c:	7275 6d65 0000 0000                         urem....

080a1934 <_ZTVN5spark12NetworkClassE>:
	...
 80a193c:	0a21 080a 0a2b 080a 0a35 080a 0a3f 080a     !...+...5...?...
 80a194c:	0a49 080a 0a55 080a 0a61 080a 0a6d 080a     I...U...a...m...
 80a195c:	0a75 080a 0a7f 080a 0a89 080a               u...........

080a1968 <_ZTV8SPIClass>:
	...
 80a1970:	0aed 080a 0aef 080a                         ........

080a1978 <_ZTVN5spark9WiFiClassE>:
	...
 80a1980:	0bcd 080a 0bc3 080a 0bb9 080a 0b2b 080a     ............+...
 80a1990:	0bad 080a 0ba1 080a 0b95 080a 0b8d 080a     ................
 80a19a0:	0b83 080a 0b79 080a 0b35 080a               ....y...5...

080a19ac <_ZTV7TwoWire>:
	...
 80a19b4:	0bed 080a 0c37 080a 0c0f 080a 0bef 080a     ....7...........
 80a19c4:	0c17 080a 0c1f 080a 0c27 080a 0c2f 080a     ........'.../...

080a19d4 <_ZTV11USARTSerial>:
	...
 80a19dc:	0c71 080a 0cc1 080a 0ccf 080a 11c7 080a     q...............
 80a19ec:	0c85 080a 0ca7 080a 0c93 080a 0cbb 080a     ................
 80a19fc:	0c73 080a 0c77 080a                         s...w...

080a1a04 <_ZTV9USBSerial>:
	...
 80a1a0c:	0d9f 080a 0def 080a 0dfd 080a 11c7 080a     ................
 80a1a1c:	0ddb 080a 0da1 080a 0db7 080a 0de9 080a     ................
 80a1a2c:	0dcd 080a 0d9b 080a                         ........

080a1a34 <_ZTV9IPAddress>:
	...
 80a1a3c:	0f51 080a 0f41 080a 0f43 080a 005a 2b25     Q...A...C...Z.%+
 80a1a4c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a1a5c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a1a6c:	6974 656d 6200 7561 0064 6553 6972 6c61     time.baud.Serial
 80a1a7c:	5500 4253 6553 6972 6c61 0031 7974 6570     .USBSerial1.type
 80a1a8c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
 80a1a9c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
 80a1aac:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
 80a1abc:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
 80a1acc:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
 80a1adc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
 80a1aec:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a1afc:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a1b0c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 80a1b1c:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
 80a1b2c:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
 80a1b3c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a1b4c:	6e61 6369 6100 6c6c 0000 0000               anic.all....

080a1b58 <__sf_fake_stdin>:
	...

080a1b78 <__sf_fake_stdout>:
	...

080a1b98 <__sf_fake_stderr>:
	...
 80a1bb8:	0043                                        C.

080a1bba <link_const_variable_data_end>:
	...

080a1bbc <link_constructors_location>:
 80a1bbc:	080a061d 	.word	0x080a061d
 80a1bc0:	080a0ad9 	.word	0x080a0ad9
 80a1bc4:	080a0bd9 	.word	0x080a0bd9
 80a1bc8:	080a1181 	.word	0x080a1181
 80a1bcc:	080a119d 	.word	0x080a119d
 80a1bd0:	080a11b1 	.word	0x080a11b1
 80a1bd4:	080a135d 	.word	0x080a135d
 80a1bd8:	080a13b5 	.word	0x080a13b5
 80a1bdc:	080a13e5 	.word	0x080a13e5
 80a1be0:	080a1539 	.word	0x080a1539
 80a1be4:	080a15bd 	.word	0x080a15bd
 80a1be8:	080a1681 	.word	0x080a1681
 80a1bec:	080a1745 	.word	0x080a1745
