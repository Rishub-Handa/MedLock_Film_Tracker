
/home/zethuria/bin/nightingale/photon/testProject/testProject/target/1.4.4/photon/testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001704  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1720  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  080a1724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005e4  20000088  20000088  00030088  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a17ac  080a17ac  000217ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a17d4  080a17d4  000217d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009ef4c  00000000  00000000  000217d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e7be  00000000  00000000  000c0724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002098  00000000  00000000  000ceee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002481c  00000000  00000000  000d0f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000214fc  00000000  00000000  000f5796  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a5d05  00000000  00000000  00116c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001303a  00000000  00000000  001bc997  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003358  00000000  00000000  001cf9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b924  00000000  00000000  001d2d2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f971 	bl	80a1314 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f976 	bl	80a132a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1724 	.word	0x080a1724
 80a004c:	20000088 	.word	0x20000088
 80a0050:	20000088 	.word	0x20000088
 80a0054:	2000066c 	.word	0x2000066c
 80a0058:	2000066c 	.word	0x2000066c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fe35 	bl	80a0ccc <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a16ec 	.word	0x080a16ec
 80a0084:	080a1720 	.word	0x080a1720

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b898 	b.w	80a01bc <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f81f 	bl	80a00d0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bddb 	b.w	80a0c50 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 ba83 	b.w	80a05a4 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <__tcf_0>:
//OSM: stripMeasure      : RGB: RED
//SIM: senderIntMeasure  : RGB: YELLOW
//RIM: recIntMeasure     : RGB: CYAN
//ADD: addStrip          : RGB: BLUE
//SUB: removeStrip       :
String menuSelection[menuSelectionSize] = {"stripMeasure", "senderIntMeasure", "recIntMeasurem", "addStrip", "removeStrip"};
 80a00b0:	b538      	push	{r3, r4, r5, lr}
 80a00b2:	4d06      	ldr	r5, [pc, #24]	; (80a00cc <__tcf_0+0x1c>)
 80a00b4:	2400      	movs	r4, #0
 80a00b6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a00ba:	4428      	add	r0, r5
 80a00bc:	3c10      	subs	r4, #16
 80a00be:	f000 febc 	bl	80a0e3a <_ZN6StringD1Ev>
 80a00c2:	f114 0f50 	cmn.w	r4, #80	; 0x50
 80a00c6:	d1f6      	bne.n	80a00b6 <__tcf_0+0x6>
 80a00c8:	bd38      	pop	{r3, r4, r5, pc}
 80a00ca:	bf00      	nop
 80a00cc:	20000094 	.word	0x20000094

080a00d0 <loop>:
 80a00d0:	4770      	bx	lr
	...

080a00d4 <_Z18setupMeasureStripsv>:
* SETUP FUNCTIONS *
*******************
*/

void setupMeasureStrips()
{
 80a00d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    //Disable all tones
    noTone(senderSignalPin);
 80a00d8:	4e2a      	ldr	r6, [pc, #168]	; (80a0184 <_Z18setupMeasureStripsv+0xb0>)
    noTone(senderGroundPlate);
 80a00da:	4d2b      	ldr	r5, [pc, #172]	; (80a0188 <_Z18setupMeasureStripsv+0xb4>)

void setupMeasureStrips()
{

    //Disable all tones
    noTone(senderSignalPin);
 80a00dc:	7830      	ldrb	r0, [r6, #0]
    noTone(senderGroundPlate);
    noTone(recGroundPlate);
 80a00de:	4c2b      	ldr	r4, [pc, #172]	; (80a018c <_Z18setupMeasureStripsv+0xb8>)

void setupMeasureStrips()
{

    //Disable all tones
    noTone(senderSignalPin);
 80a00e0:	f000 fc31 	bl	80a0946 <noTone>
    noTone(senderGroundPlate);
 80a00e4:	7828      	ldrb	r0, [r5, #0]
 80a00e6:	f000 fc2e 	bl	80a0946 <noTone>
    noTone(recGroundPlate);
 80a00ea:	7820      	ldrb	r0, [r4, #0]
 80a00ec:	f000 fc2b 	bl	80a0946 <noTone>

    //Set direction of pins

    //Sender plates
    pinMode(senderSignalPin, OUTPUT);
 80a00f0:	8830      	ldrh	r0, [r6, #0]
 80a00f2:	2101      	movs	r1, #1
 80a00f4:	f000 ff86 	bl	80a1004 <pinMode>
    pinMode(senderGroundPlate, OUTPUT);
 80a00f8:	2101      	movs	r1, #1
 80a00fa:	8828      	ldrh	r0, [r5, #0]
 80a00fc:	f000 ff82 	bl	80a1004 <pinMode>

    //Sender circuit pins
    pinMode(senderInputGround, INPUT);
 80a0100:	4b23      	ldr	r3, [pc, #140]	; (80a0190 <_Z18setupMeasureStripsv+0xbc>)
    pinMode(senderCapGround, OUTPUT);
 80a0102:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80a01a4 <_Z18setupMeasureStripsv+0xd0>
    //Sender plates
    pinMode(senderSignalPin, OUTPUT);
    pinMode(senderGroundPlate, OUTPUT);

    //Sender circuit pins
    pinMode(senderInputGround, INPUT);
 80a0106:	8818      	ldrh	r0, [r3, #0]
 80a0108:	2100      	movs	r1, #0
 80a010a:	f000 ff7b 	bl	80a1004 <pinMode>
    pinMode(senderCapGround, OUTPUT);
 80a010e:	2101      	movs	r1, #1
 80a0110:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0114:	f000 ff76 	bl	80a1004 <pinMode>
    pinMode(senderVoltage, INPUT);
 80a0118:	4b1e      	ldr	r3, [pc, #120]	; (80a0194 <_Z18setupMeasureStripsv+0xc0>)
 80a011a:	2100      	movs	r1, #0
 80a011c:	8818      	ldrh	r0, [r3, #0]

    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
 80a011e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80a01a8 <_Z18setupMeasureStripsv+0xd4>
    pinMode(senderGroundPlate, OUTPUT);

    //Sender circuit pins
    pinMode(senderInputGround, INPUT);
    pinMode(senderCapGround, OUTPUT);
    pinMode(senderVoltage, INPUT);
 80a0122:	f000 ff6f 	bl	80a1004 <pinMode>
    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
    pinMode(recCapGround, OUTPUT);
 80a0126:	4f1c      	ldr	r7, [pc, #112]	; (80a0198 <_Z18setupMeasureStripsv+0xc4>)
    pinMode(senderInputGround, INPUT);
    pinMode(senderCapGround, OUTPUT);
    pinMode(senderVoltage, INPUT);

    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);
 80a0128:	2101      	movs	r1, #1
 80a012a:	8820      	ldrh	r0, [r4, #0]
 80a012c:	f000 ff6a 	bl	80a1004 <pinMode>

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
    pinMode(recCapGround, OUTPUT);
    pinMode(recVoltage, INPUT);
 80a0130:	4e1a      	ldr	r6, [pc, #104]	; (80a019c <_Z18setupMeasureStripsv+0xc8>)

    //Receiver plates
    pinMode(recGroundPlate, OUTPUT);

    //Receiver circuit pins
    pinMode(recInputGround, OUTPUT);
 80a0132:	2101      	movs	r1, #1
 80a0134:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0138:	f000 ff64 	bl	80a1004 <pinMode>
    pinMode(recCapGround, OUTPUT);
 80a013c:	2101      	movs	r1, #1
 80a013e:	8838      	ldrh	r0, [r7, #0]
 80a0140:	f000 ff60 	bl	80a1004 <pinMode>
    pinMode(recVoltage, INPUT);
 80a0144:	2100      	movs	r1, #0
 80a0146:	8830      	ldrh	r0, [r6, #0]
 80a0148:	f000 ff5c 	bl	80a1004 <pinMode>

    //Sender plates
    digitalWrite(senderGroundPlate, LOW);
 80a014c:	2100      	movs	r1, #0
 80a014e:	8828      	ldrh	r0, [r5, #0]
 80a0150:	f000 ff69 	bl	80a1026 <digitalWrite>

    //Sender circuit plates
    digitalWrite(senderCapGround, LOW);
 80a0154:	2100      	movs	r1, #0
 80a0156:	f8b9 0000 	ldrh.w	r0, [r9]
 80a015a:	f000 ff64 	bl	80a1026 <digitalWrite>

    //Receiver plates
    digitalWrite(recGroundPlate, LOW);
 80a015e:	2100      	movs	r1, #0
 80a0160:	8820      	ldrh	r0, [r4, #0]
 80a0162:	f000 ff60 	bl	80a1026 <digitalWrite>

    //Receiver circuit pins
    digitalWrite(recInputGround, LOW);
 80a0166:	2100      	movs	r1, #0
 80a0168:	f8b8 0000 	ldrh.w	r0, [r8]
 80a016c:	f000 ff5b 	bl	80a1026 <digitalWrite>
    digitalWrite(recCapGround, LOW);
 80a0170:	2100      	movs	r1, #0
 80a0172:	8838      	ldrh	r0, [r7, #0]
 80a0174:	f000 ff57 	bl	80a1026 <digitalWrite>

    currentADCPin = recVoltage;
 80a0178:	6832      	ldr	r2, [r6, #0]
 80a017a:	4b09      	ldr	r3, [pc, #36]	; (80a01a0 <_Z18setupMeasureStripsv+0xcc>)
 80a017c:	601a      	str	r2, [r3, #0]
 80a017e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0182:	bf00      	nop
 80a0184:	20000090 	.word	0x20000090
 80a0188:	20000010 	.word	0x20000010
 80a018c:	2000000c 	.word	0x2000000c
 80a0190:	2000001c 	.word	0x2000001c
 80a0194:	20000000 	.word	0x20000000
 80a0198:	20000004 	.word	0x20000004
 80a019c:	20000008 	.word	0x20000008
 80a01a0:	2000008c 	.word	0x2000008c
 80a01a4:	20000018 	.word	0x20000018
 80a01a8:	20000014 	.word	0x20000014

080a01ac <_Z12stripsSignali>:
*/

void stripsSignal(int inputFreq)
{

    tone(senderSignalPin, inputFreq, 0);
 80a01ac:	4b02      	ldr	r3, [pc, #8]	; (80a01b8 <_Z12stripsSignali+0xc>)
 80a01ae:	4601      	mov	r1, r0
 80a01b0:	2200      	movs	r2, #0
 80a01b2:	7818      	ldrb	r0, [r3, #0]
 80a01b4:	f000 bbb0 	b.w	80a0918 <tone>
 80a01b8:	20000090 	.word	0x20000090

080a01bc <setup>:
unsigned int buttonThreshold = 100;

unsigned int deltaMenuTime = 0;

void setup()
{
 80a01bc:	b508      	push	{r3, lr}

    //Serial out encoding
    Serial.begin(9600);
 80a01be:	f000 fc45 	bl	80a0a4c <_Z16_fetch_usbserialv>
 80a01c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01c6:	f000 fc27 	bl	80a0a18 <_ZN9USBSerial5beginEl>

    //Setup code for measuring strips between the plates
    setupMeasureStrips();
 80a01ca:	f7ff ff83 	bl	80a00d4 <_Z18setupMeasureStripsv>

    //Setup code for measuring interference from external capacitance on the receive plate
    //setupMeasureReceiveInterference();

    //Creates a square wave on the sender plate to measure strips inside
    stripsSignal(10000);
 80a01ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80a01d2:	f7ff ffeb 	bl	80a01ac <_Z12stripsSignali>

    //Creates a square wave on the receive ground plate to measure interference
    //receiveInterferenceSignal(10000);

    //If set to true the op amp has power, if set to false the op amp power is set to ground
}
 80a01d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    //Creates a square wave on the sender plate to measure strips inside
    stripsSignal(10000);

    //Enables controlling of RGB light
    RGB.control(true);
 80a01da:	2001      	movs	r0, #1
 80a01dc:	f000 bda8 	b.w	80a0d30 <_ZN8RGBClass7controlEb>

080a01e0 <_GLOBAL__sub_I_senderSignalPin>:
    else
    {

        return false;
    }
 80a01e0:	b510      	push	{r4, lr}
//OSM: stripMeasure      : RGB: RED
//SIM: senderIntMeasure  : RGB: YELLOW
//RIM: recIntMeasure     : RGB: CYAN
//ADD: addStrip          : RGB: BLUE
//SUB: removeStrip       :
String menuSelection[menuSelectionSize] = {"stripMeasure", "senderIntMeasure", "recIntMeasurem", "addStrip", "removeStrip"};
 80a01e2:	4c11      	ldr	r4, [pc, #68]	; (80a0228 <_GLOBAL__sub_I_senderSignalPin+0x48>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a01e4:	f000 f922 	bl	80a042c <HAL_Pin_Map>
 80a01e8:	4910      	ldr	r1, [pc, #64]	; (80a022c <_GLOBAL__sub_I_senderSignalPin+0x4c>)
 80a01ea:	4620      	mov	r0, r4
 80a01ec:	f000 fe6c 	bl	80a0ec8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01f0:	490f      	ldr	r1, [pc, #60]	; (80a0230 <_GLOBAL__sub_I_senderSignalPin+0x50>)
 80a01f2:	f104 0010 	add.w	r0, r4, #16
 80a01f6:	f000 fe67 	bl	80a0ec8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01fa:	490e      	ldr	r1, [pc, #56]	; (80a0234 <_GLOBAL__sub_I_senderSignalPin+0x54>)
 80a01fc:	f104 0020 	add.w	r0, r4, #32
 80a0200:	f000 fe62 	bl	80a0ec8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0204:	490c      	ldr	r1, [pc, #48]	; (80a0238 <_GLOBAL__sub_I_senderSignalPin+0x58>)
 80a0206:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80a020a:	f000 fe5d 	bl	80a0ec8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a020e:	490b      	ldr	r1, [pc, #44]	; (80a023c <_GLOBAL__sub_I_senderSignalPin+0x5c>)
 80a0210:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a0214:	f000 fe58 	bl	80a0ec8 <_ZN6StringC1EPK19__FlashStringHelper>
    else
    {

        return false;
    }
 80a0218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//OSM: stripMeasure      : RGB: RED
//SIM: senderIntMeasure  : RGB: YELLOW
//RIM: recIntMeasure     : RGB: CYAN
//ADD: addStrip          : RGB: BLUE
//SUB: removeStrip       :
String menuSelection[menuSelectionSize] = {"stripMeasure", "senderIntMeasure", "recIntMeasurem", "addStrip", "removeStrip"};
 80a021c:	4a08      	ldr	r2, [pc, #32]	; (80a0240 <_GLOBAL__sub_I_senderSignalPin+0x60>)
 80a021e:	4909      	ldr	r1, [pc, #36]	; (80a0244 <_GLOBAL__sub_I_senderSignalPin+0x64>)
 80a0220:	2000      	movs	r0, #0
 80a0222:	f000 bf19 	b.w	80a1058 <__aeabi_atexit>
 80a0226:	bf00      	nop
 80a0228:	20000094 	.word	0x20000094
 80a022c:	080a1409 	.word	0x080a1409
 80a0230:	080a1416 	.word	0x080a1416
 80a0234:	080a1452 	.word	0x080a1452
 80a0238:	080a1435 	.word	0x080a1435
 80a023c:	080a1442 	.word	0x080a1442
 80a0240:	20000088 	.word	0x20000088
 80a0244:	080a00b1 	.word	0x080a00b1

080a0248 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0248:	b508      	push	{r3, lr}
 80a024a:	4b02      	ldr	r3, [pc, #8]	; (80a0254 <inet_gethostbyname+0xc>)
 80a024c:	681b      	ldr	r3, [r3, #0]
 80a024e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0250:	9301      	str	r3, [sp, #4]
 80a0252:	bd08      	pop	{r3, pc}
 80a0254:	080601c0 	.word	0x080601c0

080a0258 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0258:	b508      	push	{r3, lr}
 80a025a:	4b02      	ldr	r3, [pc, #8]	; (80a0264 <HAL_USB_USART_Init+0xc>)
 80a025c:	681b      	ldr	r3, [r3, #0]
 80a025e:	681b      	ldr	r3, [r3, #0]
 80a0260:	9301      	str	r3, [sp, #4]
 80a0262:	bd08      	pop	{r3, pc}
 80a0264:	080601d8 	.word	0x080601d8

080a0268 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0268:	b508      	push	{r3, lr}
 80a026a:	4b02      	ldr	r3, [pc, #8]	; (80a0274 <HAL_USB_USART_Begin+0xc>)
 80a026c:	681b      	ldr	r3, [r3, #0]
 80a026e:	685b      	ldr	r3, [r3, #4]
 80a0270:	9301      	str	r3, [sp, #4]
 80a0272:	bd08      	pop	{r3, pc}
 80a0274:	080601d8 	.word	0x080601d8

080a0278 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0278:	b508      	push	{r3, lr}
 80a027a:	4b02      	ldr	r3, [pc, #8]	; (80a0284 <HAL_USB_USART_Available_Data+0xc>)
 80a027c:	681b      	ldr	r3, [r3, #0]
 80a027e:	691b      	ldr	r3, [r3, #16]
 80a0280:	9301      	str	r3, [sp, #4]
 80a0282:	bd08      	pop	{r3, pc}
 80a0284:	080601d8 	.word	0x080601d8

080a0288 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0288:	b508      	push	{r3, lr}
 80a028a:	4b02      	ldr	r3, [pc, #8]	; (80a0294 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a028c:	681b      	ldr	r3, [r3, #0]
 80a028e:	695b      	ldr	r3, [r3, #20]
 80a0290:	9301      	str	r3, [sp, #4]
 80a0292:	bd08      	pop	{r3, pc}
 80a0294:	080601d8 	.word	0x080601d8

080a0298 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0298:	b508      	push	{r3, lr}
 80a029a:	4b02      	ldr	r3, [pc, #8]	; (80a02a4 <HAL_USB_USART_Receive_Data+0xc>)
 80a029c:	681b      	ldr	r3, [r3, #0]
 80a029e:	699b      	ldr	r3, [r3, #24]
 80a02a0:	9301      	str	r3, [sp, #4]
 80a02a2:	bd08      	pop	{r3, pc}
 80a02a4:	080601d8 	.word	0x080601d8

080a02a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02a8:	b508      	push	{r3, lr}
 80a02aa:	4b02      	ldr	r3, [pc, #8]	; (80a02b4 <HAL_USB_USART_Send_Data+0xc>)
 80a02ac:	681b      	ldr	r3, [r3, #0]
 80a02ae:	69db      	ldr	r3, [r3, #28]
 80a02b0:	9301      	str	r3, [sp, #4]
 80a02b2:	bd08      	pop	{r3, pc}
 80a02b4:	080601d8 	.word	0x080601d8

080a02b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a02b8:	b508      	push	{r3, lr}
 80a02ba:	4b02      	ldr	r3, [pc, #8]	; (80a02c4 <HAL_USB_USART_Flush_Data+0xc>)
 80a02bc:	681b      	ldr	r3, [r3, #0]
 80a02be:	6a1b      	ldr	r3, [r3, #32]
 80a02c0:	9301      	str	r3, [sp, #4]
 80a02c2:	bd08      	pop	{r3, pc}
 80a02c4:	080601d8 	.word	0x080601d8

080a02c8 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
 80a02c8:	b508      	push	{r3, lr}
 80a02ca:	4b02      	ldr	r3, [pc, #8]	; (80a02d4 <HAL_Tone_Start+0xc>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	681b      	ldr	r3, [r3, #0]
 80a02d0:	9301      	str	r3, [sp, #4]
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	080601a8 	.word	0x080601a8

080a02d8 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <HAL_Tone_Stop+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	685b      	ldr	r3, [r3, #4]
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	080601a8 	.word	0x080601a8

080a02e8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b02      	ldr	r3, [pc, #8]	; (80a02f4 <HAL_I2C_Write_Data+0xc>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02f0:	9301      	str	r3, [sp, #4]
 80a02f2:	bd08      	pop	{r3, pc}
 80a02f4:	080601ac 	.word	0x080601ac

080a02f8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a02f8:	b508      	push	{r3, lr}
 80a02fa:	4b02      	ldr	r3, [pc, #8]	; (80a0304 <HAL_I2C_Available_Data+0xc>)
 80a02fc:	681b      	ldr	r3, [r3, #0]
 80a02fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0300:	9301      	str	r3, [sp, #4]
 80a0302:	bd08      	pop	{r3, pc}
 80a0304:	080601ac 	.word	0x080601ac

080a0308 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b02      	ldr	r3, [pc, #8]	; (80a0314 <HAL_I2C_Read_Data+0xc>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0310:	9301      	str	r3, [sp, #4]
 80a0312:	bd08      	pop	{r3, pc}
 80a0314:	080601ac 	.word	0x080601ac

080a0318 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0318:	b508      	push	{r3, lr}
 80a031a:	4b02      	ldr	r3, [pc, #8]	; (80a0324 <HAL_I2C_Peek_Data+0xc>)
 80a031c:	681b      	ldr	r3, [r3, #0]
 80a031e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0320:	9301      	str	r3, [sp, #4]
 80a0322:	bd08      	pop	{r3, pc}
 80a0324:	080601ac 	.word	0x080601ac

080a0328 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0328:	b508      	push	{r3, lr}
 80a032a:	4b02      	ldr	r3, [pc, #8]	; (80a0334 <HAL_I2C_Flush_Data+0xc>)
 80a032c:	681b      	ldr	r3, [r3, #0]
 80a032e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0330:	9301      	str	r3, [sp, #4]
 80a0332:	bd08      	pop	{r3, pc}
 80a0334:	080601ac 	.word	0x080601ac

080a0338 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0338:	b508      	push	{r3, lr}
 80a033a:	4b02      	ldr	r3, [pc, #8]	; (80a0344 <HAL_I2C_Is_Enabled+0xc>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	bd08      	pop	{r3, pc}
 80a0344:	080601ac 	.word	0x080601ac

080a0348 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b03      	ldr	r3, [pc, #12]	; (80a0358 <HAL_I2C_Init+0x10>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0352:	9301      	str	r3, [sp, #4]
 80a0354:	bd08      	pop	{r3, pc}
 80a0356:	0000      	.short	0x0000
 80a0358:	080601ac 	.word	0x080601ac

080a035c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b02      	ldr	r3, [pc, #8]	; (80a0368 <HAL_USART_Init+0xc>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	699b      	ldr	r3, [r3, #24]
 80a0364:	9301      	str	r3, [sp, #4]
 80a0366:	bd08      	pop	{r3, pc}
 80a0368:	080601c4 	.word	0x080601c4

080a036c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a036c:	b508      	push	{r3, lr}
 80a036e:	4b02      	ldr	r3, [pc, #8]	; (80a0378 <HAL_USART_Write_Data+0xc>)
 80a0370:	681b      	ldr	r3, [r3, #0]
 80a0372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0374:	9301      	str	r3, [sp, #4]
 80a0376:	bd08      	pop	{r3, pc}
 80a0378:	080601c4 	.word	0x080601c4

080a037c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a037c:	b508      	push	{r3, lr}
 80a037e:	4b02      	ldr	r3, [pc, #8]	; (80a0388 <HAL_USART_Available_Data+0xc>)
 80a0380:	681b      	ldr	r3, [r3, #0]
 80a0382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0384:	9301      	str	r3, [sp, #4]
 80a0386:	bd08      	pop	{r3, pc}
 80a0388:	080601c4 	.word	0x080601c4

080a038c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a038c:	b508      	push	{r3, lr}
 80a038e:	4b02      	ldr	r3, [pc, #8]	; (80a0398 <HAL_USART_Read_Data+0xc>)
 80a0390:	681b      	ldr	r3, [r3, #0]
 80a0392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0394:	9301      	str	r3, [sp, #4]
 80a0396:	bd08      	pop	{r3, pc}
 80a0398:	080601c4 	.word	0x080601c4

080a039c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b02      	ldr	r3, [pc, #8]	; (80a03a8 <HAL_USART_Peek_Data+0xc>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03a4:	9301      	str	r3, [sp, #4]
 80a03a6:	bd08      	pop	{r3, pc}
 80a03a8:	080601c4 	.word	0x080601c4

080a03ac <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a03ac:	b508      	push	{r3, lr}
 80a03ae:	4b02      	ldr	r3, [pc, #8]	; (80a03b8 <HAL_USART_Flush_Data+0xc>)
 80a03b0:	681b      	ldr	r3, [r3, #0]
 80a03b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03b4:	9301      	str	r3, [sp, #4]
 80a03b6:	bd08      	pop	{r3, pc}
 80a03b8:	080601c4 	.word	0x080601c4

080a03bc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a03bc:	b508      	push	{r3, lr}
 80a03be:	4b02      	ldr	r3, [pc, #8]	; (80a03c8 <HAL_USART_Is_Enabled+0xc>)
 80a03c0:	681b      	ldr	r3, [r3, #0]
 80a03c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a03c4:	9301      	str	r3, [sp, #4]
 80a03c6:	bd08      	pop	{r3, pc}
 80a03c8:	080601c4 	.word	0x080601c4

080a03cc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a03cc:	b508      	push	{r3, lr}
 80a03ce:	4b02      	ldr	r3, [pc, #8]	; (80a03d8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a03d0:	681b      	ldr	r3, [r3, #0]
 80a03d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a03d4:	9301      	str	r3, [sp, #4]
 80a03d6:	bd08      	pop	{r3, pc}
 80a03d8:	080601c4 	.word	0x080601c4

080a03dc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a03dc:	b508      	push	{r3, lr}
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <os_mutex_create+0xc>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	bd08      	pop	{r3, pc}
 80a03e8:	080601d0 	.word	0x080601d0

080a03ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a03ec:	b508      	push	{r3, lr}
 80a03ee:	4b02      	ldr	r3, [pc, #8]	; (80a03f8 <HAL_RNG_GetRandomNumber+0xc>)
 80a03f0:	681b      	ldr	r3, [r3, #0]
 80a03f2:	685b      	ldr	r3, [r3, #4]
 80a03f4:	9301      	str	r3, [sp, #4]
 80a03f6:	bd08      	pop	{r3, pc}
 80a03f8:	0806019c 	.word	0x0806019c

080a03fc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b02      	ldr	r3, [pc, #8]	; (80a0408 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	695b      	ldr	r3, [r3, #20]
 80a0404:	9301      	str	r3, [sp, #4]
 80a0406:	bd08      	pop	{r3, pc}
 80a0408:	0806019c 	.word	0x0806019c

080a040c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a040c:	b508      	push	{r3, lr}
 80a040e:	4b02      	ldr	r3, [pc, #8]	; (80a0418 <HAL_SPI_Init+0xc>)
 80a0410:	681b      	ldr	r3, [r3, #0]
 80a0412:	69db      	ldr	r3, [r3, #28]
 80a0414:	9301      	str	r3, [sp, #4]
 80a0416:	bd08      	pop	{r3, pc}
 80a0418:	080601b4 	.word	0x080601b4

080a041c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a041c:	b508      	push	{r3, lr}
 80a041e:	4b02      	ldr	r3, [pc, #8]	; (80a0428 <HAL_SPI_Is_Enabled+0xc>)
 80a0420:	681b      	ldr	r3, [r3, #0]
 80a0422:	6a1b      	ldr	r3, [r3, #32]
 80a0424:	9301      	str	r3, [sp, #4]
 80a0426:	bd08      	pop	{r3, pc}
 80a0428:	080601b4 	.word	0x080601b4

080a042c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a042c:	b508      	push	{r3, lr}
 80a042e:	4b02      	ldr	r3, [pc, #8]	; (80a0438 <HAL_Pin_Map+0xc>)
 80a0430:	681b      	ldr	r3, [r3, #0]
 80a0432:	681b      	ldr	r3, [r3, #0]
 80a0434:	9301      	str	r3, [sp, #4]
 80a0436:	bd08      	pop	{r3, pc}
 80a0438:	080601b0 	.word	0x080601b0

080a043c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a043c:	b508      	push	{r3, lr}
 80a043e:	4b02      	ldr	r3, [pc, #8]	; (80a0448 <HAL_Validate_Pin_Function+0xc>)
 80a0440:	681b      	ldr	r3, [r3, #0]
 80a0442:	685b      	ldr	r3, [r3, #4]
 80a0444:	9301      	str	r3, [sp, #4]
 80a0446:	bd08      	pop	{r3, pc}
 80a0448:	080601b0 	.word	0x080601b0

080a044c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a044c:	b508      	push	{r3, lr}
 80a044e:	4b02      	ldr	r3, [pc, #8]	; (80a0458 <HAL_Pin_Mode+0xc>)
 80a0450:	681b      	ldr	r3, [r3, #0]
 80a0452:	689b      	ldr	r3, [r3, #8]
 80a0454:	9301      	str	r3, [sp, #4]
 80a0456:	bd08      	pop	{r3, pc}
 80a0458:	080601b0 	.word	0x080601b0

080a045c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a045c:	b508      	push	{r3, lr}
 80a045e:	4b02      	ldr	r3, [pc, #8]	; (80a0468 <HAL_Get_Pin_Mode+0xc>)
 80a0460:	681b      	ldr	r3, [r3, #0]
 80a0462:	68db      	ldr	r3, [r3, #12]
 80a0464:	9301      	str	r3, [sp, #4]
 80a0466:	bd08      	pop	{r3, pc}
 80a0468:	080601b0 	.word	0x080601b0

080a046c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <HAL_GPIO_Write+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	691b      	ldr	r3, [r3, #16]
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	080601b0 	.word	0x080601b0

080a047c <LED_Signaling_Start>:

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <LED_Signaling_Start+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	689b      	ldr	r3, [r3, #8]
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080201a8 	.word	0x080201a8

080a048c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b02      	ldr	r3, [pc, #8]	; (80a0498 <LED_Signaling_Stop+0xc>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	68db      	ldr	r3, [r3, #12]
 80a0494:	9301      	str	r3, [sp, #4]
 80a0496:	bd08      	pop	{r3, pc}
 80a0498:	080201a8 	.word	0x080201a8

080a049c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a049c:	b508      	push	{r3, lr}
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <LED_RGB_IsOverRidden+0xc>)
 80a04a0:	681b      	ldr	r3, [r3, #0]
 80a04a2:	699b      	ldr	r3, [r3, #24]
 80a04a4:	9301      	str	r3, [sp, #4]
 80a04a6:	bd08      	pop	{r3, pc}
 80a04a8:	080201a8 	.word	0x080201a8

080a04ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b02      	ldr	r3, [pc, #8]	; (80a04b8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a04b4:	9301      	str	r3, [sp, #4]
 80a04b6:	bd08      	pop	{r3, pc}
 80a04b8:	080601cc 	.word	0x080601cc

080a04bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <network_connect+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	685b      	ldr	r3, [r3, #4]
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	080601c8 	.word	0x080601c8

080a04cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a04cc:	b508      	push	{r3, lr}
 80a04ce:	4b02      	ldr	r3, [pc, #8]	; (80a04d8 <network_connecting+0xc>)
 80a04d0:	681b      	ldr	r3, [r3, #0]
 80a04d2:	689b      	ldr	r3, [r3, #8]
 80a04d4:	9301      	str	r3, [sp, #4]
 80a04d6:	bd08      	pop	{r3, pc}
 80a04d8:	080601c8 	.word	0x080601c8

080a04dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a04dc:	b508      	push	{r3, lr}
 80a04de:	4b02      	ldr	r3, [pc, #8]	; (80a04e8 <network_disconnect+0xc>)
 80a04e0:	681b      	ldr	r3, [r3, #0]
 80a04e2:	68db      	ldr	r3, [r3, #12]
 80a04e4:	9301      	str	r3, [sp, #4]
 80a04e6:	bd08      	pop	{r3, pc}
 80a04e8:	080601c8 	.word	0x080601c8

080a04ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a04ec:	b508      	push	{r3, lr}
 80a04ee:	4b02      	ldr	r3, [pc, #8]	; (80a04f8 <network_ready+0xc>)
 80a04f0:	681b      	ldr	r3, [r3, #0]
 80a04f2:	691b      	ldr	r3, [r3, #16]
 80a04f4:	9301      	str	r3, [sp, #4]
 80a04f6:	bd08      	pop	{r3, pc}
 80a04f8:	080601c8 	.word	0x080601c8

080a04fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04fc:	b508      	push	{r3, lr}
 80a04fe:	4b02      	ldr	r3, [pc, #8]	; (80a0508 <network_on+0xc>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	695b      	ldr	r3, [r3, #20]
 80a0504:	9301      	str	r3, [sp, #4]
 80a0506:	bd08      	pop	{r3, pc}
 80a0508:	080601c8 	.word	0x080601c8

080a050c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a050c:	b508      	push	{r3, lr}
 80a050e:	4b02      	ldr	r3, [pc, #8]	; (80a0518 <network_off+0xc>)
 80a0510:	681b      	ldr	r3, [r3, #0]
 80a0512:	699b      	ldr	r3, [r3, #24]
 80a0514:	9301      	str	r3, [sp, #4]
 80a0516:	bd08      	pop	{r3, pc}
 80a0518:	080601c8 	.word	0x080601c8

080a051c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a051c:	b508      	push	{r3, lr}
 80a051e:	4b02      	ldr	r3, [pc, #8]	; (80a0528 <network_listen+0xc>)
 80a0520:	681b      	ldr	r3, [r3, #0]
 80a0522:	69db      	ldr	r3, [r3, #28]
 80a0524:	9301      	str	r3, [sp, #4]
 80a0526:	bd08      	pop	{r3, pc}
 80a0528:	080601c8 	.word	0x080601c8

080a052c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a052c:	b508      	push	{r3, lr}
 80a052e:	4b02      	ldr	r3, [pc, #8]	; (80a0538 <network_listening+0xc>)
 80a0530:	681b      	ldr	r3, [r3, #0]
 80a0532:	6a1b      	ldr	r3, [r3, #32]
 80a0534:	9301      	str	r3, [sp, #4]
 80a0536:	bd08      	pop	{r3, pc}
 80a0538:	080601c8 	.word	0x080601c8

080a053c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b02      	ldr	r3, [pc, #8]	; (80a0548 <network_set_listen_timeout+0xc>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0544:	9301      	str	r3, [sp, #4]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	080601c8 	.word	0x080601c8

080a054c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <network_get_listen_timeout+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601c8 	.word	0x080601c8

080a055c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <set_system_mode+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	685b      	ldr	r3, [r3, #4]
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601a4 	.word	0x080601a4

080a056c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b03      	ldr	r3, [pc, #12]	; (80a057c <system_ctrl_set_app_request_handler+0x10>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0576:	9301      	str	r3, [sp, #4]
 80a0578:	bd08      	pop	{r3, pc}
 80a057a:	0000      	.short	0x0000
 80a057c:	080601a4 	.word	0x080601a4

080a0580 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0580:	b508      	push	{r3, lr}
 80a0582:	4b03      	ldr	r3, [pc, #12]	; (80a0590 <system_ctrl_set_result+0x10>)
 80a0584:	681b      	ldr	r3, [r3, #0]
 80a0586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a058a:	9301      	str	r3, [sp, #4]
 80a058c:	bd08      	pop	{r3, pc}
 80a058e:	0000      	.short	0x0000
 80a0590:	080601a4 	.word	0x080601a4

080a0594 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <malloc+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	681b      	ldr	r3, [r3, #0]
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601a0 	.word	0x080601a0

080a05a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <free+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	685b      	ldr	r3, [r3, #4]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601a0 	.word	0x080601a0

080a05b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <realloc+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	689b      	ldr	r3, [r3, #8]
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601a0 	.word	0x080601a0

080a05c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a05c4:	2300      	movs	r3, #0
 80a05c6:	461a      	mov	r2, r3
 80a05c8:	6840      	ldr	r0, [r0, #4]
 80a05ca:	f7ff bf77 	b.w	80a04bc <network_connect>

080a05ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a05ce:	2200      	movs	r2, #0
 80a05d0:	2102      	movs	r1, #2
 80a05d2:	6840      	ldr	r0, [r0, #4]
 80a05d4:	f7ff bf82 	b.w	80a04dc <network_disconnect>

080a05d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a05d8:	2200      	movs	r2, #0
 80a05da:	4611      	mov	r1, r2
 80a05dc:	6840      	ldr	r0, [r0, #4]
 80a05de:	f7ff bf75 	b.w	80a04cc <network_connecting>

080a05e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a05e2:	2200      	movs	r2, #0
 80a05e4:	4611      	mov	r1, r2
 80a05e6:	6840      	ldr	r0, [r0, #4]
 80a05e8:	f7ff bf80 	b.w	80a04ec <network_ready>

080a05ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a05ec:	2300      	movs	r3, #0
 80a05ee:	461a      	mov	r2, r3
 80a05f0:	4619      	mov	r1, r3
 80a05f2:	6840      	ldr	r0, [r0, #4]
 80a05f4:	f7ff bf82 	b.w	80a04fc <network_on>

080a05f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a05f8:	2300      	movs	r3, #0
 80a05fa:	461a      	mov	r2, r3
 80a05fc:	4619      	mov	r1, r3
 80a05fe:	6840      	ldr	r0, [r0, #4]
 80a0600:	f7ff bf84 	b.w	80a050c <network_off>

080a0604 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0604:	2200      	movs	r2, #0
 80a0606:	f081 0101 	eor.w	r1, r1, #1
 80a060a:	6840      	ldr	r0, [r0, #4]
 80a060c:	f7ff bf86 	b.w	80a051c <network_listen>

080a0610 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0610:	2200      	movs	r2, #0
 80a0612:	6840      	ldr	r0, [r0, #4]
 80a0614:	f7ff bf92 	b.w	80a053c <network_set_listen_timeout>

080a0618 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0618:	2200      	movs	r2, #0
 80a061a:	4611      	mov	r1, r2
 80a061c:	6840      	ldr	r0, [r0, #4]
 80a061e:	f7ff bf95 	b.w	80a054c <network_get_listen_timeout>

080a0622 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0622:	2200      	movs	r2, #0
 80a0624:	4611      	mov	r1, r2
 80a0626:	6840      	ldr	r0, [r0, #4]
 80a0628:	f7ff bf80 	b.w	80a052c <network_listening>

080a062c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a062c:	b570      	push	{r4, r5, r6, lr}
 80a062e:	4616      	mov	r6, r2
 80a0630:	b08e      	sub	sp, #56	; 0x38
 80a0632:	4604      	mov	r4, r0
    IPAddress addr;
 80a0634:	a808      	add	r0, sp, #32
 80a0636:	f000 fa8d 	bl	80a0b54 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a063a:	2211      	movs	r2, #17
 80a063c:	2100      	movs	r1, #0
 80a063e:	a803      	add	r0, sp, #12
 80a0640:	f000 fe73 	bl	80a132a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0644:	4630      	mov	r0, r6
 80a0646:	f000 fea1 	bl	80a138c <strlen>
 80a064a:	2500      	movs	r5, #0
 80a064c:	4b0a      	ldr	r3, [pc, #40]	; (80a0678 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a064e:	9500      	str	r5, [sp, #0]
 80a0650:	b281      	uxth	r1, r0
 80a0652:	685b      	ldr	r3, [r3, #4]
 80a0654:	aa03      	add	r2, sp, #12
 80a0656:	4630      	mov	r0, r6
 80a0658:	f7ff fdf6 	bl	80a0248 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a065c:	b120      	cbz	r0, 80a0668 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a065e:	4629      	mov	r1, r5
 80a0660:	4620      	mov	r0, r4
 80a0662:	f000 fa97 	bl	80a0b94 <_ZN9IPAddressC1Em>
 80a0666:	e003      	b.n	80a0670 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0668:	a903      	add	r1, sp, #12
 80a066a:	4620      	mov	r0, r4
 80a066c:	f000 fa80 	bl	80a0b70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0670:	4620      	mov	r0, r4
 80a0672:	b00e      	add	sp, #56	; 0x38
 80a0674:	bd70      	pop	{r4, r5, r6, pc}
 80a0676:	bf00      	nop
 80a0678:	200000ec 	.word	0x200000ec

080a067c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a067c:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a067e:	4a03      	ldr	r2, [pc, #12]	; (80a068c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0680:	601a      	str	r2, [r3, #0]
 80a0682:	2200      	movs	r2, #0
 80a0684:	605a      	str	r2, [r3, #4]
 80a0686:	4770      	bx	lr
 80a0688:	200000e4 	.word	0x200000e4
 80a068c:	080a146c 	.word	0x080a146c

080a0690 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0690:	4770      	bx	lr

080a0692 <_ZN8SPIClassD0Ev>:
 80a0692:	b510      	push	{r4, lr}
 80a0694:	4604      	mov	r4, r0
 80a0696:	2110      	movs	r1, #16
 80a0698:	f000 fce3 	bl	80a1062 <_ZdlPvj>
 80a069c:	4620      	mov	r0, r4
 80a069e:	bd10      	pop	{r4, pc}

080a06a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a06a0:	b570      	push	{r4, r5, r6, lr}
 80a06a2:	4604      	mov	r4, r0
 80a06a4:	460e      	mov	r6, r1
 80a06a6:	4b07      	ldr	r3, [pc, #28]	; (80a06c4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a06a8:	2500      	movs	r5, #0
 80a06aa:	6003      	str	r3, [r0, #0]
 80a06ac:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a06b0:	f7ff fe94 	bl	80a03dc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a06b4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a06b6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a06b8:	f7ff fea8 	bl	80a040c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a06bc:	60a5      	str	r5, [r4, #8]
}
 80a06be:	4620      	mov	r0, r4
 80a06c0:	bd70      	pop	{r4, r5, r6, pc}
 80a06c2:	bf00      	nop
 80a06c4:	080a14a0 	.word	0x080a14a0

080a06c8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a06c8:	7900      	ldrb	r0, [r0, #4]
 80a06ca:	f7ff bea7 	b.w	80a041c <HAL_SPI_Is_Enabled>

080a06ce <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a06ce:	2200      	movs	r2, #0
 80a06d0:	4611      	mov	r1, r2
 80a06d2:	6840      	ldr	r0, [r0, #4]
 80a06d4:	f7ff bf0a 	b.w	80a04ec <network_ready>

080a06d8 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a06d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a06da:	4616      	mov	r6, r2
 80a06dc:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a06de:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a06e0:	460f      	mov	r7, r1
 80a06e2:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a06e4:	2100      	movs	r1, #0
 80a06e6:	a803      	add	r0, sp, #12
 80a06e8:	f000 fe1f 	bl	80a132a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a06ec:	4630      	mov	r0, r6
 80a06ee:	f000 fe4d 	bl	80a138c <strlen>
 80a06f2:	2500      	movs	r5, #0
 80a06f4:	9500      	str	r5, [sp, #0]
 80a06f6:	b281      	uxth	r1, r0
 80a06f8:	687b      	ldr	r3, [r7, #4]
 80a06fa:	aa03      	add	r2, sp, #12
 80a06fc:	4630      	mov	r0, r6
 80a06fe:	f7ff fda3 	bl	80a0248 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0702:	b120      	cbz	r0, 80a070e <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0704:	4629      	mov	r1, r5
 80a0706:	4620      	mov	r0, r4
 80a0708:	f000 fa44 	bl	80a0b94 <_ZN9IPAddressC1Em>
 80a070c:	e003      	b.n	80a0716 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a070e:	a903      	add	r1, sp, #12
 80a0710:	4620      	mov	r0, r4
 80a0712:	f000 fa2d 	bl	80a0b70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0716:	4620      	mov	r0, r4
 80a0718:	b009      	add	sp, #36	; 0x24
 80a071a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a071c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a071c:	2200      	movs	r2, #0
 80a071e:	4611      	mov	r1, r2
 80a0720:	6840      	ldr	r0, [r0, #4]
 80a0722:	f7ff bf03 	b.w	80a052c <network_listening>

080a0726 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0726:	2200      	movs	r2, #0
 80a0728:	4611      	mov	r1, r2
 80a072a:	6840      	ldr	r0, [r0, #4]
 80a072c:	f7ff bf0e 	b.w	80a054c <network_get_listen_timeout>

080a0730 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0730:	2200      	movs	r2, #0
 80a0732:	6840      	ldr	r0, [r0, #4]
 80a0734:	f7ff bf02 	b.w	80a053c <network_set_listen_timeout>

080a0738 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0738:	2200      	movs	r2, #0
 80a073a:	f081 0101 	eor.w	r1, r1, #1
 80a073e:	6840      	ldr	r0, [r0, #4]
 80a0740:	f7ff beec 	b.w	80a051c <network_listen>

080a0744 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0744:	2300      	movs	r3, #0
 80a0746:	461a      	mov	r2, r3
 80a0748:	4619      	mov	r1, r3
 80a074a:	6840      	ldr	r0, [r0, #4]
 80a074c:	f7ff bede 	b.w	80a050c <network_off>

080a0750 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0750:	2300      	movs	r3, #0
 80a0752:	461a      	mov	r2, r3
 80a0754:	4619      	mov	r1, r3
 80a0756:	6840      	ldr	r0, [r0, #4]
 80a0758:	f7ff bed0 	b.w	80a04fc <network_on>

080a075c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a075c:	2200      	movs	r2, #0
 80a075e:	4611      	mov	r1, r2
 80a0760:	6840      	ldr	r0, [r0, #4]
 80a0762:	f7ff beb3 	b.w	80a04cc <network_connecting>

080a0766 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0766:	2200      	movs	r2, #0
 80a0768:	2102      	movs	r1, #2
 80a076a:	6840      	ldr	r0, [r0, #4]
 80a076c:	f7ff beb6 	b.w	80a04dc <network_disconnect>

080a0770 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0770:	2300      	movs	r3, #0
 80a0772:	461a      	mov	r2, r3
 80a0774:	6840      	ldr	r0, [r0, #4]
 80a0776:	f7ff bea1 	b.w	80a04bc <network_connect>
	...

080a077c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a077c:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a077e:	2204      	movs	r2, #4
 80a0780:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0782:	4a02      	ldr	r2, [pc, #8]	; (80a078c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0784:	601a      	str	r2, [r3, #0]
 80a0786:	4770      	bx	lr
 80a0788:	200000ec 	.word	0x200000ec
 80a078c:	080a14b0 	.word	0x080a14b0

080a0790 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0790:	4770      	bx	lr

080a0792 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0794:	4606      	mov	r6, r0
 80a0796:	4615      	mov	r5, r2
 80a0798:	460c      	mov	r4, r1
 80a079a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a079c:	42bc      	cmp	r4, r7
 80a079e:	d006      	beq.n	80a07ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a07a0:	6833      	ldr	r3, [r6, #0]
 80a07a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a07a6:	689b      	ldr	r3, [r3, #8]
 80a07a8:	4630      	mov	r0, r6
 80a07aa:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a07ac:	e7f6      	b.n	80a079c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a07ae:	4628      	mov	r0, r5
 80a07b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a07b2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a07b2:	2200      	movs	r2, #0
 80a07b4:	7c00      	ldrb	r0, [r0, #16]
 80a07b6:	f7ff bd97 	b.w	80a02e8 <HAL_I2C_Write_Data>

080a07ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a07ba:	2100      	movs	r1, #0
 80a07bc:	7c00      	ldrb	r0, [r0, #16]
 80a07be:	f7ff bd9b 	b.w	80a02f8 <HAL_I2C_Available_Data>

080a07c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a07c2:	2100      	movs	r1, #0
 80a07c4:	7c00      	ldrb	r0, [r0, #16]
 80a07c6:	f7ff bd9f 	b.w	80a0308 <HAL_I2C_Read_Data>

080a07ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a07ca:	2100      	movs	r1, #0
 80a07cc:	7c00      	ldrb	r0, [r0, #16]
 80a07ce:	f7ff bda3 	b.w	80a0318 <HAL_I2C_Peek_Data>

080a07d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a07d2:	2100      	movs	r1, #0
 80a07d4:	7c00      	ldrb	r0, [r0, #16]
 80a07d6:	f7ff bda7 	b.w	80a0328 <HAL_I2C_Flush_Data>

080a07da <_ZN7TwoWireD0Ev>:
 80a07da:	b510      	push	{r4, lr}
 80a07dc:	4604      	mov	r4, r0
 80a07de:	2114      	movs	r1, #20
 80a07e0:	f000 fc3f 	bl	80a1062 <_ZdlPvj>
 80a07e4:	4620      	mov	r0, r4
 80a07e6:	bd10      	pop	{r4, pc}

080a07e8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a07e8:	b510      	push	{r4, lr}
 80a07ea:	4604      	mov	r4, r0
 80a07ec:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a07ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a07f2:	60a3      	str	r3, [r4, #8]
 80a07f4:	4b04      	ldr	r3, [pc, #16]	; (80a0808 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a07f6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a07f8:	7420      	strb	r0, [r4, #16]
 80a07fa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a07fc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a07fe:	f7ff fda3 	bl	80a0348 <HAL_I2C_Init>

}
 80a0802:	4620      	mov	r0, r4
 80a0804:	bd10      	pop	{r4, pc}
 80a0806:	bf00      	nop
 80a0808:	080a14e4 	.word	0x080a14e4

080a080c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a080c:	2100      	movs	r1, #0
 80a080e:	7c00      	ldrb	r0, [r0, #16]
 80a0810:	f7ff bd92 	b.w	80a0338 <HAL_I2C_Is_Enabled>

080a0814 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0814:	4770      	bx	lr

080a0816 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0816:	7441      	strb	r1, [r0, #17]
 80a0818:	4770      	bx	lr

080a081a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a081a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a081c:	7c00      	ldrb	r0, [r0, #16]
 80a081e:	f7ff fdd5 	bl	80a03cc <HAL_USART_Available_Data_For_Write>
}
 80a0822:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0826:	bd08      	pop	{r3, pc}

080a0828 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0828:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a082a:	7c00      	ldrb	r0, [r0, #16]
 80a082c:	f7ff fda6 	bl	80a037c <HAL_USART_Available_Data>
}
 80a0830:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0834:	bd08      	pop	{r3, pc}

080a0836 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0836:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0838:	7c00      	ldrb	r0, [r0, #16]
 80a083a:	f7ff fdaf 	bl	80a039c <HAL_USART_Peek_Data>
}
 80a083e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0842:	bf28      	it	cs
 80a0844:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0848:	bd08      	pop	{r3, pc}

080a084a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a084a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a084c:	7c00      	ldrb	r0, [r0, #16]
 80a084e:	f7ff fd9d 	bl	80a038c <HAL_USART_Read_Data>
}
 80a0852:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0856:	bf28      	it	cs
 80a0858:	f04f 30ff 	movcs.w	r0, #4294967295
 80a085c:	bd08      	pop	{r3, pc}

080a085e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a085e:	7c00      	ldrb	r0, [r0, #16]
 80a0860:	f7ff bda4 	b.w	80a03ac <HAL_USART_Flush_Data>

080a0864 <_ZN11USARTSerialD0Ev>:
 80a0864:	b510      	push	{r4, lr}
 80a0866:	4604      	mov	r4, r0
 80a0868:	2114      	movs	r1, #20
 80a086a:	f000 fbfa 	bl	80a1062 <_ZdlPvj>
 80a086e:	4620      	mov	r0, r4
 80a0870:	bd10      	pop	{r4, pc}

080a0872 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0872:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0874:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0876:	4604      	mov	r4, r0
 80a0878:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a087a:	b925      	cbnz	r5, 80a0886 <_ZN11USARTSerial5writeEh+0x14>
 80a087c:	7c00      	ldrb	r0, [r0, #16]
 80a087e:	f7ff fda5 	bl	80a03cc <HAL_USART_Available_Data_For_Write>
 80a0882:	2800      	cmp	r0, #0
 80a0884:	dd05      	ble.n	80a0892 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0886:	4631      	mov	r1, r6
 80a0888:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a088a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a088e:	f7ff bd6d 	b.w	80a036c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0892:	4628      	mov	r0, r5
 80a0894:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0898 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0898:	b510      	push	{r4, lr}
 80a089a:	4604      	mov	r4, r0
 80a089c:	4608      	mov	r0, r1
 80a089e:	4611      	mov	r1, r2
 80a08a0:	2200      	movs	r2, #0
 80a08a2:	6062      	str	r2, [r4, #4]
 80a08a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a08a8:	60a2      	str	r2, [r4, #8]
 80a08aa:	4a05      	ldr	r2, [pc, #20]	; (80a08c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a08ac:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a08ae:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a08b0:	2201      	movs	r2, #1
 80a08b2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a08b4:	461a      	mov	r2, r3
 80a08b6:	f7ff fd51 	bl	80a035c <HAL_USART_Init>
}
 80a08ba:	4620      	mov	r0, r4
 80a08bc:	bd10      	pop	{r4, pc}
 80a08be:	bf00      	nop
 80a08c0:	080a150c 	.word	0x080a150c

080a08c4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a08c4:	7c00      	ldrb	r0, [r0, #16]
 80a08c6:	f7ff bd79 	b.w	80a03bc <HAL_USART_Is_Enabled>
	...

080a08cc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a08cc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a08ce:	4d0c      	ldr	r5, [pc, #48]	; (80a0900 <_Z22__fetch_global_Serial1v+0x34>)
 80a08d0:	6829      	ldr	r1, [r5, #0]
 80a08d2:	f011 0401 	ands.w	r4, r1, #1
 80a08d6:	d111      	bne.n	80a08fc <_Z22__fetch_global_Serial1v+0x30>
 80a08d8:	4628      	mov	r0, r5
 80a08da:	f7ff fbe0 	bl	80a009e <__cxa_guard_acquire>
 80a08de:	b168      	cbz	r0, 80a08fc <_Z22__fetch_global_Serial1v+0x30>
 80a08e0:	4a08      	ldr	r2, [pc, #32]	; (80a0904 <_Z22__fetch_global_Serial1v+0x38>)
 80a08e2:	4621      	mov	r1, r4
 80a08e4:	4b08      	ldr	r3, [pc, #32]	; (80a0908 <_Z22__fetch_global_Serial1v+0x3c>)
 80a08e6:	4809      	ldr	r0, [pc, #36]	; (80a090c <_Z22__fetch_global_Serial1v+0x40>)
 80a08e8:	f7ff ffd6 	bl	80a0898 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a08ec:	4628      	mov	r0, r5
 80a08ee:	f7ff fbdb 	bl	80a00a8 <__cxa_guard_release>
 80a08f2:	4a07      	ldr	r2, [pc, #28]	; (80a0910 <_Z22__fetch_global_Serial1v+0x44>)
 80a08f4:	4907      	ldr	r1, [pc, #28]	; (80a0914 <_Z22__fetch_global_Serial1v+0x48>)
 80a08f6:	4805      	ldr	r0, [pc, #20]	; (80a090c <_Z22__fetch_global_Serial1v+0x40>)
 80a08f8:	f000 fbae 	bl	80a1058 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a08fc:	4803      	ldr	r0, [pc, #12]	; (80a090c <_Z22__fetch_global_Serial1v+0x40>)
 80a08fe:	bd38      	pop	{r3, r4, r5, pc}
 80a0900:	2000018c 	.word	0x2000018c
 80a0904:	20000190 	.word	0x20000190
 80a0908:	20000108 	.word	0x20000108
 80a090c:	200000f4 	.word	0x200000f4
 80a0910:	20000088 	.word	0x20000088
 80a0914:	080a0815 	.word	0x080a0815

080a0918 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a0918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a091a:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a091c:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a091e:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a0920:	460e      	mov	r6, r1
 80a0922:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a0924:	f000 fb4a 	bl	80a0fbc <pinAvailable>
 80a0928:	b160      	cbz	r0, 80a0944 <tone+0x2c>
 80a092a:	2102      	movs	r1, #2
 80a092c:	4628      	mov	r0, r5
 80a092e:	f7ff fd85 	bl	80a043c <HAL_Validate_Pin_Function>
 80a0932:	2802      	cmp	r0, #2
 80a0934:	d106      	bne.n	80a0944 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
 80a0936:	463a      	mov	r2, r7
 80a0938:	4631      	mov	r1, r6
 80a093a:	4620      	mov	r0, r4
    }
}
 80a093c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
 80a0940:	f7ff bcc2 	b.w	80a02c8 <HAL_Tone_Start>
 80a0944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0946 <noTone>:
    }
}

void noTone(uint8_t pin)
{
 80a0946:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a0948:	b285      	uxth	r5, r0
        HAL_Tone_Start(pin, frequency, duration);
    }
}

void noTone(uint8_t pin)
{
 80a094a:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a094c:	4628      	mov	r0, r5
 80a094e:	f000 fb35 	bl	80a0fbc <pinAvailable>
 80a0952:	b150      	cbz	r0, 80a096a <noTone+0x24>
 80a0954:	2102      	movs	r1, #2
 80a0956:	4628      	mov	r0, r5
 80a0958:	f7ff fd70 	bl	80a043c <HAL_Validate_Pin_Function>
 80a095c:	2802      	cmp	r0, #2
 80a095e:	d104      	bne.n	80a096a <noTone+0x24>
        HAL_Tone_Stop(pin);
 80a0960:	4620      	mov	r0, r4
    }
}
 80a0962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void noTone(uint8_t pin)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Stop(pin);
 80a0966:	f7ff bcb7 	b.w	80a02d8 <HAL_Tone_Stop>
 80a096a:	bd38      	pop	{r3, r4, r5, pc}

080a096c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a096c:	7441      	strb	r1, [r0, #17]
 80a096e:	4770      	bx	lr

080a0970 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0970:	4770      	bx	lr

080a0972 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0972:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0974:	2100      	movs	r1, #0
 80a0976:	7c00      	ldrb	r0, [r0, #16]
 80a0978:	f7ff fc8e 	bl	80a0298 <HAL_USB_USART_Receive_Data>
}
 80a097c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0980:	bf28      	it	cs
 80a0982:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0986:	bd08      	pop	{r3, pc}

080a0988 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0988:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a098a:	2101      	movs	r1, #1
 80a098c:	7c00      	ldrb	r0, [r0, #16]
 80a098e:	f7ff fc83 	bl	80a0298 <HAL_USB_USART_Receive_Data>
}
 80a0992:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0996:	bf28      	it	cs
 80a0998:	f04f 30ff 	movcs.w	r0, #4294967295
 80a099c:	bd08      	pop	{r3, pc}

080a099e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a099e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a09a0:	7c00      	ldrb	r0, [r0, #16]
 80a09a2:	f7ff fc71 	bl	80a0288 <HAL_USB_USART_Available_Data_For_Write>
}
 80a09a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a09aa:	bd08      	pop	{r3, pc}

080a09ac <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a09ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a09ae:	7c00      	ldrb	r0, [r0, #16]
 80a09b0:	f7ff fc62 	bl	80a0278 <HAL_USB_USART_Available_Data>
}
 80a09b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a09b8:	bd08      	pop	{r3, pc}

080a09ba <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a09ba:	7c00      	ldrb	r0, [r0, #16]
 80a09bc:	f7ff bc7c 	b.w	80a02b8 <HAL_USB_USART_Flush_Data>

080a09c0 <_ZN9USBSerialD0Ev>:
 80a09c0:	b510      	push	{r4, lr}
 80a09c2:	4604      	mov	r4, r0
 80a09c4:	2114      	movs	r1, #20
 80a09c6:	f000 fb4c 	bl	80a1062 <_ZdlPvj>
 80a09ca:	4620      	mov	r0, r4
 80a09cc:	bd10      	pop	{r4, pc}

080a09ce <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a09ce:	b538      	push	{r3, r4, r5, lr}
 80a09d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a09d2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a09d4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a09d6:	f7ff fc57 	bl	80a0288 <HAL_USB_USART_Available_Data_For_Write>
 80a09da:	2800      	cmp	r0, #0
 80a09dc:	dc01      	bgt.n	80a09e2 <_ZN9USBSerial5writeEh+0x14>
 80a09de:	7c60      	ldrb	r0, [r4, #17]
 80a09e0:	b128      	cbz	r0, 80a09ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a09e2:	4629      	mov	r1, r5
 80a09e4:	7c20      	ldrb	r0, [r4, #16]
 80a09e6:	f7ff fc5f 	bl	80a02a8 <HAL_USB_USART_Send_Data>
 80a09ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a09ee:	bd38      	pop	{r3, r4, r5, pc}

080a09f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a09f0:	b510      	push	{r4, lr}
 80a09f2:	4604      	mov	r4, r0
 80a09f4:	2300      	movs	r3, #0
 80a09f6:	6063      	str	r3, [r4, #4]
 80a09f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a09fc:	60a3      	str	r3, [r4, #8]
 80a09fe:	4b05      	ldr	r3, [pc, #20]	; (80a0a14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0a00:	4608      	mov	r0, r1
 80a0a02:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0a04:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0a06:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0a08:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0a0a:	4611      	mov	r1, r2
 80a0a0c:	f7ff fc24 	bl	80a0258 <HAL_USB_USART_Init>
}
 80a0a10:	4620      	mov	r0, r4
 80a0a12:	bd10      	pop	{r4, pc}
 80a0a14:	080a153c 	.word	0x080a153c

080a0a18 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0a18:	2200      	movs	r2, #0
 80a0a1a:	7c00      	ldrb	r0, [r0, #16]
 80a0a1c:	f7ff bc24 	b.w	80a0268 <HAL_USB_USART_Begin>

080a0a20 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0a20:	b510      	push	{r4, lr}
 80a0a22:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a24:	2214      	movs	r2, #20
 80a0a26:	2100      	movs	r1, #0
 80a0a28:	f000 fc7f 	bl	80a132a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0a2c:	4b05      	ldr	r3, [pc, #20]	; (80a0a44 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0a2e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0a30:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0a32:	4b05      	ldr	r3, [pc, #20]	; (80a0a48 <_Z19acquireSerialBufferv+0x28>)
 80a0a34:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a36:	f240 1301 	movw	r3, #257	; 0x101
 80a0a3a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a3c:	2381      	movs	r3, #129	; 0x81
 80a0a3e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0a40:	bd10      	pop	{r4, pc}
 80a0a42:	bf00      	nop
 80a0a44:	20000299 	.word	0x20000299
 80a0a48:	20000218 	.word	0x20000218

080a0a4c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0a4c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0a4e:	4d0e      	ldr	r5, [pc, #56]	; (80a0a88 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0a50:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0a52:	a801      	add	r0, sp, #4
 80a0a54:	f7ff ffe4 	bl	80a0a20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0a58:	6829      	ldr	r1, [r5, #0]
 80a0a5a:	f011 0401 	ands.w	r4, r1, #1
 80a0a5e:	d110      	bne.n	80a0a82 <_Z16_fetch_usbserialv+0x36>
 80a0a60:	4628      	mov	r0, r5
 80a0a62:	f7ff fb1c 	bl	80a009e <__cxa_guard_acquire>
 80a0a66:	b160      	cbz	r0, 80a0a82 <_Z16_fetch_usbserialv+0x36>
 80a0a68:	aa01      	add	r2, sp, #4
 80a0a6a:	4621      	mov	r1, r4
 80a0a6c:	4807      	ldr	r0, [pc, #28]	; (80a0a8c <_Z16_fetch_usbserialv+0x40>)
 80a0a6e:	f7ff ffbf 	bl	80a09f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a72:	4628      	mov	r0, r5
 80a0a74:	f7ff fb18 	bl	80a00a8 <__cxa_guard_release>
 80a0a78:	4a05      	ldr	r2, [pc, #20]	; (80a0a90 <_Z16_fetch_usbserialv+0x44>)
 80a0a7a:	4906      	ldr	r1, [pc, #24]	; (80a0a94 <_Z16_fetch_usbserialv+0x48>)
 80a0a7c:	4803      	ldr	r0, [pc, #12]	; (80a0a8c <_Z16_fetch_usbserialv+0x40>)
 80a0a7e:	f000 faeb 	bl	80a1058 <__aeabi_atexit>
	return _usbserial;
}
 80a0a82:	4802      	ldr	r0, [pc, #8]	; (80a0a8c <_Z16_fetch_usbserialv+0x40>)
 80a0a84:	b007      	add	sp, #28
 80a0a86:	bd30      	pop	{r4, r5, pc}
 80a0a88:	20000214 	.word	0x20000214
 80a0a8c:	2000039c 	.word	0x2000039c
 80a0a90:	20000088 	.word	0x20000088
 80a0a94:	080a0971 	.word	0x080a0971

080a0a98 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0a98:	b510      	push	{r4, lr}
 80a0a9a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a9c:	2214      	movs	r2, #20
 80a0a9e:	2100      	movs	r1, #0
 80a0aa0:	f000 fc43 	bl	80a132a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0aa4:	4b05      	ldr	r3, [pc, #20]	; (80a0abc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0aa6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0aa8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0aaa:	4b05      	ldr	r3, [pc, #20]	; (80a0ac0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0aac:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0aae:	f240 1301 	movw	r3, #257	; 0x101
 80a0ab2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0ab4:	2381      	movs	r3, #129	; 0x81
 80a0ab6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0ab8:	bd10      	pop	{r4, pc}
 80a0aba:	bf00      	nop
 80a0abc:	2000044c 	.word	0x2000044c
 80a0ac0:	200003b4 	.word	0x200003b4

080a0ac4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0ac4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0ac6:	4c0e      	ldr	r4, [pc, #56]	; (80a0b00 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0ac8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0aca:	a801      	add	r0, sp, #4
 80a0acc:	f7ff ffe4 	bl	80a0a98 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0ad0:	6823      	ldr	r3, [r4, #0]
 80a0ad2:	07db      	lsls	r3, r3, #31
 80a0ad4:	d410      	bmi.n	80a0af8 <_Z17_fetch_usbserial1v+0x34>
 80a0ad6:	4620      	mov	r0, r4
 80a0ad8:	f7ff fae1 	bl	80a009e <__cxa_guard_acquire>
 80a0adc:	b160      	cbz	r0, 80a0af8 <_Z17_fetch_usbserial1v+0x34>
 80a0ade:	aa01      	add	r2, sp, #4
 80a0ae0:	2101      	movs	r1, #1
 80a0ae2:	4808      	ldr	r0, [pc, #32]	; (80a0b04 <_Z17_fetch_usbserial1v+0x40>)
 80a0ae4:	f7ff ff84 	bl	80a09f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0ae8:	4620      	mov	r0, r4
 80a0aea:	f7ff fadd 	bl	80a00a8 <__cxa_guard_release>
 80a0aee:	4a06      	ldr	r2, [pc, #24]	; (80a0b08 <_Z17_fetch_usbserial1v+0x44>)
 80a0af0:	4906      	ldr	r1, [pc, #24]	; (80a0b0c <_Z17_fetch_usbserial1v+0x48>)
 80a0af2:	4804      	ldr	r0, [pc, #16]	; (80a0b04 <_Z17_fetch_usbserial1v+0x40>)
 80a0af4:	f000 fab0 	bl	80a1058 <__aeabi_atexit>
  return _usbserial1;
}
 80a0af8:	4802      	ldr	r0, [pc, #8]	; (80a0b04 <_Z17_fetch_usbserial1v+0x40>)
 80a0afa:	b006      	add	sp, #24
 80a0afc:	bd10      	pop	{r4, pc}
 80a0afe:	bf00      	nop
 80a0b00:	200003b0 	.word	0x200003b0
 80a0b04:	20000438 	.word	0x20000438
 80a0b08:	20000088 	.word	0x20000088
 80a0b0c:	080a0971 	.word	0x080a0971

080a0b10 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0b10:	4770      	bx	lr

080a0b12 <_ZN9IPAddressD0Ev>:
 80a0b12:	b510      	push	{r4, lr}
 80a0b14:	4604      	mov	r4, r0
 80a0b16:	2118      	movs	r1, #24
 80a0b18:	f000 faa3 	bl	80a1062 <_ZdlPvj>
 80a0b1c:	4620      	mov	r0, r4
 80a0b1e:	bd10      	pop	{r4, pc}

080a0b20 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b22:	460f      	mov	r7, r1
 80a0b24:	f100 0608 	add.w	r6, r0, #8
 80a0b28:	1d05      	adds	r5, r0, #4
 80a0b2a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0b2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0b30:	220a      	movs	r2, #10
 80a0b32:	4638      	mov	r0, r7
 80a0b34:	f000 f97f 	bl	80a0e36 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0b38:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0b3a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0b3c:	d007      	beq.n	80a0b4e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0b3e:	2c00      	cmp	r4, #0
 80a0b40:	d0f4      	beq.n	80a0b2c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0b42:	212e      	movs	r1, #46	; 0x2e
 80a0b44:	4638      	mov	r0, r7
 80a0b46:	f000 f949 	bl	80a0ddc <_ZN5Print5printEc>
 80a0b4a:	4404      	add	r4, r0
 80a0b4c:	e7ee      	b.n	80a0b2c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0b4e:	4620      	mov	r0, r4
 80a0b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0b54 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0b54:	b510      	push	{r4, lr}
 80a0b56:	4604      	mov	r4, r0
 80a0b58:	4b04      	ldr	r3, [pc, #16]	; (80a0b6c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0b5a:	2211      	movs	r2, #17
 80a0b5c:	f840 3b04 	str.w	r3, [r0], #4
 80a0b60:	2100      	movs	r1, #0
 80a0b62:	f000 fbe2 	bl	80a132a <memset>
{
    clear();
}
 80a0b66:	4620      	mov	r0, r4
 80a0b68:	bd10      	pop	{r4, pc}
 80a0b6a:	bf00      	nop
 80a0b6c:	080a156c 	.word	0x080a156c

080a0b70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0b70:	4603      	mov	r3, r0
 80a0b72:	4a07      	ldr	r2, [pc, #28]	; (80a0b90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0b74:	b510      	push	{r4, lr}
 80a0b76:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0b7a:	f101 0210 	add.w	r2, r1, #16
 80a0b7e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0b82:	4291      	cmp	r1, r2
 80a0b84:	f843 4b04 	str.w	r4, [r3], #4
 80a0b88:	d1f9      	bne.n	80a0b7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0b8a:	780a      	ldrb	r2, [r1, #0]
 80a0b8c:	701a      	strb	r2, [r3, #0]
}
 80a0b8e:	bd10      	pop	{r4, pc}
 80a0b90:	080a156c 	.word	0x080a156c

080a0b94 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0b94:	4a02      	ldr	r2, [pc, #8]	; (80a0ba0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0b96:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0b98:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0b9a:	2204      	movs	r2, #4
 80a0b9c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0b9e:	4770      	bx	lr
 80a0ba0:	080a156c 	.word	0x080a156c

080a0ba4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0ba4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0ba6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0baa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0bae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0bb2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0bb6:	2304      	movs	r3, #4
 80a0bb8:	6041      	str	r1, [r0, #4]
 80a0bba:	7503      	strb	r3, [r0, #20]
 80a0bbc:	bd10      	pop	{r4, pc}
	...

080a0bc0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0bc2:	4d04      	ldr	r5, [pc, #16]	; (80a0bd4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0bc4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0bc6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0bca:	9500      	str	r5, [sp, #0]
 80a0bcc:	f7ff ffea 	bl	80a0ba4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0bd0:	b003      	add	sp, #12
 80a0bd2:	bd30      	pop	{r4, r5, pc}
 80a0bd4:	080a156c 	.word	0x080a156c

080a0bd8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0bd8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0bda:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0bdc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0bde:	b113      	cbz	r3, 80a0be6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0be0:	2203      	movs	r2, #3
 80a0be2:	4601      	mov	r1, r0
 80a0be4:	4798      	blx	r3
    }
 80a0be6:	4620      	mov	r0, r4
 80a0be8:	bd10      	pop	{r4, pc}
	...

080a0bec <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0bec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0bee:	4b14      	ldr	r3, [pc, #80]	; (80a0c40 <serialEventRun+0x54>)
 80a0bf0:	b133      	cbz	r3, 80a0c00 <serialEventRun+0x14>
 80a0bf2:	f7ff ff2b 	bl	80a0a4c <_Z16_fetch_usbserialv>
 80a0bf6:	6803      	ldr	r3, [r0, #0]
 80a0bf8:	691b      	ldr	r3, [r3, #16]
 80a0bfa:	4798      	blx	r3
 80a0bfc:	2800      	cmp	r0, #0
 80a0bfe:	dc16      	bgt.n	80a0c2e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0c00:	4b10      	ldr	r3, [pc, #64]	; (80a0c44 <serialEventRun+0x58>)
 80a0c02:	b133      	cbz	r3, 80a0c12 <serialEventRun+0x26>
 80a0c04:	f7ff fe62 	bl	80a08cc <_Z22__fetch_global_Serial1v>
 80a0c08:	6803      	ldr	r3, [r0, #0]
 80a0c0a:	691b      	ldr	r3, [r3, #16]
 80a0c0c:	4798      	blx	r3
 80a0c0e:	2800      	cmp	r0, #0
 80a0c10:	dc10      	bgt.n	80a0c34 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0c12:	4b0d      	ldr	r3, [pc, #52]	; (80a0c48 <serialEventRun+0x5c>)
 80a0c14:	b10b      	cbz	r3, 80a0c1a <serialEventRun+0x2e>
 80a0c16:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0c1a:	4b0c      	ldr	r3, [pc, #48]	; (80a0c4c <serialEventRun+0x60>)
 80a0c1c:	b17b      	cbz	r3, 80a0c3e <serialEventRun+0x52>
 80a0c1e:	f7ff ff51 	bl	80a0ac4 <_Z17_fetch_usbserial1v>
 80a0c22:	6803      	ldr	r3, [r0, #0]
 80a0c24:	691b      	ldr	r3, [r3, #16]
 80a0c26:	4798      	blx	r3
 80a0c28:	2800      	cmp	r0, #0
 80a0c2a:	dc06      	bgt.n	80a0c3a <serialEventRun+0x4e>
 80a0c2c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0c2e:	f3af 8000 	nop.w
 80a0c32:	e7e5      	b.n	80a0c00 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0c34:	f3af 8000 	nop.w
 80a0c38:	e7eb      	b.n	80a0c12 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0c3a:	f3af 8000 	nop.w
 80a0c3e:	bd08      	pop	{r3, pc}
	...

080a0c50 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0c50:	b508      	push	{r3, lr}
	serialEventRun();
 80a0c52:	f7ff ffcb 	bl	80a0bec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0c56:	f7ff fbd1 	bl	80a03fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0c5a:	4b01      	ldr	r3, [pc, #4]	; (80a0c60 <_post_loop+0x10>)
 80a0c5c:	6018      	str	r0, [r3, #0]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	200005a8 	.word	0x200005a8

080a0c64 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c64:	4802      	ldr	r0, [pc, #8]	; (80a0c70 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0c66:	4a03      	ldr	r2, [pc, #12]	; (80a0c74 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0c68:	4903      	ldr	r1, [pc, #12]	; (80a0c78 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0c6a:	1a12      	subs	r2, r2, r0
 80a0c6c:	f000 bb52 	b.w	80a1314 <memcpy>
 80a0c70:	40024000 	.word	0x40024000
 80a0c74:	40024004 	.word	0x40024004
 80a0c78:	080a1720 	.word	0x080a1720

080a0c7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c7e:	2300      	movs	r3, #0
 80a0c80:	9300      	str	r3, [sp, #0]
 80a0c82:	461a      	mov	r2, r3
 80a0c84:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c88:	f7ff fc7a 	bl	80a0580 <system_ctrl_set_result>
}
 80a0c8c:	b003      	add	sp, #12
 80a0c8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0c94 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0c94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0c96:	8843      	ldrh	r3, [r0, #2]
 80a0c98:	2b0a      	cmp	r3, #10
 80a0c9a:	d008      	beq.n	80a0cae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0c9c:	2b50      	cmp	r3, #80	; 0x50
 80a0c9e:	d109      	bne.n	80a0cb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0ca0:	4b09      	ldr	r3, [pc, #36]	; (80a0cc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0ca2:	681b      	ldr	r3, [r3, #0]
 80a0ca4:	b13b      	cbz	r3, 80a0cb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0ca6:	b003      	add	sp, #12
 80a0ca8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0cac:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0cae:	f7ff ffe5 	bl	80a0c7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0cb2:	e006      	b.n	80a0cc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0cb4:	2300      	movs	r3, #0
 80a0cb6:	9300      	str	r3, [sp, #0]
 80a0cb8:	461a      	mov	r2, r3
 80a0cba:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0cbe:	f7ff fc5f 	bl	80a0580 <system_ctrl_set_result>
        break;
    }
}
 80a0cc2:	b003      	add	sp, #12
 80a0cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0cc8:	20000550 	.word	0x20000550

080a0ccc <module_user_init_hook>:

void module_user_init_hook()
{
 80a0ccc:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0cce:	4c10      	ldr	r4, [pc, #64]	; (80a0d10 <module_user_init_hook+0x44>)
 80a0cd0:	4d10      	ldr	r5, [pc, #64]	; (80a0d14 <module_user_init_hook+0x48>)
 80a0cd2:	6823      	ldr	r3, [r4, #0]
 80a0cd4:	42ab      	cmp	r3, r5
 80a0cd6:	4b10      	ldr	r3, [pc, #64]	; (80a0d18 <module_user_init_hook+0x4c>)
 80a0cd8:	bf0c      	ite	eq
 80a0cda:	2201      	moveq	r2, #1
 80a0cdc:	2200      	movne	r2, #0
 80a0cde:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0ce0:	d002      	beq.n	80a0ce8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0ce2:	f7ff ffbf 	bl	80a0c64 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0ce6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0ce8:	f7ff fb80 	bl	80a03ec <HAL_RNG_GetRandomNumber>
 80a0cec:	4604      	mov	r4, r0
    srand(seed);
 80a0cee:	f000 fb25 	bl	80a133c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0cf2:	4b0a      	ldr	r3, [pc, #40]	; (80a0d1c <module_user_init_hook+0x50>)
 80a0cf4:	b113      	cbz	r3, 80a0cfc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0cf6:	4620      	mov	r0, r4
 80a0cf8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0cfc:	2100      	movs	r1, #0
 80a0cfe:	4807      	ldr	r0, [pc, #28]	; (80a0d1c <module_user_init_hook+0x50>)
 80a0d00:	f7ff fbd4 	bl	80a04ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d08:	2100      	movs	r1, #0
 80a0d0a:	4805      	ldr	r0, [pc, #20]	; (80a0d20 <module_user_init_hook+0x54>)
 80a0d0c:	f7ff bc2e 	b.w	80a056c <system_ctrl_set_app_request_handler>
 80a0d10:	40024000 	.word	0x40024000
 80a0d14:	9a271c1e 	.word	0x9a271c1e
 80a0d18:	20000554 	.word	0x20000554
 80a0d1c:	00000000 	.word	0x00000000
 80a0d20:	080a0c95 	.word	0x080a0c95

080a0d24 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0d24:	b510      	push	{r4, lr}
 80a0d26:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d28:	f7ff ff56 	bl	80a0bd8 <_ZNSt14_Function_baseD1Ev>
 80a0d2c:	4620      	mov	r0, r4
 80a0d2e:	bd10      	pop	{r4, pc}

080a0d30 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a0d30:	b510      	push	{r4, lr}
 80a0d32:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a0d34:	f7ff fbb2 	bl	80a049c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 80a0d38:	4284      	cmp	r4, r0
 80a0d3a:	d008      	beq.n	80a0d4e <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a0d3c:	b11c      	cbz	r4, 80a0d46 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a0d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 80a0d42:	f7ff bb9b 	b.w	80a047c <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 80a0d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 80a0d4a:	f7ff bb9f 	b.w	80a048c <LED_Signaling_Stop>
 80a0d4e:	bd10      	pop	{r4, pc}

080a0d50 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d50:	4803      	ldr	r0, [pc, #12]	; (80a0d60 <_GLOBAL__sub_I_RGB+0x10>)
 80a0d52:	2300      	movs	r3, #0
 80a0d54:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0d56:	4a03      	ldr	r2, [pc, #12]	; (80a0d64 <_GLOBAL__sub_I_RGB+0x14>)
 80a0d58:	4903      	ldr	r1, [pc, #12]	; (80a0d68 <_GLOBAL__sub_I_RGB+0x18>)
 80a0d5a:	f000 b97d 	b.w	80a1058 <__aeabi_atexit>
 80a0d5e:	bf00      	nop
 80a0d60:	20000558 	.word	0x20000558
 80a0d64:	20000088 	.word	0x20000088
 80a0d68:	080a0d25 	.word	0x080a0d25

080a0d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0d6c:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0d6e:	681a      	ldr	r2, [r3, #0]
 80a0d70:	4b02      	ldr	r3, [pc, #8]	; (80a0d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0d72:	601a      	str	r2, [r3, #0]
 80a0d74:	4770      	bx	lr
 80a0d76:	bf00      	nop
 80a0d78:	20000020 	.word	0x20000020
 80a0d7c:	20000568 	.word	0x20000568

080a0d80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0d80:	4a01      	ldr	r2, [pc, #4]	; (80a0d88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0d82:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0d84:	601a      	str	r2, [r3, #0]
 80a0d86:	4770      	bx	lr
 80a0d88:	080a1617 	.word	0x080a1617
 80a0d8c:	2000056c 	.word	0x2000056c

080a0d90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d92:	4606      	mov	r6, r0
 80a0d94:	460d      	mov	r5, r1
 80a0d96:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0d98:	2400      	movs	r4, #0
  while (size--) {
 80a0d9a:	42bd      	cmp	r5, r7
 80a0d9c:	d00c      	beq.n	80a0db8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0d9e:	6833      	ldr	r3, [r6, #0]
 80a0da0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0da4:	689b      	ldr	r3, [r3, #8]
 80a0da6:	4630      	mov	r0, r6
 80a0da8:	4798      	blx	r3
     if (chunk>=0)
 80a0daa:	2800      	cmp	r0, #0
 80a0dac:	db01      	blt.n	80a0db2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0dae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0db0:	e7f3      	b.n	80a0d9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0db2:	2c00      	cmp	r4, #0
 80a0db4:	bf08      	it	eq
 80a0db6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0db8:	4620      	mov	r0, r4
 80a0dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0dbc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0dbc:	b570      	push	{r4, r5, r6, lr}
 80a0dbe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0dc0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0dc2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0dc4:	b149      	cbz	r1, 80a0dda <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0dc6:	f000 fae1 	bl	80a138c <strlen>
 80a0dca:	682b      	ldr	r3, [r5, #0]
 80a0dcc:	4602      	mov	r2, r0
 80a0dce:	4621      	mov	r1, r4
 80a0dd0:	4628      	mov	r0, r5
    }
 80a0dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0dd6:	68db      	ldr	r3, [r3, #12]
 80a0dd8:	4718      	bx	r3
    }
 80a0dda:	bd70      	pop	{r4, r5, r6, pc}

080a0ddc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0ddc:	6803      	ldr	r3, [r0, #0]
 80a0dde:	689b      	ldr	r3, [r3, #8]
 80a0de0:	4718      	bx	r3

080a0de2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0de2:	2a01      	cmp	r2, #1
 80a0de4:	bf98      	it	ls
 80a0de6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0de8:	b530      	push	{r4, r5, lr}
 80a0dea:	460b      	mov	r3, r1
 80a0dec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0dee:	2100      	movs	r1, #0
 80a0df0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0df4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0df8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0dfc:	fb05 3312 	mls	r3, r5, r2, r3
 80a0e00:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0e02:	2b09      	cmp	r3, #9
 80a0e04:	bf94      	ite	ls
 80a0e06:	3330      	addls	r3, #48	; 0x30
 80a0e08:	3337      	addhi	r3, #55	; 0x37
 80a0e0a:	b2db      	uxtb	r3, r3
 80a0e0c:	4621      	mov	r1, r4
 80a0e0e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0e12:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0e14:	2d00      	cmp	r5, #0
 80a0e16:	d1ef      	bne.n	80a0df8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0e18:	f7ff ffd0 	bl	80a0dbc <_ZN5Print5writeEPKc>
}
 80a0e1c:	b00b      	add	sp, #44	; 0x2c
 80a0e1e:	bd30      	pop	{r4, r5, pc}

080a0e20 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0e20:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0e22:	b922      	cbnz	r2, 80a0e2e <_ZN5Print5printEmi+0xe>
 80a0e24:	6803      	ldr	r3, [r0, #0]
 80a0e26:	b2c9      	uxtb	r1, r1
 80a0e28:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0e2a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0e2c:	4718      	bx	r3
  else return printNumber(n, base);
 80a0e2e:	b2d2      	uxtb	r2, r2
}
 80a0e30:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0e32:	f7ff bfd6 	b.w	80a0de2 <_ZN5Print11printNumberEmh>

080a0e36 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0e36:	f7ff bff3 	b.w	80a0e20 <_ZN5Print5printEmi>

080a0e3a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0e3a:	b510      	push	{r4, lr}
 80a0e3c:	4604      	mov	r4, r0
{
	free(buffer);
 80a0e3e:	6800      	ldr	r0, [r0, #0]
 80a0e40:	f7ff fbb0 	bl	80a05a4 <free>
}
 80a0e44:	4620      	mov	r0, r4
 80a0e46:	bd10      	pop	{r4, pc}

080a0e48 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0e48:	b510      	push	{r4, lr}
 80a0e4a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0e4c:	6800      	ldr	r0, [r0, #0]
 80a0e4e:	b108      	cbz	r0, 80a0e54 <_ZN6String10invalidateEv+0xc>
 80a0e50:	f7ff fba8 	bl	80a05a4 <free>
	buffer = NULL;
 80a0e54:	2300      	movs	r3, #0
 80a0e56:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0e58:	60a3      	str	r3, [r4, #8]
 80a0e5a:	6063      	str	r3, [r4, #4]
 80a0e5c:	bd10      	pop	{r4, pc}

080a0e5e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0e5e:	b538      	push	{r3, r4, r5, lr}
 80a0e60:	4604      	mov	r4, r0
 80a0e62:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0e64:	6800      	ldr	r0, [r0, #0]
 80a0e66:	3101      	adds	r1, #1
 80a0e68:	f7ff fba4 	bl	80a05b4 <realloc>
	if (newbuffer) {
 80a0e6c:	b110      	cbz	r0, 80a0e74 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0e6e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0e72:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0e74:	bd38      	pop	{r3, r4, r5, pc}

080a0e76 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0e76:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0e78:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0e7a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0e7c:	b113      	cbz	r3, 80a0e84 <_ZN6String7reserveEj+0xe>
 80a0e7e:	6843      	ldr	r3, [r0, #4]
 80a0e80:	428b      	cmp	r3, r1
 80a0e82:	d207      	bcs.n	80a0e94 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0e84:	4620      	mov	r0, r4
 80a0e86:	f7ff ffea 	bl	80a0e5e <_ZN6String12changeBufferEj>
 80a0e8a:	b120      	cbz	r0, 80a0e96 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0e8c:	68a3      	ldr	r3, [r4, #8]
 80a0e8e:	b90b      	cbnz	r3, 80a0e94 <_ZN6String7reserveEj+0x1e>
 80a0e90:	6822      	ldr	r2, [r4, #0]
 80a0e92:	7013      	strb	r3, [r2, #0]
 80a0e94:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0e96:	bd10      	pop	{r4, pc}

080a0e98 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0e98:	b570      	push	{r4, r5, r6, lr}
 80a0e9a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0e9c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0e9e:	4604      	mov	r4, r0
 80a0ea0:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0ea2:	f7ff ffe8 	bl	80a0e76 <_ZN6String7reserveEj>
 80a0ea6:	b918      	cbnz	r0, 80a0eb0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0ea8:	4620      	mov	r0, r4
 80a0eaa:	f7ff ffcd 	bl	80a0e48 <_ZN6String10invalidateEv>
		return *this;
 80a0eae:	e009      	b.n	80a0ec4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0eb0:	462a      	mov	r2, r5
 80a0eb2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0eb4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0eb6:	6820      	ldr	r0, [r4, #0]
 80a0eb8:	f000 fa2c 	bl	80a1314 <memcpy>
	buffer[len] = 0;
 80a0ebc:	6822      	ldr	r2, [r4, #0]
 80a0ebe:	68a3      	ldr	r3, [r4, #8]
 80a0ec0:	2100      	movs	r1, #0
 80a0ec2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0ec4:	4620      	mov	r0, r4
 80a0ec6:	bd70      	pop	{r4, r5, r6, pc}

080a0ec8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0ec8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0eca:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0ecc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0ece:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0ed0:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0ed2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0ed4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0ed6:	460d      	mov	r5, r1
 80a0ed8:	b139      	cbz	r1, 80a0eea <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0eda:	4608      	mov	r0, r1
 80a0edc:	f000 fa56 	bl	80a138c <strlen>
 80a0ee0:	4629      	mov	r1, r5
 80a0ee2:	4602      	mov	r2, r0
 80a0ee4:	4620      	mov	r0, r4
 80a0ee6:	f7ff ffd7 	bl	80a0e98 <_ZN6String4copyEPKcj>
}
 80a0eea:	4620      	mov	r0, r4
 80a0eec:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0ef0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0ef4:	4b03      	ldr	r3, [pc, #12]	; (80a0f04 <_GLOBAL__sub_I_System+0x14>)
 80a0ef6:	2000      	movs	r0, #0
 80a0ef8:	7018      	strb	r0, [r3, #0]
 80a0efa:	8058      	strh	r0, [r3, #2]
 80a0efc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0efe:	f7ff bb2d 	b.w	80a055c <set_system_mode>
 80a0f02:	bf00      	nop
 80a0f04:	20000570 	.word	0x20000570

080a0f08 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0f08:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0f0a:	4d0b      	ldr	r5, [pc, #44]	; (80a0f38 <_Z19__fetch_global_Wirev+0x30>)
 80a0f0c:	6829      	ldr	r1, [r5, #0]
 80a0f0e:	f011 0401 	ands.w	r4, r1, #1
 80a0f12:	d10f      	bne.n	80a0f34 <_Z19__fetch_global_Wirev+0x2c>
 80a0f14:	4628      	mov	r0, r5
 80a0f16:	f7ff f8c2 	bl	80a009e <__cxa_guard_acquire>
 80a0f1a:	b158      	cbz	r0, 80a0f34 <_Z19__fetch_global_Wirev+0x2c>
 80a0f1c:	4621      	mov	r1, r4
 80a0f1e:	4807      	ldr	r0, [pc, #28]	; (80a0f3c <_Z19__fetch_global_Wirev+0x34>)
 80a0f20:	f7ff fc62 	bl	80a07e8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0f24:	4628      	mov	r0, r5
 80a0f26:	f7ff f8bf 	bl	80a00a8 <__cxa_guard_release>
 80a0f2a:	4a05      	ldr	r2, [pc, #20]	; (80a0f40 <_Z19__fetch_global_Wirev+0x38>)
 80a0f2c:	4905      	ldr	r1, [pc, #20]	; (80a0f44 <_Z19__fetch_global_Wirev+0x3c>)
 80a0f2e:	4803      	ldr	r0, [pc, #12]	; (80a0f3c <_Z19__fetch_global_Wirev+0x34>)
 80a0f30:	f000 f892 	bl	80a1058 <__aeabi_atexit>
	return wire;
}
 80a0f34:	4801      	ldr	r0, [pc, #4]	; (80a0f3c <_Z19__fetch_global_Wirev+0x34>)
 80a0f36:	bd38      	pop	{r3, r4, r5, pc}
 80a0f38:	20000578 	.word	0x20000578
 80a0f3c:	2000057c 	.word	0x2000057c
 80a0f40:	20000088 	.word	0x20000088
 80a0f44:	080a0791 	.word	0x080a0791

080a0f48 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0f48:	b513      	push	{r0, r1, r4, lr}
 80a0f4a:	4c08      	ldr	r4, [pc, #32]	; (80a0f6c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0f4c:	2300      	movs	r3, #0
 80a0f4e:	461a      	mov	r2, r3
 80a0f50:	4619      	mov	r1, r3
 80a0f52:	9300      	str	r3, [sp, #0]
 80a0f54:	4620      	mov	r0, r4
 80a0f56:	f7ff fe33 	bl	80a0bc0 <_ZN9IPAddressC1Ehhhh>
 80a0f5a:	4620      	mov	r0, r4
 80a0f5c:	4a04      	ldr	r2, [pc, #16]	; (80a0f70 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0f5e:	4905      	ldr	r1, [pc, #20]	; (80a0f74 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0f60:	b002      	add	sp, #8
 80a0f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0f66:	f000 b877 	b.w	80a1058 <__aeabi_atexit>
 80a0f6a:	bf00      	nop
 80a0f6c:	20000590 	.word	0x20000590
 80a0f70:	20000088 	.word	0x20000088
 80a0f74:	080a0b11 	.word	0x080a0b11

080a0f78 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0f78:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0f7a:	4c0c      	ldr	r4, [pc, #48]	; (80a0fac <_GLOBAL__sub_I_SPI+0x34>)
 80a0f7c:	4e0c      	ldr	r6, [pc, #48]	; (80a0fb0 <_GLOBAL__sub_I_SPI+0x38>)
 80a0f7e:	4d0d      	ldr	r5, [pc, #52]	; (80a0fb4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0f80:	2100      	movs	r1, #0
 80a0f82:	4620      	mov	r0, r4
 80a0f84:	f7ff fb8c 	bl	80a06a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0f88:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0f8a:	4c0b      	ldr	r4, [pc, #44]	; (80a0fb8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0f8c:	4632      	mov	r2, r6
 80a0f8e:	4629      	mov	r1, r5
 80a0f90:	f000 f862 	bl	80a1058 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0f94:	2101      	movs	r1, #1
 80a0f96:	4620      	mov	r0, r4
 80a0f98:	f7ff fb82 	bl	80a06a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0f9c:	4632      	mov	r2, r6
 80a0f9e:	4629      	mov	r1, r5
 80a0fa0:	4620      	mov	r0, r4
 80a0fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0fa6:	f000 b857 	b.w	80a1058 <__aeabi_atexit>
 80a0faa:	bf00      	nop
 80a0fac:	200005ac 	.word	0x200005ac
 80a0fb0:	20000088 	.word	0x20000088
 80a0fb4:	080a0691 	.word	0x080a0691
 80a0fb8:	200005bc 	.word	0x200005bc

080a0fbc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0fbc:	b510      	push	{r4, lr}
 80a0fbe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0fc0:	480f      	ldr	r0, [pc, #60]	; (80a1000 <pinAvailable+0x44>)
 80a0fc2:	f7ff fb81 	bl	80a06c8 <_ZN8SPIClass9isEnabledEv>
 80a0fc6:	b128      	cbz	r0, 80a0fd4 <pinAvailable+0x18>
 80a0fc8:	f1a4 030d 	sub.w	r3, r4, #13
 80a0fcc:	2b02      	cmp	r3, #2
 80a0fce:	d801      	bhi.n	80a0fd4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0fd0:	2000      	movs	r0, #0
 80a0fd2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0fd4:	f7ff ff98 	bl	80a0f08 <_Z19__fetch_global_Wirev>
 80a0fd8:	f7ff fc18 	bl	80a080c <_ZN7TwoWire9isEnabledEv>
 80a0fdc:	b108      	cbz	r0, 80a0fe2 <pinAvailable+0x26>
 80a0fde:	2c01      	cmp	r4, #1
 80a0fe0:	d9f6      	bls.n	80a0fd0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0fe2:	f7ff fc73 	bl	80a08cc <_Z22__fetch_global_Serial1v>
 80a0fe6:	f7ff fc6d 	bl	80a08c4 <_ZN11USARTSerial9isEnabledEv>
 80a0fea:	b118      	cbz	r0, 80a0ff4 <pinAvailable+0x38>
 80a0fec:	f1a4 0312 	sub.w	r3, r4, #18
 80a0ff0:	2b01      	cmp	r3, #1
 80a0ff2:	d9ed      	bls.n	80a0fd0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0ff4:	2c17      	cmp	r4, #23
 80a0ff6:	bf8c      	ite	hi
 80a0ff8:	2000      	movhi	r0, #0
 80a0ffa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0ffc:	bd10      	pop	{r4, pc}
 80a0ffe:	bf00      	nop
 80a1000:	200005ac 	.word	0x200005ac

080a1004 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1004:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1006:	b538      	push	{r3, r4, r5, lr}
 80a1008:	4604      	mov	r4, r0
 80a100a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a100c:	d80a      	bhi.n	80a1024 <pinMode+0x20>
 80a100e:	29ff      	cmp	r1, #255	; 0xff
 80a1010:	d008      	beq.n	80a1024 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1012:	f7ff ffd3 	bl	80a0fbc <pinAvailable>
 80a1016:	b128      	cbz	r0, 80a1024 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1018:	4629      	mov	r1, r5
 80a101a:	4620      	mov	r0, r4
}
 80a101c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1020:	f7ff ba14 	b.w	80a044c <HAL_Pin_Mode>
 80a1024:	bd38      	pop	{r3, r4, r5, pc}

080a1026 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1026:	b538      	push	{r3, r4, r5, lr}
 80a1028:	4604      	mov	r4, r0
 80a102a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a102c:	f7ff fa16 	bl	80a045c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1030:	28ff      	cmp	r0, #255	; 0xff
 80a1032:	d010      	beq.n	80a1056 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1034:	2806      	cmp	r0, #6
 80a1036:	d804      	bhi.n	80a1042 <digitalWrite+0x1c>
 80a1038:	234d      	movs	r3, #77	; 0x4d
 80a103a:	fa23 f000 	lsr.w	r0, r3, r0
 80a103e:	07c3      	lsls	r3, r0, #31
 80a1040:	d409      	bmi.n	80a1056 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1042:	4620      	mov	r0, r4
 80a1044:	f7ff ffba 	bl	80a0fbc <pinAvailable>
 80a1048:	b128      	cbz	r0, 80a1056 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a104a:	4629      	mov	r1, r5
 80a104c:	4620      	mov	r0, r4
}
 80a104e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1052:	f7ff ba0b 	b.w	80a046c <HAL_GPIO_Write>
 80a1056:	bd38      	pop	{r3, r4, r5, pc}

080a1058 <__aeabi_atexit>:
 80a1058:	460b      	mov	r3, r1
 80a105a:	4601      	mov	r1, r0
 80a105c:	4618      	mov	r0, r3
 80a105e:	f000 b94b 	b.w	80a12f8 <__cxa_atexit>

080a1062 <_ZdlPvj>:
 80a1062:	f7ff b81a 	b.w	80a009a <_ZdlPv>
	...

080a1068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1068:	4b18      	ldr	r3, [pc, #96]	; (80a10cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a106a:	681a      	ldr	r2, [r3, #0]
 80a106c:	07d1      	lsls	r1, r2, #31
 80a106e:	bf5c      	itt	pl
 80a1070:	2201      	movpl	r2, #1
 80a1072:	601a      	strpl	r2, [r3, #0]
 80a1074:	4b16      	ldr	r3, [pc, #88]	; (80a10d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1076:	681a      	ldr	r2, [r3, #0]
 80a1078:	07d2      	lsls	r2, r2, #31
 80a107a:	bf5c      	itt	pl
 80a107c:	2201      	movpl	r2, #1
 80a107e:	601a      	strpl	r2, [r3, #0]
 80a1080:	4b14      	ldr	r3, [pc, #80]	; (80a10d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1082:	681a      	ldr	r2, [r3, #0]
 80a1084:	07d0      	lsls	r0, r2, #31
 80a1086:	bf5c      	itt	pl
 80a1088:	2201      	movpl	r2, #1
 80a108a:	601a      	strpl	r2, [r3, #0]
 80a108c:	4b12      	ldr	r3, [pc, #72]	; (80a10d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a108e:	681a      	ldr	r2, [r3, #0]
 80a1090:	07d1      	lsls	r1, r2, #31
 80a1092:	bf5c      	itt	pl
 80a1094:	2201      	movpl	r2, #1
 80a1096:	601a      	strpl	r2, [r3, #0]
 80a1098:	4b10      	ldr	r3, [pc, #64]	; (80a10dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a109a:	681a      	ldr	r2, [r3, #0]
 80a109c:	07d2      	lsls	r2, r2, #31
 80a109e:	bf5c      	itt	pl
 80a10a0:	2201      	movpl	r2, #1
 80a10a2:	601a      	strpl	r2, [r3, #0]
 80a10a4:	4b0e      	ldr	r3, [pc, #56]	; (80a10e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a10a6:	681a      	ldr	r2, [r3, #0]
 80a10a8:	07d0      	lsls	r0, r2, #31
 80a10aa:	bf5c      	itt	pl
 80a10ac:	2201      	movpl	r2, #1
 80a10ae:	601a      	strpl	r2, [r3, #0]
 80a10b0:	4b0c      	ldr	r3, [pc, #48]	; (80a10e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a10b2:	681a      	ldr	r2, [r3, #0]
 80a10b4:	07d1      	lsls	r1, r2, #31
 80a10b6:	bf5c      	itt	pl
 80a10b8:	2201      	movpl	r2, #1
 80a10ba:	601a      	strpl	r2, [r3, #0]
 80a10bc:	4b0a      	ldr	r3, [pc, #40]	; (80a10e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a10be:	681a      	ldr	r2, [r3, #0]
 80a10c0:	07d2      	lsls	r2, r2, #31
 80a10c2:	bf5c      	itt	pl
 80a10c4:	2201      	movpl	r2, #1
 80a10c6:	601a      	strpl	r2, [r3, #0]
 80a10c8:	4770      	bx	lr
 80a10ca:	bf00      	nop
 80a10cc:	200005e8 	.word	0x200005e8
 80a10d0:	200005e4 	.word	0x200005e4
 80a10d4:	200005e0 	.word	0x200005e0
 80a10d8:	200005dc 	.word	0x200005dc
 80a10dc:	200005d8 	.word	0x200005d8
 80a10e0:	200005d4 	.word	0x200005d4
 80a10e4:	200005d0 	.word	0x200005d0
 80a10e8:	200005cc 	.word	0x200005cc

080a10ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a10ec:	4b24      	ldr	r3, [pc, #144]	; (80a1180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a10ee:	681a      	ldr	r2, [r3, #0]
 80a10f0:	07d0      	lsls	r0, r2, #31
 80a10f2:	bf5c      	itt	pl
 80a10f4:	2201      	movpl	r2, #1
 80a10f6:	601a      	strpl	r2, [r3, #0]
 80a10f8:	4b22      	ldr	r3, [pc, #136]	; (80a1184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a10fa:	681a      	ldr	r2, [r3, #0]
 80a10fc:	07d1      	lsls	r1, r2, #31
 80a10fe:	bf5c      	itt	pl
 80a1100:	2201      	movpl	r2, #1
 80a1102:	601a      	strpl	r2, [r3, #0]
 80a1104:	4b20      	ldr	r3, [pc, #128]	; (80a1188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1106:	681a      	ldr	r2, [r3, #0]
 80a1108:	07d2      	lsls	r2, r2, #31
 80a110a:	bf5c      	itt	pl
 80a110c:	2201      	movpl	r2, #1
 80a110e:	601a      	strpl	r2, [r3, #0]
 80a1110:	4b1e      	ldr	r3, [pc, #120]	; (80a118c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1112:	681a      	ldr	r2, [r3, #0]
 80a1114:	07d0      	lsls	r0, r2, #31
 80a1116:	bf5c      	itt	pl
 80a1118:	2201      	movpl	r2, #1
 80a111a:	601a      	strpl	r2, [r3, #0]
 80a111c:	4b1c      	ldr	r3, [pc, #112]	; (80a1190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a111e:	681a      	ldr	r2, [r3, #0]
 80a1120:	07d1      	lsls	r1, r2, #31
 80a1122:	bf5c      	itt	pl
 80a1124:	2201      	movpl	r2, #1
 80a1126:	601a      	strpl	r2, [r3, #0]
 80a1128:	4b1a      	ldr	r3, [pc, #104]	; (80a1194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a112a:	681a      	ldr	r2, [r3, #0]
 80a112c:	07d2      	lsls	r2, r2, #31
 80a112e:	bf5c      	itt	pl
 80a1130:	2201      	movpl	r2, #1
 80a1132:	601a      	strpl	r2, [r3, #0]
 80a1134:	4b18      	ldr	r3, [pc, #96]	; (80a1198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1136:	681a      	ldr	r2, [r3, #0]
 80a1138:	07d0      	lsls	r0, r2, #31
 80a113a:	bf5c      	itt	pl
 80a113c:	2201      	movpl	r2, #1
 80a113e:	601a      	strpl	r2, [r3, #0]
 80a1140:	4b16      	ldr	r3, [pc, #88]	; (80a119c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1142:	681a      	ldr	r2, [r3, #0]
 80a1144:	07d1      	lsls	r1, r2, #31
 80a1146:	bf5c      	itt	pl
 80a1148:	2201      	movpl	r2, #1
 80a114a:	601a      	strpl	r2, [r3, #0]
 80a114c:	4b14      	ldr	r3, [pc, #80]	; (80a11a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a114e:	681a      	ldr	r2, [r3, #0]
 80a1150:	07d2      	lsls	r2, r2, #31
 80a1152:	bf5c      	itt	pl
 80a1154:	2201      	movpl	r2, #1
 80a1156:	601a      	strpl	r2, [r3, #0]
 80a1158:	4b12      	ldr	r3, [pc, #72]	; (80a11a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a115a:	681a      	ldr	r2, [r3, #0]
 80a115c:	07d0      	lsls	r0, r2, #31
 80a115e:	bf5c      	itt	pl
 80a1160:	2201      	movpl	r2, #1
 80a1162:	601a      	strpl	r2, [r3, #0]
 80a1164:	4b10      	ldr	r3, [pc, #64]	; (80a11a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1166:	681a      	ldr	r2, [r3, #0]
 80a1168:	07d1      	lsls	r1, r2, #31
 80a116a:	bf5c      	itt	pl
 80a116c:	2201      	movpl	r2, #1
 80a116e:	601a      	strpl	r2, [r3, #0]
 80a1170:	4b0e      	ldr	r3, [pc, #56]	; (80a11ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1172:	681a      	ldr	r2, [r3, #0]
 80a1174:	07d2      	lsls	r2, r2, #31
 80a1176:	bf5c      	itt	pl
 80a1178:	2201      	movpl	r2, #1
 80a117a:	601a      	strpl	r2, [r3, #0]
 80a117c:	4770      	bx	lr
 80a117e:	bf00      	nop
 80a1180:	20000618 	.word	0x20000618
 80a1184:	20000614 	.word	0x20000614
 80a1188:	20000610 	.word	0x20000610
 80a118c:	2000060c 	.word	0x2000060c
 80a1190:	20000608 	.word	0x20000608
 80a1194:	20000604 	.word	0x20000604
 80a1198:	20000600 	.word	0x20000600
 80a119c:	200005fc 	.word	0x200005fc
 80a11a0:	200005f8 	.word	0x200005f8
 80a11a4:	200005f4 	.word	0x200005f4
 80a11a8:	200005f0 	.word	0x200005f0
 80a11ac:	200005ec 	.word	0x200005ec

080a11b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a11b0:	4b24      	ldr	r3, [pc, #144]	; (80a1244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a11b2:	681a      	ldr	r2, [r3, #0]
 80a11b4:	07d0      	lsls	r0, r2, #31
 80a11b6:	bf5c      	itt	pl
 80a11b8:	2201      	movpl	r2, #1
 80a11ba:	601a      	strpl	r2, [r3, #0]
 80a11bc:	4b22      	ldr	r3, [pc, #136]	; (80a1248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a11be:	681a      	ldr	r2, [r3, #0]
 80a11c0:	07d1      	lsls	r1, r2, #31
 80a11c2:	bf5c      	itt	pl
 80a11c4:	2201      	movpl	r2, #1
 80a11c6:	601a      	strpl	r2, [r3, #0]
 80a11c8:	4b20      	ldr	r3, [pc, #128]	; (80a124c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a11ca:	681a      	ldr	r2, [r3, #0]
 80a11cc:	07d2      	lsls	r2, r2, #31
 80a11ce:	bf5c      	itt	pl
 80a11d0:	2201      	movpl	r2, #1
 80a11d2:	601a      	strpl	r2, [r3, #0]
 80a11d4:	4b1e      	ldr	r3, [pc, #120]	; (80a1250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a11d6:	681a      	ldr	r2, [r3, #0]
 80a11d8:	07d0      	lsls	r0, r2, #31
 80a11da:	bf5c      	itt	pl
 80a11dc:	2201      	movpl	r2, #1
 80a11de:	601a      	strpl	r2, [r3, #0]
 80a11e0:	4b1c      	ldr	r3, [pc, #112]	; (80a1254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a11e2:	681a      	ldr	r2, [r3, #0]
 80a11e4:	07d1      	lsls	r1, r2, #31
 80a11e6:	bf5c      	itt	pl
 80a11e8:	2201      	movpl	r2, #1
 80a11ea:	601a      	strpl	r2, [r3, #0]
 80a11ec:	4b1a      	ldr	r3, [pc, #104]	; (80a1258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a11ee:	681a      	ldr	r2, [r3, #0]
 80a11f0:	07d2      	lsls	r2, r2, #31
 80a11f2:	bf5c      	itt	pl
 80a11f4:	2201      	movpl	r2, #1
 80a11f6:	601a      	strpl	r2, [r3, #0]
 80a11f8:	4b18      	ldr	r3, [pc, #96]	; (80a125c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a11fa:	681a      	ldr	r2, [r3, #0]
 80a11fc:	07d0      	lsls	r0, r2, #31
 80a11fe:	bf5c      	itt	pl
 80a1200:	2201      	movpl	r2, #1
 80a1202:	601a      	strpl	r2, [r3, #0]
 80a1204:	4b16      	ldr	r3, [pc, #88]	; (80a1260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1206:	681a      	ldr	r2, [r3, #0]
 80a1208:	07d1      	lsls	r1, r2, #31
 80a120a:	bf5c      	itt	pl
 80a120c:	2201      	movpl	r2, #1
 80a120e:	601a      	strpl	r2, [r3, #0]
 80a1210:	4b14      	ldr	r3, [pc, #80]	; (80a1264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1212:	681a      	ldr	r2, [r3, #0]
 80a1214:	07d2      	lsls	r2, r2, #31
 80a1216:	bf5c      	itt	pl
 80a1218:	2201      	movpl	r2, #1
 80a121a:	601a      	strpl	r2, [r3, #0]
 80a121c:	4b12      	ldr	r3, [pc, #72]	; (80a1268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a121e:	681a      	ldr	r2, [r3, #0]
 80a1220:	07d0      	lsls	r0, r2, #31
 80a1222:	bf5c      	itt	pl
 80a1224:	2201      	movpl	r2, #1
 80a1226:	601a      	strpl	r2, [r3, #0]
 80a1228:	4b10      	ldr	r3, [pc, #64]	; (80a126c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a122a:	681a      	ldr	r2, [r3, #0]
 80a122c:	07d1      	lsls	r1, r2, #31
 80a122e:	bf5c      	itt	pl
 80a1230:	2201      	movpl	r2, #1
 80a1232:	601a      	strpl	r2, [r3, #0]
 80a1234:	4b0e      	ldr	r3, [pc, #56]	; (80a1270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1236:	681a      	ldr	r2, [r3, #0]
 80a1238:	07d2      	lsls	r2, r2, #31
 80a123a:	bf5c      	itt	pl
 80a123c:	2201      	movpl	r2, #1
 80a123e:	601a      	strpl	r2, [r3, #0]
 80a1240:	4770      	bx	lr
 80a1242:	bf00      	nop
 80a1244:	20000648 	.word	0x20000648
 80a1248:	20000644 	.word	0x20000644
 80a124c:	20000640 	.word	0x20000640
 80a1250:	2000063c 	.word	0x2000063c
 80a1254:	20000638 	.word	0x20000638
 80a1258:	20000634 	.word	0x20000634
 80a125c:	20000630 	.word	0x20000630
 80a1260:	2000062c 	.word	0x2000062c
 80a1264:	20000628 	.word	0x20000628
 80a1268:	20000624 	.word	0x20000624
 80a126c:	20000620 	.word	0x20000620
 80a1270:	2000061c 	.word	0x2000061c

080a1274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1274:	4b18      	ldr	r3, [pc, #96]	; (80a12d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1276:	681a      	ldr	r2, [r3, #0]
 80a1278:	07d1      	lsls	r1, r2, #31
 80a127a:	bf5c      	itt	pl
 80a127c:	2201      	movpl	r2, #1
 80a127e:	601a      	strpl	r2, [r3, #0]
 80a1280:	4b16      	ldr	r3, [pc, #88]	; (80a12dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1282:	681a      	ldr	r2, [r3, #0]
 80a1284:	07d2      	lsls	r2, r2, #31
 80a1286:	bf5c      	itt	pl
 80a1288:	2201      	movpl	r2, #1
 80a128a:	601a      	strpl	r2, [r3, #0]
 80a128c:	4b14      	ldr	r3, [pc, #80]	; (80a12e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a128e:	681a      	ldr	r2, [r3, #0]
 80a1290:	07d0      	lsls	r0, r2, #31
 80a1292:	bf5c      	itt	pl
 80a1294:	2201      	movpl	r2, #1
 80a1296:	601a      	strpl	r2, [r3, #0]
 80a1298:	4b12      	ldr	r3, [pc, #72]	; (80a12e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a129a:	681a      	ldr	r2, [r3, #0]
 80a129c:	07d1      	lsls	r1, r2, #31
 80a129e:	bf5c      	itt	pl
 80a12a0:	2201      	movpl	r2, #1
 80a12a2:	601a      	strpl	r2, [r3, #0]
 80a12a4:	4b10      	ldr	r3, [pc, #64]	; (80a12e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a12a6:	681a      	ldr	r2, [r3, #0]
 80a12a8:	07d2      	lsls	r2, r2, #31
 80a12aa:	bf5c      	itt	pl
 80a12ac:	2201      	movpl	r2, #1
 80a12ae:	601a      	strpl	r2, [r3, #0]
 80a12b0:	4b0e      	ldr	r3, [pc, #56]	; (80a12ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a12b2:	681a      	ldr	r2, [r3, #0]
 80a12b4:	07d0      	lsls	r0, r2, #31
 80a12b6:	bf5c      	itt	pl
 80a12b8:	2201      	movpl	r2, #1
 80a12ba:	601a      	strpl	r2, [r3, #0]
 80a12bc:	4b0c      	ldr	r3, [pc, #48]	; (80a12f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a12be:	681a      	ldr	r2, [r3, #0]
 80a12c0:	07d1      	lsls	r1, r2, #31
 80a12c2:	bf5c      	itt	pl
 80a12c4:	2201      	movpl	r2, #1
 80a12c6:	601a      	strpl	r2, [r3, #0]
 80a12c8:	4b0a      	ldr	r3, [pc, #40]	; (80a12f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a12ca:	681a      	ldr	r2, [r3, #0]
 80a12cc:	07d2      	lsls	r2, r2, #31
 80a12ce:	bf5c      	itt	pl
 80a12d0:	2201      	movpl	r2, #1
 80a12d2:	601a      	strpl	r2, [r3, #0]
 80a12d4:	4770      	bx	lr
 80a12d6:	bf00      	nop
 80a12d8:	20000668 	.word	0x20000668
 80a12dc:	20000664 	.word	0x20000664
 80a12e0:	20000660 	.word	0x20000660
 80a12e4:	2000065c 	.word	0x2000065c
 80a12e8:	20000658 	.word	0x20000658
 80a12ec:	20000654 	.word	0x20000654
 80a12f0:	20000650 	.word	0x20000650
 80a12f4:	2000064c 	.word	0x2000064c

080a12f8 <__cxa_atexit>:
 80a12f8:	b510      	push	{r4, lr}
 80a12fa:	4c05      	ldr	r4, [pc, #20]	; (80a1310 <__cxa_atexit+0x18>)
 80a12fc:	4613      	mov	r3, r2
 80a12fe:	b12c      	cbz	r4, 80a130c <__cxa_atexit+0x14>
 80a1300:	460a      	mov	r2, r1
 80a1302:	4601      	mov	r1, r0
 80a1304:	2002      	movs	r0, #2
 80a1306:	f3af 8000 	nop.w
 80a130a:	bd10      	pop	{r4, pc}
 80a130c:	4620      	mov	r0, r4
 80a130e:	bd10      	pop	{r4, pc}
 80a1310:	00000000 	.word	0x00000000

080a1314 <memcpy>:
 80a1314:	b510      	push	{r4, lr}
 80a1316:	1e43      	subs	r3, r0, #1
 80a1318:	440a      	add	r2, r1
 80a131a:	4291      	cmp	r1, r2
 80a131c:	d004      	beq.n	80a1328 <memcpy+0x14>
 80a131e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1322:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1326:	e7f8      	b.n	80a131a <memcpy+0x6>
 80a1328:	bd10      	pop	{r4, pc}

080a132a <memset>:
 80a132a:	4603      	mov	r3, r0
 80a132c:	4402      	add	r2, r0
 80a132e:	4293      	cmp	r3, r2
 80a1330:	d002      	beq.n	80a1338 <memset+0xe>
 80a1332:	f803 1b01 	strb.w	r1, [r3], #1
 80a1336:	e7fa      	b.n	80a132e <memset+0x4>
 80a1338:	4770      	bx	lr
	...

080a133c <srand>:
 80a133c:	b538      	push	{r3, r4, r5, lr}
 80a133e:	4b12      	ldr	r3, [pc, #72]	; (80a1388 <srand+0x4c>)
 80a1340:	4605      	mov	r5, r0
 80a1342:	681c      	ldr	r4, [r3, #0]
 80a1344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1346:	b9d3      	cbnz	r3, 80a137e <srand+0x42>
 80a1348:	2018      	movs	r0, #24
 80a134a:	f7ff f923 	bl	80a0594 <malloc>
 80a134e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1352:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1354:	8003      	strh	r3, [r0, #0]
 80a1356:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a135a:	8043      	strh	r3, [r0, #2]
 80a135c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1360:	8083      	strh	r3, [r0, #4]
 80a1362:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1366:	80c3      	strh	r3, [r0, #6]
 80a1368:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a136c:	8103      	strh	r3, [r0, #8]
 80a136e:	2305      	movs	r3, #5
 80a1370:	8143      	strh	r3, [r0, #10]
 80a1372:	230b      	movs	r3, #11
 80a1374:	8183      	strh	r3, [r0, #12]
 80a1376:	2201      	movs	r2, #1
 80a1378:	2300      	movs	r3, #0
 80a137a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a137e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1380:	2200      	movs	r2, #0
 80a1382:	611d      	str	r5, [r3, #16]
 80a1384:	615a      	str	r2, [r3, #20]
 80a1386:	bd38      	pop	{r3, r4, r5, pc}
 80a1388:	20000084 	.word	0x20000084

080a138c <strlen>:
 80a138c:	4603      	mov	r3, r0
 80a138e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1392:	2a00      	cmp	r2, #0
 80a1394:	d1fb      	bne.n	80a138e <strlen+0x2>
 80a1396:	1a18      	subs	r0, r3, r0
 80a1398:	3801      	subs	r0, #1
 80a139a:	4770      	bx	lr

080a139c <dynalib_user>:
 80a139c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a13ac:	0000 0000 7453 6972 7370 5620 6c6f 6174     ....Strips Volta
 80a13bc:	6567 003a 6553 646e 7265 4920 746e 7265     ge:.Sender Inter
 80a13cc:	6566 6572 636e 2065 6f56 746c 6761 3a65     ference Voltage:
 80a13dc:	5200 6365 6965 6576 4920 746e 7265 6566     .Receive Interfe
 80a13ec:	6572 636e 2065 6f56 746c 6761 3a65 2c00     rence Voltage:.,
 80a13fc:	4f00 4d53 5300 4d49 5200 4d49 7300 7274     .OSM.SIM.RIM.str
 80a140c:	7069 654d 7361 7275 0065 6573 646e 7265     ipMeasure.sender
 80a141c:	6e49 4d74 6165 7573 6572 7200 6365 6e49     IntMeasure.recIn
 80a142c:	4d74 6165 7573 6572 6100 6464 7453 6972     tMeasure.addStri
 80a143c:	0070 4441 0044 6572 6f6d 6576 7453 6972     p.ADD.removeStri
 80a144c:	0070 5553 0042 6572 4963 746e 654d 7361     p.SUB.recIntMeas
 80a145c:	7275 6d65 0000 0000                         urem....

080a1464 <_ZTVN5spark12NetworkClassE>:
	...
 80a146c:	05c5 080a 05cf 080a 05d9 080a 05e3 080a     ................
 80a147c:	05ed 080a 05f9 080a 0605 080a 0611 080a     ................
 80a148c:	0619 080a 0623 080a 062d 080a               ....#...-...

080a1498 <_ZTV8SPIClass>:
	...
 80a14a0:	0691 080a 0693 080a                         ........

080a14a8 <_ZTVN5spark9WiFiClassE>:
	...
 80a14b0:	0771 080a 0767 080a 075d 080a 06cf 080a     q...g...].......
 80a14c0:	0751 080a 0745 080a 0739 080a 0731 080a     Q...E...9...1...
 80a14d0:	0727 080a 071d 080a 06d9 080a               '...........

080a14dc <_ZTV7TwoWire>:
	...
 80a14e4:	0791 080a 07db 080a 07b3 080a 0793 080a     ................
 80a14f4:	07bb 080a 07c3 080a 07cb 080a 07d3 080a     ................

080a1504 <_ZTV11USARTSerial>:
	...
 80a150c:	0815 080a 0865 080a 0873 080a 0d91 080a     ....e...s.......
 80a151c:	0829 080a 084b 080a 0837 080a 085f 080a     )...K...7..._...
 80a152c:	0817 080a 081b 080a                         ........

080a1534 <_ZTV9USBSerial>:
	...
 80a153c:	0971 080a 09c1 080a 09cf 080a 0d91 080a     q...............
 80a154c:	09ad 080a 0973 080a 0989 080a 09bb 080a     ....s...........
 80a155c:	099f 080a 096d 080a                         ....m...

080a1564 <_ZTV9IPAddress>:
	...
 80a156c:	0b21 080a 0b11 080a 0b13 080a 005a 2b25     !...........Z.%+
 80a157c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a158c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a159c:	6974 656d 6200 7561 0064 6553 6972 6c61     time.baud.Serial
 80a15ac:	5500 4253 6553 6972 6c61 0031 7974 6570     .USBSerial1.type
 80a15bc:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
 80a15cc:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
 80a15dc:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
 80a15ec:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
 80a15fc:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
 80a160c:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
 80a161c:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a162c:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a163c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 80a164c:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
 80a165c:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
 80a166c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a167c:	6e61 6369 6100 6c6c 0000 0000               anic.all....

080a1688 <__sf_fake_stdin>:
	...

080a16a8 <__sf_fake_stdout>:
	...

080a16c8 <__sf_fake_stderr>:
	...
 80a16e8:	0043                                        C.

080a16ea <link_const_variable_data_end>:
	...

080a16ec <link_constructors_location>:
 80a16ec:	080a01e1 	.word	0x080a01e1
 80a16f0:	080a067d 	.word	0x080a067d
 80a16f4:	080a077d 	.word	0x080a077d
 80a16f8:	080a0d51 	.word	0x080a0d51
 80a16fc:	080a0d6d 	.word	0x080a0d6d
 80a1700:	080a0d81 	.word	0x080a0d81
 80a1704:	080a0ef1 	.word	0x080a0ef1
 80a1708:	080a0f49 	.word	0x080a0f49
 80a170c:	080a0f79 	.word	0x080a0f79
 80a1710:	080a1069 	.word	0x080a1069
 80a1714:	080a10ed 	.word	0x080a10ed
 80a1718:	080a11b1 	.word	0x080a11b1
 80a171c:	080a1275 	.word	0x080a1275
